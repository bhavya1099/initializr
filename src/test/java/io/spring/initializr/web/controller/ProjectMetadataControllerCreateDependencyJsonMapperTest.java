/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=createDependencyJsonMapper_1bb31c41ef
ROOST_METHOD_SIG_HASH=createDependencyJsonMapper_5ed26f22c8

"""
Scenario 1: Test when createDependencyJsonMapper method is invoked

TestName: testCreateDependencyJsonMapperInvocation
Description: This test will ensure that the method createDependencyJsonMapper is invoked correctly and returns an object of DependencyMetadataV21JsonMapper from the class ProjectMetadataController class.
Execution:
  Arrange: Initialize an object of InitializrMetadataVersion
  Act: Invoke the createDependencyJsonMapper method with the created object as a parameter.
  Assert: Assert that the returned object is an instance of DependencyMetadataV21JsonMapper class.
Validation:
  This test ensures that the DependencyMetadataJsonMapper object returned by the createDependencyJsonMapper method is correctly instantiated and is of the class DependencyMetadataV21JsonMapper. It's crucial to the application's workflow as it determines the json mapper used for managing dependencies metadata in different versions of InitializrMetadata.

Scenario 2: Test the returned DependencyMetadataJsonMapper type when createDependencyJsonMapper is invoked

TestName: testReturnedDependencyJsonMapper
Description: This test ensures that the DependencyMetadataJsonMapper returned from the createDependencyJsonMapper method is of expected type DependencyMetadataV21JsonMapper.
Execution:
  Arrange: Initialize an object of InitializrMetadataVersion
  Act: Invoke the createDependencyJsonMapper method with the created object as a parameter.
  Assert: Assert that the type of the returned object is exactly DependencyMetadataV21JsonMapper.
Validation:
  This test is significant because it makes sure that the dependency metadata is managed by the correct version of json mapper. If the returned object is not of the correct type, it may cause errors in other parts of the application that use this json mapper.

Scenario 3: Test call to createDependencyJsonMapper with null argument

TestName: testCallWithNullArgument
Description: The test checks the method's reaction when null is passed as an argument to the createDependencyJsonMapper method.
Execution:
  Arrange: No arrangement step needed in this scenario as the test input is null.
  Act: Invoke the createDependencyJsonMapper method with null as a parameter.
  Assert: Assert that the returned object is not null.
Validation:
  This test is essential to ensure the method's robustness when it comes to handling null arguments. The application should not fail or stall whenever it encounters a null argument.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.controller;

import static org.junit.jupiter.api.Assertions.*;
import io.spring.initializr.generator.version.Version;
import io.spring.initializr.metadata.DependencyMetadataJsonMapper;
import io.spring.initializr.metadata.DependencyMetadataProvider;
import io.spring.initializr.metadata.DependencyMetadataV21JsonMapper;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.metadata.InitializrMetadataVersion;
import io.spring.initializr.web.controller.AbstractMetadataController;
import io.spring.initializr.web.controller.ProjectMetadataController;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.junit.jupiter.api.*;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import io.spring.initializr.metadata.DependencyMetadata;
import io.spring.initializr.metadata.InitializrConfiguration.Platform;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InvalidInitializrMetadataException;
import io.spring.initializr.web.mapper.DependencyMetadataJsonMapper;
import io.spring.initializr.web.mapper.DependencyMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataJsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV22JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV2JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataVersion;
import io.spring.initializr.web.project.InvalidProjectRequestException;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.http.CacheControl;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

class ProjectMetadataControllerCreateDependencyJsonMapperTest {

	@Mock
	InitializrMetadataProvider initializrMetadataProvider;

	@Mock
	DependencyMetadataProvider dependencyMetadataProvider;

	ProjectMetadataController projectMetadataController = new ProjectMetadataController(initializrMetadataProvider,
			dependencyMetadataProvider);

	@Test
	@Tag("isValid")
	void testCreateDependencyJsonMapperInvocation() {
		InitializrMetadataVersion metadataVersion = InitializrMetadataVersion.V2_1;

		DependencyMetadataJsonMapper result = projectMetadataController.createDependencyJsonMapper(metadataVersion);

		assertTrue(result instanceof DependencyMetadataV21JsonMapper);
	}

	@Test
	@Tag("isValid")
	void testReturnedDependencyJsonMapper() {
		InitializrMetadataVersion metadataVersion = InitializrMetadataVersion.V2;

		DependencyMetadataJsonMapper result = projectMetadataController.createDependencyJsonMapper(metadataVersion);

		assertEquals(DependencyMetadataV21JsonMapper.class, result.getClass());
	}

	@Test
	@Tag("isInvalid")
	void testCallWithNullArgument() {
		InitializrMetadataVersion metadataVersion = null;

		DependencyMetadataJsonMapper result = projectMetadataController.createDependencyJsonMapper(metadataVersion);

		assertNotNull(result);
	}

}