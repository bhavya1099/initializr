/*
 * Copyright 2012-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=warPluginContributor_495dd4fb10
ROOST_METHOD_SIG_HASH=warPluginContributor_6816e9724d

"""
  Scenario 1: Test to ensure warPluginContributor contributes the correct plugin

  Details:
    TestName: testWarPluginContributorAddsCorrectPlugin
    Description: This test ensures that the warPluginContributor method contributes the "war" plugin to the Gradle build.
  Execution:
    Arrange: Create an instance of GradleBuild.
    Act: Invoke the warPluginContributor method with the created GradleBuild instance.
    Assert: Check that the collection of plugins from the GradleBuild instance contains the "war" plugin.
  Validation:
    This assertion verifies that the "war" plugin is added to the Gradle build, which is the expected behavior of the warPluginContributor method. This is significant as it shows the method is functioning correctly, contributing the correct plugin to the build.

  Scenario 2: Test to ensure other plugins are not removed when warContributor is called

  Details:
    TestName: testWarContributorDoesNotRemoveOtherPlugins
    Description: The test ensures that calling the warPluginContributor method does not remove other existing plugins in the Gradle build.
  Execution:
    Arrange: Create an instance of GradleBuild and add some plugins to it.
    Act: Invoke the warPluginContributor method with the instance of GradleBuild.
    Assert: Check that the collection of plugins from the GradleBuild still contains the initially added plugins.
  Validation:
    This assertion verifies that the warPluginContributor method does not remove other plugins when it adds the "war" plugin to the build. This ensures that the building of the Gradle project will not be affected negatively by the addition of the "war" plugin.

  Scenario 3: Test effective operation of warPluginContributor given a null build

  Details:
    TestName: testWarContributorWithNullBuild
    Description: This test will check that the warPluginContributor handles a null GradleBuild parameter as input.
  Execution:
    Arrange: No arrangement necessary as we're testing with a null scenario.
    Act: Invoke the warPluginContributor method with null as the build.
    Assert: Check if an appropriate exception is thrown, like NullPointerException.
  Validation:
    The test verifies the method's exception handling when a null build is passed. It checks system robustness in handling such errors.
"""
*/

// ********RoostGPT********

package io.spring.initializr.doc.generator.project;

import io.spring.initializr.generator.buildsystem.gradle.GradleBuild;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import io.spring.initializr.generator.buildsystem.BuildItemResolver;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.function.Executable;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;
import io.spring.initializr.generator.buildsystem.gradle.GradleBuildSystem;
import io.spring.initializr.generator.condition.ConditionalOnBuildSystem;
import io.spring.initializr.generator.condition.ConditionalOnPackaging;
import io.spring.initializr.generator.packaging.war.WarPackaging;
import io.spring.initializr.generator.spring.build.BuildCustomizer;
import org.springframework.context.annotation.Bean;

public class ProjectCustomizationExamplesWarPluginContributorTest {

	private ProjectCustomizationExamples projectCustomizationExamples;

	@BeforeEach
	void setUp() {
		projectCustomizationExamples = new ProjectCustomizationExamples();
	}

	@AfterEach
	void tearDown() {
		projectCustomizationExamples = null;
	}

	@Test
	@Tag("valid")
	public void testWarPluginContributorAddsCorrectPlugin() {
		BuildCustomizer<GradleBuild> warContributor = projectCustomizationExamples.warPluginContributor();
		GradleBuild build = GradleBuild.of((BuildItemResolver) null);
		warContributor.customize(build);
		Assertions.assertTrue(build.plugins().values().stream().anyMatch(plugin -> plugin.getId().equals("war")));
	}

	@Test
	@Tag("valid")
	public void testWarContributorDoesNotRemoveOtherPlugins() {
		BuildCustomizer<GradleBuild> warContributor = projectCustomizationExamples.warPluginContributor();
		GradleBuild build = GradleBuild.of((BuildItemResolver) null);
		build.plugins().add("abc");
		build.plugins().add("xyz");
		warContributor.customize(build);
		Assertions.assertTrue(build.plugins().values().stream().anyMatch(plugin -> plugin.getId().equals("war")));
		Assertions.assertTrue(build.plugins().values().stream().anyMatch(plugin -> plugin.getId().equals("abc")));
		Assertions.assertTrue(build.plugins().values().stream().anyMatch(plugin -> plugin.getId().equals("xyz")));
	}

	@Test
	@Tag("invalid")
	public void testWarContributorWithNullBuild() {
		BuildCustomizer<GradleBuild> warContributor = projectCustomizationExamples.warPluginContributor();
		Executable executable = () -> warContributor.customize(null);
		Assertions.assertThrows(NullPointerException.class, executable);
	}

}