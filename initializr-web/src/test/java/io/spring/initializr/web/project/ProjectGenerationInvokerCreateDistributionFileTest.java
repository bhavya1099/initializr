/*
 * Copyright 2012-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=createDistributionFile_82e954b859
ROOST_METHOD_SIG_HASH=createDistributionFile_8fc3142b95

"""
Scenario 1: Test when method createDistributionFile is called with valid dir and extension parameters
TestName: createDistributionFileWithValidParameters
Description: This test is designed to verify if a method createDistributionFile executes correctly and returns expected Path when invoked with valid dir and extension parameters.
Execution:
  Arrange: Create a mock Path for dir, and a String for extension.
  Act: Invoke createDistributionFile method with the mock dir and the extension string.
  Assert: The Path returned by the method should be the same as the expected Path.
Validation:
  The test's purpose is to confirm if the createDistributionFile method works as intended while being used with any valid parameters. Passing the test indicates that the implementation is correct and it can handle valid dir and extension scenarios, thus increasing application robustness.

Scenario 2: Execute createDistributionFile with null value for dir
TestName: createDistributionFileWithNullDir
Description: This test aims to check how the createDistributionFile method behaves when called with dir parameter as null.
Execution:
  Arrange: Set the dir parameter as null, and prepare a valid extension parameter.
  Act: Invoke createDistributionFile method with dir as null and the extension string.
  Assert: An NullPointerException should be thrown.
Validation:
  This test confirms that the createDistributionFile method handles null dir appropriately and prevents null pointer exception scenarios which could otherwise lead to potential application crash.

Scenario 3: Execute createDistributionFile with null value for extension
TestName: createDistributionFileWithNullExtension
Description: This test is meant to check how the createDistributionFile method behaves when invoked with the extension parameter as null.
Execution:
  Arrange: Prepare a valid dir parameter, and set the extension parameter as null.
  Act: Invoke createDistributionFile method with the mock dir and null for extension string.
  Assert: An NullPointerException should be thrown.
Validation:
  This test confirms if the createDistributionFile method handles null extension appropriately and prevents null pointer exception scenarios which could otherwise lead to potential application crash.

Scenario 4: Execute createDistributionFile with an empty string as extension
TestName: createDistributionFileWithEmptyExtension
Description: This test is intended to check how the createDistributionFile deals with an empty string as an extension.
Execution:
  Arrange: Create a mock Path for dir, and set extension as an empty string.
  Act: Invoke createDistributionFile method with mock dir and empty string as extension.
  Assert: The Path returned by the method should be the same as the expected Path.
Validation:
  This test aims to verify if the createDistributionFile method handles scenarios where the extension is not provided correctly. The significance of this test is to check method robustness against potential incorrect usage cases.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.project;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import org.mockito.Mockito;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.junit.jupiter.api.*;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import io.spring.initializr.generator.buildsystem.BuildItemResolver;
import io.spring.initializr.generator.buildsystem.BuildWriter;
import io.spring.initializr.generator.project.DefaultProjectAssetGenerator;
import io.spring.initializr.generator.project.ProjectAssetGenerator;
import io.spring.initializr.generator.project.ProjectDescription;
import io.spring.initializr.generator.project.ProjectGenerationContext;
import io.spring.initializr.generator.project.ProjectGenerationException;
import io.spring.initializr.generator.project.ProjectGenerator;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.metadata.support.MetadataBuildItemResolver;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.util.FileSystemUtils;

public class ProjectGenerationInvokerCreateDistributionFileTest {

	private ProjectGenerationInvoker projectGenerationInvoker;

	@BeforeEach
	public void setUp() {
		this.projectGenerationInvoker = new ProjectGenerationInvoker(Mockito.mock(ApplicationContext.class),
				Mockito.mock(ApplicationEventPublisher.class),
				Mockito.mock(ProjectRequestToDescriptionConverter.class));
	}

	@Tag("valid")
	@Test
	public void createDistributionFileWithValidParameters() {
		try {
			Path dir = Files.createTempDirectory("testDir");
			String extension = ".js";
			Assertions.assertEquals(dir.resolveSibling(dir.getFileName() + extension),
					projectGenerationInvoker.createDistributionFile(dir, extension));
		}
		catch (Exception e) {
			Assertions.fail("An exception should not have been thrown.");
		}
	}

	@Tag("invalid")
	@Test
	public void createDistributionFileWithNullDir() {
		String extension = ".js";
		Assertions.assertThrows(NullPointerException.class,
				() -> projectGenerationInvoker.createDistributionFile(null, extension));
	}

	@Tag("invalid")
	@Test
	public void createDistributionFileWithNullExtension() {
		try {
			Path dir = Files.createTempDirectory("testDir");
			Assertions.assertThrows(NullPointerException.class,
					() -> projectGenerationInvoker.createDistributionFile(dir, null));
		}
		catch (Exception e) {
			Assertions.fail("An exception should not have been thrown.");
		}
	}

	@Tag("boundary")
	@Test
	public void createDistributionFileWithEmptyExtension() {
		try {
			Path dir = Files.createTempDirectory("testDir");
			String extension = "";
			Assertions.assertEquals(dir.resolveSibling(dir.getFileName() + extension),
					projectGenerationInvoker.createDistributionFile(dir, extension));
		}
		catch (Exception e) {
			Assertions.fail("An exception should not have been thrown.");
		}
	}

}