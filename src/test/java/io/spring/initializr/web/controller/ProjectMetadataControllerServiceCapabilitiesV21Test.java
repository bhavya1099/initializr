/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=serviceCapabilitiesV21_14260ffd96
ROOST_METHOD_SIG_HASH=serviceCapabilitiesV21_14260ffd96

"""
Scenario 1: Service Capabilities V21 Normal Execution

Details:
  TestName: testServiceCapabilitiesV21NormalExecution
  Description: The test is meant to check whether the serviceCapabilitiesV21 method can successfully deliver service capabilities when called.

Execution:
  Arrange: Create a mock InitializrMetadataProvider which returns a realistic mocked InitializrMetadata when called. Set up cache control properties as required.
  Act: Invoke serviceCapabilitiesV21 method without any exceptions.
  Assert: Assert that the ResponseEntity returned has a status code of 200.

Validation:
  The assertion aims to verify that the service successfully returns a Response entity with a HTTP 200 status code, which means the operation was successful. This test is essential to ensure the standard functionality of service capabilities is working correctly.

Scenario 2: Service Capabilities V21 with Exceptions

Details:
  TestName: testServiceCapabilitiesV21WithExceptions
  Description: The test is meant to check how serviceCapabilitiesV21 method handles exceptions, particularly the InvalidProjectRequestException.

Execution:
  Arrange: Create a mock InitializrMetadataProvider which throws an InvalidProjectRequestException when called. Set up cache control properties as required.
  Act: Invoke serviceCapabilitiesV21 method.
  Assert: Assert that the ResponseEntity returned has a status code of 400.

Validation:
  The assertion aims to verify that the service correctly returns a Response entity with a HTTP 400 status code when an exception occurs. This demonstrates that the service can handle error scenarios resulting from invalid requests.

Scenario 3: Service Capabilities V21 Empty Metadata

Details:
  TestName: testServiceCapabilitiesV21EmptyMetadata
  Description: The test is meant to check the behavior of serviceCapabilitiesV21 when the metadata provided is empty.

Execution:
  Arrange: Create a mock InitializrMetadataProvider which returns an empty InitializrMetadata when called. Set up cache control properties as required.
  Act: Invoke serviceCapabilitiesV21 method without any exceptions.
  Assert: Assert that the ResponseEntity body returned is empty.

Validation:
  The assertion aims to verify that the service can handle scenarios where there is no metadata to process. This test helps to ensure that the service is resilient and can gracefully handle situations where there's no metadata.

Scenario 4: Service Capabilities V21 Null Metadata

Details:
  TestName: testServiceCapabilitiesV21NullMetadata
  Description: The test is meant to check the behavior of serviceCapabilitiesV21 when the metadata returned is null.

Execution:
  Arrange: Create a mock InitializrMetadataProvider which returns null when called. Set up cache control properties as required.
  Act: Invoke serviceCapabilitiesV21 method without any exceptions.
  Assert: Assert that the ResponseEntity returned has a status code of 500.

Validation:
  The assertion aims to verify that the service returns a 500 status code when there is an internal error, such as when Null is returned. This test helps ensure that the service correctly identifies server side issues, and reports them using the HTTP response status code.
"""

*/

// ********RoostGPT********

package io.spring.initializr.web.controller;

import io.spring.initializr.metadata.DependencyMetadata;
import io.spring.initializr.metadata.InitializrConfiguration.Platform;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.web.project.InvalidProjectRequestException;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.http.*;
import org.springframework.http.MediaType;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.*;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import io.spring.initializr.generator.version.Version;
import io.spring.initializr.metadata.DependencyMetadataProvider;
import io.spring.initializr.metadata.InvalidInitializrMetadataException;
import io.spring.initializr.web.mapper.DependencyMetadataJsonMapper;
import io.spring.initializr.web.mapper.DependencyMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataJsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV22JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV2JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataVersion;
import org.springframework.http.CacheControl;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

// Importing relevant classes
@ExtendWith(SpringExtension.class)
public class ProjectMetadataControllerServiceCapabilitiesV21Test {

	// Mock dependencies
	@Mock
	private InitializrMetadataProvider metadataProvider;

	private ProjectMetadataController controller;

	private InitializrMetadata metadata = new InitializrMetadata();

	@BeforeEach
	public void setup() {
		controller = new ProjectMetadataController(metadataProvider, dependencyMetadataProvider);
	}

	@Test
	@Tag("valid")
	public void testServiceCapabilitiesV21NormalExecution() throws IOException {
		// Arrange - Set dependencies on controller
		Mockito.when(metadataProvider.get()).thenReturn(metadata);
		// Act
		ResponseEntity<String> response = controller.serviceCapabilitiesV21();

		// Assert
		Assertions.assertEquals(HttpStatus.OK, response.getStatusCode());
	}

	@Test
	@Tag("invalid")
	public void testServiceCapabilitiesV21WithExceptions() throws IOException {
		// Arrange - Throw exception when dependency is called
		Mockito.when(metadataProvider.get()).thenThrow(new InvalidProjectRequestException("Invalid request"));
		// Act & Assert
		Assertions.assertThrows(InvalidProjectRequestException.class, () -> controller.serviceCapabilitiesV21()); // Should
																													// throw
																													// exception
	}

	@Test
	@Tag("valid")
	public void testServiceCapabilitiesV21EmptyMetadata() throws IOException {
		// Arrange - Return empty meta data
		Mockito.when(metadataProvider.get()).thenReturn(new InitializrMetadata());
		// Act
		ResponseEntity<String> response = controller.serviceCapabilitiesV21();

		// Assert
		Assertions.assertTrue(response.getBody().isEmpty());
	}

	@Test
	@Tag("invalid")
	public void testServiceCapabilitiesV21NullMetadata() throws IOException {
		// Arrange - Return null
		Mockito.when(metadataProvider.get()).thenReturn(null);
		// Act
		ResponseEntity<String> response = controller.serviceCapabilitiesV21();

		// Assert
		Assertions.assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
	}

}