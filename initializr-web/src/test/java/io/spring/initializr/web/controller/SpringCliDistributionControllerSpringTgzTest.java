/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=springTgz_05998713f7
ROOST_METHOD_SIG_HASH=springTgz_05998713f7

"""
Scenario 1: Test to verify that the correct redirection URL is returned for springTgz method.

Details:
  TestName: verifySpringTgzRedirectionUrl()
  Description: The test checks whether the "springTgz" method correctly creates and returns a redirect URL using the "metadataProvider".

  Execution:
    Arrange: Mock the "metadataProvider" to return a predefined InitializrMetadata object upon invocation. Set a valid URL string as the distribution URL of this mock object.
    Act: Call the "springTgz" method.
    Assert: Check if the returned string matches with the expected redirection URL.

  Validation:
    The test verifies that the redirection URL creation process of the "springTgz" method is correct. It ensures that the springTgz method makes proper use of the metadataProvider object's createCliDistributionURl function. If it succeeds, this confirms the URL manipulation logic of the "springTgz" method is as intended.

"""
"""
Scenario 2: Test to assert that a RuntimeException is thrown if the metadataProvider returns null.

Details:
  TestName: verifyExceptionOnNullMetadataProvider()
  Description: The test checks if a RuntimeException is thrown when the "metadataProvider" returns null while invoking "springTgz".

  Execution:
    Arrange: Mock "metadataProvider" to return null upon invocation.
    Act: Call the "springTgz" method.
    Assert: Use JUnit to check if a RuntimeException is thrown.

  Validation:
    The assertion aims to verify the exception handling of the "springTgz" method when handling null objects. If a RuntimeException is thrown as expected, this indicates that the method correctly handles null conditions for the metadataProvider object.
"""
"""
Scenario 3: Test to assert if an incorrect Distribution URL throws a MalformedURLException.

Details:
  TestName: verifyExceptionOnInvalidDistributionUrl()
  Description: The test checks if a MalformedURLException is thrown when an invalid distribution URL is passed in the metadata while invoking "springTgz".

Execution:
  Arrange: Mock "metadataProvider" to return an InitializrMetadata object with an invalid distribution URL.
  Act: Call the "springTgz" method.
  Assert: Use JUnit to check if a MalformedURLException is thrown.

Validation:
  This assertion is to verify whether the "springTgz" method can handle malformed URLs. This is a crucial part of error handling to prevent security risks associated with poorly formed URLs.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.controller;

import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.junit.jupiter.api.*;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

public class SpringCliDistributionControllerSpringTgzTest {

	public InitializrMetadataProvider metadataProvider;

	public SpringCliDistributionController controller;

	@BeforeEach
	public void setup() {
		this.metadataProvider = Mockito.mock(InitializrMetadataProvider.class);
		this.controller = new SpringCliDistributionController(metadataProvider);
	}

	@Test
	@Tag("valid")
	public void verifySpringTgzRedirectionUrl() {
		String expectedUrl = "http://valid.url";
		InitializrMetadata metadata = Mockito.mock(InitializrMetadata.class);
		Mockito.when(metadata.createCliDistributionURl("tar.gz")).thenReturn(expectedUrl);
		Mockito.when(metadataProvider.get()).thenReturn(metadata);
		String url = controller.springTgz();
		Assertions.assertEquals("redirect:" + expectedUrl, url);
	}

	@Test
	@Tag("invalid")
	public void verifyExceptionOnNullMetadataProvider() {
		Mockito.when(metadataProvider.get()).thenReturn(null);
		Assertions.assertThrows(RuntimeException.class, () -> {
			controller.springTgz();
		});
	}

	@Test
	@Tag("invalid")
	public void verifyExceptionOnInvalidDistributionUrl() {
		String invalidUrl = "not a valid url";
		InitializrMetadata metadata = Mockito.mock(InitializrMetadata.class);
		Mockito.when(metadata.createCliDistributionURl("tar.gz")).thenReturn(invalidUrl);
		Mockito.when(metadataProvider.get()).thenReturn(metadata);
		Assertions.assertThrows(MalformedURLException.class, () -> {
			controller.springTgz();
		});
	}

}