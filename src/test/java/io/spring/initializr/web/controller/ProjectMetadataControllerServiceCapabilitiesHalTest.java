/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=serviceCapabilitiesHal_e1be8cb43c
ROOST_METHOD_SIG_HASH=serviceCapabilitiesHal_e1be8cb43c

"""
Scenario 1: Test to verify serviceCapabilitiesHal method returns an expected response entity

Details:
  TestName: verifyServiceCapabilitiesHalProducesCorrectResponseEntity
  Description: This test is designed to check if the serviceCapabilitiesHal method produces the correct response entity. The primary purpose of this method is to create a response entity for a GET request to either "/" or "/metadata/client".

Execution:
  Arrange: Mock the serviceCapabilitiesFor method to return an expected Response Entity with a body of expectedString and HAL_JSON_CONTENT_TYPE.
  Act: Call the serviceCapabilitiesHal function.
  Assert: Assert that the returned response entity matches the expected response entity.

Validation:
  This assertion verifies that the serviceCapabilitiesHal method produces the expected response entity with the correct media type and body. This test ensures that serviceCapabilitiesHal method correctly invokes the serviceCapabilitiesFor function and returns the output as is.

Scenario 2: Test to verify serviceCapabilitiesHal method handles exception thrown by serviceCapabilitiesFor

Details:
  TestName: verifyServiceCapabilitiesHalHandlesException
  Description: This test is designed to check if serviceCapabilitiesHal method correctly handles the exception thrown by the serviceCapabilitiesFor method and returns the appropriate ResponseEntity with the error message.

Execution:
  Arrange: Mock the serviceCapabilitiesFor method to throw an InvalidInitializrMetadataException.
  Act: Call the serviceCapabilitiesHal function.
  Assert: Assert that the returned Response Entity has an error status code and contains the error message from the thrown exception.

Validation:
  This assertion verifies that the serviceCapabilitiesHal method handles any exception thrown by the serviceCapabilitiesFor correctly, ensuring a reliable ResponseEntity is returned even in error cases.

Scenario 3: Test to verify that serviceCapabilitiesHal method uses V2_1 metadata version and HAL_JSON_CONTENT_TYPE while calling serviceCapabilitiesFor

Details:
  TestName: verifyServiceCapabilitiesHalUsesCorrectParametersForServiceCapabilitiesFor
  Description: This test is designed to check if the serviceCapabilitiesHal method calls the serviceCapabilitiesFor method using the correct InitializrMetadataVersion and MediaType.

Execution:
  Arrange: Set up a mock for serviceCapabilitiesFor method that captures its input.
  Act: Call the serviceCapabilitiesHal method.
  Assert: Assert that the captured inputs for the serviceCapabilitiesFor method are InitializrMetadataVersion.V2_1 and MediaType:HAL_JSON_CONTENT_TYPE.

Validation:
  This test verifies that serviceCapabilitiesHal method is utilizing the correct parameters for invoking the serviceCapabilitiesFor method. It ensures that the correct version of meta-data and content type are used when generating capabilities.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.controller;

import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.metadata.DependencyMetadataProvider;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InitializrMetadataVersion;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpStatus;
import io.spring.initializr.web.project.InvalidProjectRequestException;
import io.spring.initializr.metadata.InvalidInitializrMetadataException;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import org.mockito.Mockito;
import org.springframework.http.CacheControl;
import org.junit.jupiter.api.*;
import java.io.IOException;
import io.spring.initializr.generator.version.Version;
import io.spring.initializr.metadata.DependencyMetadata;
import io.spring.initializr.metadata.InitializrConfiguration.Platform;
import io.spring.initializr.web.mapper.DependencyMetadataJsonMapper;
import io.spring.initializr.web.mapper.DependencyMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataJsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV22JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV2JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataVersion;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

public class ProjectMetadataControllerServiceCapabilitiesHalTest {

	private ProjectMetadataController controller;

	private InitializrMetadataProvider initializrMetadataProvider;

	private DependencyMetadataProvider dependencyMetadataProvider;

	@BeforeEach
	public void setup() {
		initializrMetadataProvider = mock(InitializrMetadataProvider.class);
		dependencyMetadataProvider = mock(DependencyMetadataProvider.class);
		controller = new ProjectMetadataController(initializrMetadataProvider, dependencyMetadataProvider);
	}

	@Test
	@Tag("valid")
	public void verifyServiceCapabilitiesHalProducesCorrectResponseEntity() {
		// arrange
		ResponseEntity<String> expectedResponse = ResponseEntity.ok()
			.cacheControl(CacheControl.maxAge(2, TimeUnit.HOURS))
			.contentType(InitializrMetadataVersion.V2_1.getMediaType())
			.body("expectedString");
		when(initializrMetadataProvider.get()).thenReturn(new InitializrMetadata());
		when(controller.serviceCapabilitiesFor(any(), any())).thenReturn(expectedResponse);
		// act
		ResponseEntity<String> actualResponse = controller.serviceCapabilitiesHal();
		// assert
		assertEquals(expectedResponse, actualResponse);
	}

	@Test
	@Tag("invalid")
	public void verifyServiceCapabilitiesHalHandlesException() {
		// arrange
		String errorMessage = "Error: Invalid Metadata";
		InvalidInitializrMetadataException exception = new InvalidInitializrMetadataException(errorMessage);
		when(controller.serviceCapabilitiesFor(any(), any())).thenThrow(exception);
		// act and assert
		InvalidProjectRequestException ex = assertThrows(InvalidProjectRequestException.class,
				() -> controller.serviceCapabilitiesHal());
		assertEquals(errorMessage, ex.getMessage());
	}

	@Test
	@Tag("valid")
	public void verifyServiceCapabilitiesHalUsesCorrectParametersForServiceCapabilitiesFor() {
		// arrange
		MediaType mediaType = InitializrMetadataVersion.V2_1.getMediaType();
		when(controller.serviceCapabilitiesFor(InitializrMetadataVersion.V2_1, mediaType))
			.thenReturn(Mockito.mock(ResponseEntity.class));
		// act
		controller.serviceCapabilitiesHal();
		// assert
		verify(controller, times(1)).serviceCapabilitiesFor(InitializrMetadataVersion.V2_1, mediaType);
	}

}