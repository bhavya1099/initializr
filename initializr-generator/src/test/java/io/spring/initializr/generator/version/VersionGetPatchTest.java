/*
 * Copyright 2012-2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getPatch_ebf92cb367
ROOST_METHOD_SIG_HASH=getPatch_bcc0bee242

Scenario 1: Validate if getPatch method returns the correct patch version when called

Details:
  - TestName: validateCorrectPatchVersionReturned
  - Description: This test is meant to validate if the getPatch method is returning the correct value as the patch version. We will use a mock Version object and set a specific patch version to it. The getPatch method should return this specific value as the output.

Execution:
  - Arrange: Create a mock Version object. Set the value of the patch version to a specific integer, say, 2.
  - Act: Call the getPatch() method on the mock Version object.
  - Assert: Assert that the returned value is equal to the specific integer that was set as the patch version.

Validation:
  - The assertion will verify that the getPatch method correctly returns the patch version stored in the Version object. The expected result is the specific integer we set as the patch version since this is what we defined to be the patch version in our mock object. This test is significant in verifying that the getPatch method works correctly and returns the right patch version.

Scenario 2: Validate if getPatch method returns null when patch version is not set

Details:
  - TestName: validateNullPatchVersionReturnedIfNotSet
  - Description: This test is intended to validate if the getPatch method returns null when the patch has not been set. We will use a mock Version object without setting a patch version, and the getPatch method should return null as the output.

Execution:
  - Arrange: Create a mock Version object without setting any patch version.
  - Act: Invoke the getPatch method of the mock Version object.
  - Assert: Assert that the returned value is null.

Validation:
  - The assertion verifies that if the patch version is not set in the Version object, the getPatch method returns null. The expected outcome is null since we did not set a patch version for the Version object. This scenario is important to validate the getPatch method's result when the patch hasn't been set, enhancing the overall robustness of the tests.,
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.function.Function;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;

public class VersionGetPatchTest {

	@Test
	@Tag("valid")
	public void validateCorrectPatchVersionReturned() {
		// Arrange
		Version.Qualifier qualifier = new Version.Qualifier("SNAPSHOT", 2, "-");
		Version version = new Version(1, 2, 2, qualifier);
		// Act
		Integer patch = version.getPatch();
		// Assert
		assertEquals(2, patch);
	}

	@Test
	@Tag("invalid")
	public void validateNullPatchVersionReturnedIfNotSet() {
		// Arrange
		Version.Qualifier qualifier = new Version.Qualifier("SNAPSHOT", null, "-");
		Version version = new Version(1, 2, null, qualifier);
		// Act
		Integer patch = version.getPatch();
		// Assert
		assertNull(patch);
	}

}