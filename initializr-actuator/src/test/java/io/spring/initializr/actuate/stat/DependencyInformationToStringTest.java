/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=toString_ff78d83807
ROOST_METHOD_SIG_HASH=toString_bbffdadaa2

Scenario 1: DependencyInformation toString with all fields filled
  Details:
    TestName: testToStringWithAllFieldsFilled
    Description: The purpose of this test is to confirm that the toString method of DependencyInformation class is generating the output correctly when all its fields are filled with values.
  Execution:
    Arrange: Create a DependencyInformation object and fill it with id, values, and count.
    Act: Call toString method of the DependencyInformation object to get the string representation.
    Assert: Compare the returned string against the expected output.
  Validation:
    This assertion verifies that the toString method correctly concatenates and formats all of the DependencyInformation object fields when they're populated. This is important for data readability and logging purposes.

Scenario 2: DependencyInformation toString with empty values list
  Details:
    TestName: testToStringWithEmptyValues
    Description: The aim of this test is to check if the toString method of DependencyInformation class is handling the case of empty values list correctly.
  Execution:
    Arrange: Create a DependencyInformation object with id, empty values list and count.
    Act: Call toString method of the DependencyInformation object to get the string representation.
    Assert: Compare the returned string against the expected output.
  Validation:
    The assertion ensures that the toString method can handle the case where the values list is empty and still generates the correct string representation. This scenario might occur in cases when no dependencies are specified.

Scenario 3: DependencyInformation toString with null fields
  Details:
    TestName: testToStringWithNullFields
    Description: This test checks if the toString method of DependencyInformation class can handle null fields.
  Execution:
    Arrange: Create a DependencyInformation object with its fields set to null.
    Act: Call toString method of the DependencyInformation object to get its string representation.
    Assert: Compare the returned string against the expected output.
  Validation:
    The assertion checks if the toString method correctly handles null fields, which is important for preventing null pointer exceptions. This scenario is applicable in case a DependencyInformation object is created without initializing its fields.
,
*/

// ********RoostGPT********

package io.spring.initializr.actuate.stat;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.junit.jupiter.api.*;
import java.util.ArrayList;
import java.util.StringJoiner;
import io.spring.initializr.generator.version.Version;
import io.spring.initializr.web.support.Agent;
import org.springframework.util.ObjectUtils;
import org.springframework.util.StringUtils;

public class DependencyInformationToStringTest {

	@Test
	@Tag("valid")
	public void testToStringWithAllFieldsFilled() {
		List<String> values = Arrays.asList("spring-boot-starter-web", "spring-boot-starter-data-jpa");
		ProjectRequestDocument.DependencyInformation dependency = new ProjectRequestDocument.DependencyInformation(
				values);
		String expectedString = "{id='spring-boot-starter-data-jpa spring-boot-starter-web', values=[spring-boot-starter-web, spring-boot-starter-data-jpa], count=2}";
		assertEquals(expectedString, dependency.toString());
	}

	@Test
	@Tag("valid")
	public void testToStringWithEmptyValues() {
		List<String> values = Collections.emptyList();
		ProjectRequestDocument.DependencyInformation dependency = new ProjectRequestDocument.DependencyInformation(
				values);
		String expectedString = "{id='_none', values=[], count=0}";
		assertEquals(expectedString, dependency.toString());
	}

	@Test
	@Tag("valid")
	public void testToStringWithNullFields() {
		ProjectRequestDocument.DependencyInformation dependency = new ProjectRequestDocument.DependencyInformation(
				null);
		String expectedString = "{id='_none', values=null, count=0}";
		assertEquals(expectedString, dependency.toString());
	}

}