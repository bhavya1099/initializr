/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=remove_e3e4d4c036
ROOST_METHOD_SIG_HASH=remove_bccc24c2d5

"""
Scenario 1: Remove an existing service from the ComposeServiceContainer

Test Name: testRemovalOfExistingService
Description: This test ensures the remove() efficiently discards a service that currently exists within the services map.
Execution:
    Arrange: Include a service with a defined name to the services map.
    Act: Pass the service name to the remove() method.
    Assert: Assure that remove() returns true, implying that service was successfully deleted.
Validation:
    The removal of an existing service should return true, showing that the service has been successfully removed. This test validates the efficiency of the remove() method when a valid service name is provided.

Scenario 2: Attempt to remove a non-existing service from the ComposeServiceContainer

Test Name: testRemovalOfNonExistingService
Description: This test ensures that remove() appropriately handles cases where a service is not present in the services map.
Execution:
    Arrange: Ensure the services map is either empty or does not contain a service with the defined name.
    Act: Pass the service name to the remove() method.
    Assert: Check that remove() returns false, showing the service was not identified and hence not discarded.
Validation:
    If a service is not found within the services map, the remove() method should return false. This test validates the method's ability to handle inappropriate input and return accurate feedback on the action's outcome.

Scenario 3: Remove from an empty ComposeServiceContainer

Test Name: testRemovalFromEmptyContainer
Description: The test guarantees that invoking the remove() method on an empty container does not compromise the application's performance.
Execution:
    Arrange: Ensure the services map is empty.
    Act: Pass a service name to the remove() method.
    Assert: Confirm that remove() returns false, showing that no service was found and hence none was removed.
Validation:
    Attempting to remove a service from an empty services map should return false. This test validates the resilience of the remove() method when faced with edge cases where the services map is empty.

""".
*/

// ********RoostGPT********

package io.spring.initializr.generator.container.docker.compose;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.mockito.Mockito;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.Consumer;
import java.util.stream.Stream;
import io.spring.initializr.generator.container.docker.compose.ComposeService.Builder;

public class ComposeServiceContainerRemoveTest {

	private ComposeServiceContainer container;

	private Builder builder;

	@BeforeEach
	public void setup() {
		container = new ComposeServiceContainer();
		builder = Mockito.mock(Builder.class);
	}

	@Test
	@Tag("valid")
	public void testRemovalOfExistingService() {
		String serviceName = "testService";
		container.add(serviceName, builder);
		assertTrue(container.remove(serviceName));
	}

	@Test
	@Tag("invalid")
	public void testRemovalOfNonExistingService() {
		String nonexistentServiceName = "nonexistentService";
		assertFalse(container.remove(nonexistentServiceName));
	}

	@Test
	@Tag("boundary")
	public void testRemovalFromEmptyContainer() {
		assertFalse(container.remove("nonexistentService"));
	}

}