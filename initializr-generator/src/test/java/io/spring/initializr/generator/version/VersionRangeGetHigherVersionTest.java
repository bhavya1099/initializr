/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getHigherVersion_f3f488e8eb
ROOST_METHOD_SIG_HASH=getHigherVersion_0f6608619f

Scenario 1: Verify that getHigherVersion() retrieves the correct higher version set in range.

  Details:
    TestName: verifyHigherVersionRetrieval
    Description: This test is intended to verify if getHigherVersion() correctly retrieves the higher version set in VersionRange. An assertion is made to check the equivalence of the retrieved higher version and the pre-set higher version.
  Execution:
    Arrange: Create a new VersionRange with a specific higher version.
    Act: Call getHigherVersion() on the VersionRange object.
    Assert: Compare the return value of the getHigherVersion method to the value we previously set in the arrange step.
  Validation:
    The assertion checks for the equality of the returned version and the initially set higher version. This test validates the basic functionality of the getHigherVersion() method, ensuring it is fetching the correct higher version of a version range.

Scenario 2: Check if getHigherVersion() retrieves null when no higher version is set.

  Details:
    TestName: getHigherVersionWhenNoVersionSet
    Description: This test checks if getHigherVersion() returns null when no higher version is set in VersionRange. This is an edge case where the method should handle absence of a higher version gracefully.
  Execution:
    Arrange: Create a new VersionRange without setting a higher version.
    Act: Call getHigherVersion() on the VersionRange object.
    Assert: Check if the returned version is null.
  Validation:
    In this case, the assertion confirms that the returned version is null since no higher version is set in the VersionRange. If the application accurately handles this edge case, it can prevent unforeseen null pointer exceptions, ensuring stability of the code.

Scenario 3: Validate getHigherVersion() when multiple different higher versions have been set.

  Details:
    TestName: getHigherVersionWithMultipleDifferentVersions
    Description: This test is for validating the functionality of getHigherVersion() when multiple different higher versions have been set sequentially. It verifies if the method produces the most recent higher version from the VersionRange.
  Execution:
    Arrange: Create a VersionRange and set multiple different higher versions sequentially.
    Act: Call getHigherVersion() on the VersionRange object.
    Assert: Check if the returned version is equal to the last set higher version.
  Validation:
    The assertion verifies if the returned version is equal to the last set higher version. It validates whether the getHigherVersion() method accurately reflects changes in the higher version over time.
,
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import io.spring.initializr.generator.version.Version.Format;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import org.mockito.Mock;
import org.junit.jupiter.api.*;
import org.springframework.util.Assert;

public class VersionRangeGetHigherVersionTest {

	@Mock
	Version mockVersion;

	@Test
	@Tag("valid")
	public void verifyHigherVersionRetrieval() {
		VersionRange versionRange = new VersionRange(mockVersion, true, mockVersion, true);
		Assertions.assertEquals(mockVersion, versionRange.getHigherVersion());
	}

	@Test
	@Tag("boundary")
	public void getHigherVersionWhenNoVersionSet() {
		VersionRange versionRange = new VersionRange(mockVersion);
		Assertions.assertNull(versionRange.getHigherVersion());
	}

	@Test
	@Tag("valid")
	public void getHigherVersionWithMultipleDifferentVersions() {
		VersionRange versionRange = new VersionRange(mockVersion, true, mockVersion, true);
		Version newHigherVersion = mockVersion.format(Format.V1);
		versionRange = new VersionRange(mockVersion, true, newHigherVersion, true);
		Assertions.assertEquals(newHigherVersion, versionRange.getHigherVersion());
	}

}