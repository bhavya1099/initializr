/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=setGenerationTimestamp_3d7cd793ba
ROOST_METHOD_SIG_HASH=setGenerationTimestamp_dfde373610

"""
  Scenario 1: Verify that the method is setting the 'generationTimestamp' correctly

  Details:
    TestName: testSetGenerationTimestamp.
    Description: This test verifies that the method 'setGenerationTimestamp' correctly sets the value of 'generationTimestamp' field of the class 'ProjectRequestDocument'.
  Execution:
    Arrange: Instantiate a 'ProjectRequestDocument' object and any long input variable 'timeStamp'.
    Act: Invoke 'setGenerationTimestamp' method on the object, passing 'timeStamp' as parameter.
    Assert: Use 'getGenerationTimestamp' method of 'ProjectRequestDocument' class to assert that the generationTimestamp has been set to 'timeStamp'.
  Validation:
    It aims to verify that 'generationTimestamp' field has been set to 'timeStamp'. The expected result is 'timeStamp', as it is the one passed to setGenerationTimestamp.
    The test is significant to ensure the proper functionality of 'setGenerationTimestamp' method. If the test fails, it means that 'setGenerationTimestamp' method doesn't function as expected.

  Scenario 2: Check if invalid negative long value for the 'generationTimestamp' causes any issue.

  Details:
    TestName: testSetGenerationTimestampWithNegativeValue.
    Description: This test checks if the method handles setting of 'generationTimestamp' to a negative long values, which are not valid for timestamps.
  Execution:
    Arrange: Instantiate a 'ProjectRequestDocument' object and a negative long input variable 'invalidTimestamp'.
    Act: Invoke 'setGenerationTimestamp' method on the object, passing 'invalidTimestamp' as parameter.
    Assert: Use 'getGenerationTimestamp' method to assert that the 'generationTimestamp' has been set.
  Validation:
    The aim is to validate that the setGenerationTimestamp method doesn't restrict negative values.
    Though it's logically invalid to have negative timestamp, but it showcases the limitation of this method, not validating the input it receives.

  Scenario 3: Check if the maximum long value for the 'generationTimestamp' is utilized properly.

  Details:
    TestName: testSetGenerationTimestampWithMaxLongValue.
    Description: Test to check if the maximum long value is set correctly for the field 'generationTimestamp'.
  Execution:
    Arrange: Instantiate a 'ProjectRequestDocument' object and the maximum long input variable 'maxTimestamp'.
    Act: Invoke 'setGenerationTimestamp' method on the object, passing 'maxTimestamp' as parameter.
    Assert: Use 'getGenerationTimestamp' method of the class to assert that the 'generationTimestamp' has been set to 'maxTimestamp'.
  Validation:
    Assertion aims to verify that 'generationTimestamp' field has been set to 'maxTimestamp'.
    This test is important to verify that 'setGenerationTimestamp' can handle and set the maximum long value, hence ensuring no possible overflow.
"""
,
*/

// ********RoostGPT********

package io.spring.initializr.actuate.stat;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.StringJoiner;
import io.spring.initializr.generator.version.Version;
import io.spring.initializr.web.support.Agent;
import org.springframework.util.ObjectUtils;
import org.springframework.util.StringUtils;

public class ProjectRequestDocumentSetGenerationTimestampTest {

	private ProjectRequestDocument projectRequestDocument;

	@BeforeEach
	public void setup() {
		projectRequestDocument = new ProjectRequestDocument();
	}

	@Test
	@Tag("valid")
	public void testSetGenerationTimestamp() {
		// Arrange
		long timeStamp = System.currentTimeMillis();
		// Act
		projectRequestDocument.setGenerationTimestamp(timeStamp);
		// Assert
		assertEquals(timeStamp, projectRequestDocument.getGenerationTimestamp(),
				"The generationTimestamp should be set correctly");
	}

	@Test
	@Tag("invalid")
	public void testSetGenerationTimestampWithNegativeValue() {
		// Arrange
		long invalidTimestamp = -100L;
		// Act
		projectRequestDocument.setGenerationTimestamp(invalidTimestamp);
		// Assert
		assertEquals(invalidTimestamp, projectRequestDocument.getGenerationTimestamp(),
				"Negative generationTimestamp should be accepted but it is logically invalid");
	}

	@Test
	@Tag("boundary")
	public void testSetGenerationTimestampWithMaxLongValue() {
		// Arrange
		long maxTimestamp = Long.MAX_VALUE;
		// Act
		projectRequestDocument.setGenerationTimestamp(maxTimestamp);
		// Assert
		assertEquals(maxTimestamp, projectRequestDocument.getGenerationTimestamp(),
				"Maximum long value should be handled correctly as generationTimestamp");
	}

}