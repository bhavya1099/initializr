/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=ofProperty_1819a5588e
ROOST_METHOD_SIG_HASH=ofProperty_4e80268a07

"""
Scenario 1: Check the successful creation of VersionReference object
TestName: testVersionReferenceObjectCreationWithOfPropertyMethod
Description: This test will validate the successful creation of a VersionReference object using the "ofProperty" method with valid VersionProperty parameter.
Execution:
  Arrange: Create a VersionProperty object with valid internalProperty value.
  Act: Invoke the ofProperty method with created VersionProperty object as parameter.
  Assert: Verify that the returned VersionReference object is not null, also check if the VersionProperty in the returned object is same as the one used for its creation.
Validation:
  If the VersionReference object is created successfully and contains correct VersionProperty, it confirms that "ofProperty" method is working as expected with valid inputs.

Scenario 2: Check Null Test Scenario
TestName: testNullWithOfPropertyMethod
Description: This test is to check the "ofProperty" method behavior when null is passed as parameter.
Execution:
  Arrange: Prepare a null VersionProperty object.
  Act: Call the "ofProperty" method with null VersionProperty.
  Assert: Confirm that the returned VersionReference object is not null but it's VersionProperty is null.
Validation:
  The test result will validate the "ofProperty" method's ability to handle null inputs without failure.

Scenario 3: Validate the value of VersionReference object when created with ofProperty method.
TestName: testValueOfVersionReferenceWithOfPropertyMethod
Description: This test scenario checks if the value of the VersionReference object is expected to be null when created with ofProperty method.
Execution:
  Arrange: Initialize a valid VersionProperty object
  Act: Call the "ofProperty" method with prepared VersionProperty object to create VersionReference.
  Assert: Confirm that the value of the returned VersionReference object is null.
Validation:
  The test will validate that the value of the VersionReference object is null when it is created using "ofProperty" method as the method is supposed to insert null as the value into the created object.

Scenario 4: Test the equality of VersionReference objects created by ofProperty method.
TestName: testEqualityOfVersionReferenceWithOfPropertyMethod
Description: This test will validate the equals() method of VersionReference class and check if VersionReference objects created with same VersionProperty by "ofProperty" method are considered equal.
Execution:
  Arrange: Create two VersionReference objects using same VersionProperty via "ofProperty" method.
  Act: No action needed.
  Assert: Validate that both VersionReference objects are equal using equals() method of VersionReference. Also validate that the hashCode of both objects are equal.
Validation:
  This test will confirm that the equals() and hashCode() methods of VersionReference work as expected when the object is created by "ofProperty" method.

Scenario 5: Ensure toString method with object created with ofProperty method.
TestName: testToStringWithOfPropertyMethod
Description: This test case will validate the toString method of VersionReference class when the object is created by the "ofProperty" method.
Execution:
  Arrange: Create a VersionReference object from a known VersionProperty via "ofProperty" method.
  Act: No action is needed.
  Assert: Validate if the returned string is in the expected format.
Validation:
  This test will validate the expected format returned by the toString method of VersionReference class when Created by ofProperty method.
"""

*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.util.Objects;

public class VersionReferenceOfPropertyTest {

	@Test
	@Tag("valid")
	public void testVersionReferenceObjectCreationWithOfPropertyMethod() {
		// Arrange
		VersionProperty versionProperty = VersionProperty.of("property");

		// Act
		VersionReference versionReference = VersionReference.ofProperty(versionProperty);
		// Assert
		assertNotNull(versionReference);
		assertEquals(versionProperty, versionReference.getProperty());
	}

	@Test
	@Tag("invalid")
	public void testNullWithOfPropertyMethod() {
		// Arrange
		VersionProperty versionProperty = null;
		// Act
		VersionReference versionReference = VersionReference.ofProperty(versionProperty);
		// Assert
		assertNotNull(versionReference);
		assertNull(versionReference.getProperty());
	}

	@Test
	@Tag("valid")
	public void testValueOfVersionReferenceWithOfPropertyMethod() {
		// Arrange
		VersionProperty versionProperty = VersionProperty.of("property");
		// Act
		VersionReference versionReference = VersionReference.ofProperty(versionProperty);
		// Assert
		assertNull(versionReference.getValue());
	}

	@Test
	@Tag("valid")
	public void testEqualityOfVersionReferenceWithOfPropertyMethod() {
		// Arrange
		VersionProperty versionProperty = VersionProperty.of("property");
		VersionReference versionReferenceA = VersionReference.ofProperty(versionProperty);
		VersionReference versionReferenceB = VersionReference.ofProperty(versionProperty);
		// Assert
		assertEquals(versionReferenceA, versionReferenceB);
		assertEquals(versionReferenceA.hashCode(), versionReferenceB.hashCode());
	}

	@Test
	@Tag("valid")
	public void testToStringWithOfPropertyMethod() {
		// Arrange
		VersionProperty versionProperty = VersionProperty.of("property");
		VersionReference versionReference = VersionReference.ofProperty(versionProperty);
		// Assert
		String expectedString = "${" + versionProperty.toStandardFormat() + "}";
		assertEquals(expectedString, versionReference.toString());
	}

}