/*
 * Copyright 2012-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getProjectAssetGenerator_2b7eb3a312
ROOST_METHOD_SIG_HASH=getProjectAssetGenerator_4d07575527

"""
Scenario 1: Validate the method getProjectAssetGenerator's returning object type.
Details:
  TestName: validateGetProjectAssetGeneratorReturnType
  Description: The test is meant to verify that the method getProjectAssetGenerator returns an object of type ProjectAssetGenerator<Path>.
Execution:
  Arrange: No setup is required as we are directly calling the method which returns the instance variable projectAssetGenerator.
  Act: Invoke the getProjectAssetGenerator method by passing a ProjectDescription instance.
  Assert: Check if the returned object is an instance of ProjectAssetGenerator<Path>.
Validation:
  This assertion aims to ensure that the getProjectAssetGenerator method is accurately returning an object of type ProjectAssetGenerator<Path>.

Scenario 2: Check if getProjectAssetGenerator returns the same object for multiple calls.
Details:
  TestName: validateGetProjectAssetGeneratorReturnObjectConsistency
  Description: This test is to validate the consistency of the return object of the getProjectAssetGenerator method when called multiple times.
Execution:
  Arrange: No setup is needed as getProjectAssetGenerator method provides the same result irrespective of the input.
  Act: Call the getProjectAssetGenerator method twice with the same input and store the results in two separate variables.
  Assert: The test should assert that both returned values are similar.
Validation:
  This assertion helps to ensure that the getProjectAssetGenerator object is not recreated with each method call, ensuring the consistency of the Class's behavior

Scenario 3: Validate null handling of the getProjectAssetGenerator method.
Details:
  TestName: validateGetProjectAssetGeneratorNullHandling
  Description: The test validates that the getProjectAssetGenerator method can handle null as a parameter.
Execution:
  Arrange: No setup required as the getProjectAssetGenerator does not depend on the parameter passed.
  Act: Invoke getProjectAssetGenerator with null as an input.
  Assert: Assert that no NullPointerException is thrown by the method.
Validation:
  The validation ensures that the method handles null values gracefully, thus ensuring the robustness of the class.

Scenario 4: Validate getProjectAssetGenerator with different ProjectDescription instances.
Details:
  TestName: validateProjectDescriptionInstancesEqualToProjectAssetGeneratorInstances
  Description: The test is meant to check whether different instances of ProjectDescription passed to getProjectAssetGenerator change the returned ProjectAssetGenerator instance.
Execution:
  Arrange: Create two instances of ProjectDescription with different properties.
  Act: Call getProjectAssetGenerator with these two ProjectDescription instances separately.
  Assert: Check that the returned ProjectAssetGenerator instances are equal.
Validation:
  This assertion aims to verify that getProjectAssetGenerator doesn't depend on the ProjectDescription instance passed to it and always returns the same ProjectAssetGenerator instance.
  """
*/

// ********RoostGPT********

package io.spring.initializr.web.project;

import io.spring.initializr.generator.project.ProjectAssetGenerator;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.junit.jupiter.api.*;
import java.io.IOException;
import java.io.StringWriter;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import io.spring.initializr.generator.buildsystem.BuildItemResolver;
import io.spring.initializr.generator.buildsystem.BuildWriter;
import io.spring.initializr.generator.project.DefaultProjectAssetGenerator;
import io.spring.initializr.generator.project.ProjectDescription;
import io.spring.initializr.generator.project.ProjectGenerationContext;
import io.spring.initializr.generator.project.ProjectGenerationException;
import io.spring.initializr.generator.project.ProjectGenerator;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.metadata.support.MetadataBuildItemResolver;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.util.FileSystemUtils;

@ExtendWith(MockitoExtension.class)
public class ProjectGenerationInvokerGetProjectAssetGeneratorTest {

	@Mock
	private ProjectAssetGenerator<Path> projectAssetGenerator;

	@Test
	@Tag("valid")
	public void validateGetProjectAssetGeneratorReturnType() {
		ProjectGenerationInvoker invoker = new ProjectGenerationInvoker(null);
		ProjectDescription projectDescription = new ProjectDescription();
		ProjectAssetGenerator<Path> assetGenerator = invoker.getProjectAssetGenerator(projectDescription);
		Assertions.assertTrue(assetGenerator instanceof ProjectAssetGenerator);
	}

	@Test
	@Tag("valid")
	public void validateGetProjectAssetGeneratorReturnObjectConsistency() {
		ProjectGenerationInvoker invoker = new ProjectGenerationInvoker(null);
		ProjectDescription projectDescription = new ProjectDescription();
		ProjectAssetGenerator<Path> assetGenerator1 = invoker.getProjectAssetGenerator(projectDescription);
		ProjectAssetGenerator<Path> assetGenerator2 = invoker.getProjectAssetGenerator(projectDescription);
		Assertions.assertEquals(assetGenerator1, assetGenerator2);
	}

	@Test
	@Tag("valid")
	public void validateGetProjectAssetGeneratorNullHandling() {
		ProjectGenerationInvoker invoker = new ProjectGenerationInvoker(null);
		Assertions.assertDoesNotThrow(() -> {
			invoker.getProjectAssetGenerator(null);
		});
	}

	@Test
	@Tag("valid")
	public void validateProjectDescriptionInstancesEqualToProjectAssetGeneratorInstances() {
		ProjectGenerationInvoker invoker = new ProjectGenerationInvoker(null);
		ProjectDescription projectDescription1 = new ProjectDescription();
		ProjectDescription projectDescription2 = new ProjectDescription();
		ProjectAssetGenerator<Path> assetGenerator1 = invoker.getProjectAssetGenerator(projectDescription1);
		ProjectAssetGenerator<Path> assetGenerator2 = invoker.getProjectAssetGenerator(projectDescription2);
		Assertions.assertEquals(assetGenerator1, assetGenerator2);
	}

}