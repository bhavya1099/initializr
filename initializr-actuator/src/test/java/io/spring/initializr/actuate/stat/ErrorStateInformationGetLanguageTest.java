/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getLanguage_5ed7eda9c0
ROOST_METHOD_SIG_HASH=getLanguage_4711738e48

"""
Scenario 1: Test to check if 'getLanguage' returns correct language value

Details:
  TestName: shouldReturnCorrectLanguageValue
  Description: This test checks if the getLanguage method returns the correct language value that is previously set using setLanguage method.
Execution:
  Arrange: Create an instance of class ErrorStateInformation. Set a language value via setLanguage method.
  Act: Call getLanguage() method.
  Assert: Validate whether the return value matches the set language value.
Validation:
  This test verifies whether getLanguage method is functioning correctly by returning the correct set language value. The expected result in this case would be the same language value that was set earlier. The test's significance lies in asserting the proper functioning of the getLanguage method, ensuring accurate retrieval of the language state for the project.

Scenario 2: Test to check the default behavior of 'getLanguage' method before setting a language value

Details:
  TestName: shouldReturnNullIfLanguageNotSet
  Description: This test validates the default behavior of getLanguage method. It should return null if no language value has been set.
Execution:
  Arrange: Create an instance of class ErrorStateInformation. Do not set a language value.
  Act: Call getLanguage() method.
  Assert: Expect a null value to be returned.
Validation:
  This test ensures that the getLanguage method correctly handles the scenario where no language has been set. In this case, we expect it to return null, indicating that no language value has been set. This test is significant as it asserts the method's correct default behavior, helping avoid potential NullPointerExceptions in the application.

Scenario 3: Test to check if 'getLanguage' method reflects changes when language value is updated

Details:
  TestName: shouldReflectLanguageUpdates
  Description: This test checks if the getLanguage method reflects changes when the language value is updated.
Execution:
  Arrange: Create an instance of class ErrorStateInformation. Set a language value via setLanguage method. Update the language value via setLanguage method.
  Act: Call getLanguage() method.
  Assert: Validate whether the return value matches the updated language value.
Validation:
  This validates that the getLanguage method correctly reflects updates made to the language value. This test's significance lies in ensuring that language value changes are accurately tracked and returned by the method.
""",
*/

// ********RoostGPT********

package io.spring.initializr.actuate.stat;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.StringJoiner;
import io.spring.initializr.generator.version.Version;
import io.spring.initializr.web.support.Agent;
import org.springframework.util.ObjectUtils;
import org.springframework.util.StringUtils;

class ErrorStateInformationGetLanguageTest {

	@Test
	@Tag("valid")
	void shouldReturnCorrectLanguageValue() {
		// Arrange
		ProjectRequestDocument.ErrorStateInformation errorStateInfo = new ProjectRequestDocument().new ErrorStateInformation();
		Boolean expectedLanguageValue = Boolean.TRUE;
		errorStateInfo.setLanguage(expectedLanguageValue);
		// Act
		Boolean actualLanguageValue = errorStateInfo.getLanguage();
		// Assert
		assertEquals(expectedLanguageValue, actualLanguageValue, "getLanguage should return correct language value");
	}

	@Test
	@Tag("boundary")
	void shouldReturnNullIfLanguageNotSet() {
		// Arrange
		ProjectRequestDocument.ErrorStateInformation errorStateInfo = new ProjectRequestDocument().new ErrorStateInformation();
		// Act
		Boolean actualLanguageValue = errorStateInfo.getLanguage();
		// Assert
		assertNull(actualLanguageValue, "getLanguage should return null if language is not set");
	}

	@Test
	@Tag("valid")
	void shouldReflectLanguageUpdates() {
		// Arrange
		ProjectRequestDocument.ErrorStateInformation errorStateInfo = new ProjectRequestDocument().new ErrorStateInformation();
		errorStateInfo.setLanguage(Boolean.TRUE);
		Boolean updatedLanguageValue = Boolean.FALSE;
		errorStateInfo.setLanguage(updatedLanguageValue);
		// Act
		Boolean actualLanguageValue = errorStateInfo.getLanguage();
		// Assert
		assertEquals(updatedLanguageValue, actualLanguageValue, "getLanguage should reflect updates in language value");
	}

}