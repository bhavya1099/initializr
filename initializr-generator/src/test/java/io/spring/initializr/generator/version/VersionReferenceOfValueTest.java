/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=ofValue_ffe1414efc
ROOST_METHOD_SIG_HASH=ofValue_0eeeb07dd6

"""
  Scenario 1: Test when the input is a valid string

  Details:
    TestName: testOfValueWithValidString
    Description: This tests the scenario when a valid string is used as input for the ofValue() method.

  Execution:
    Arrange: Create a valid string for testing.
    Act: Invoke the ofValue() method with the created string.
    Assert: Assert that the returned VersionReference object is not null, and the value field is equal to the test string.

  Validation:
    This test validates that the ofValue() method accepts valid strings and returns correct VersionReference objects. It asserts the implementation of the method in successfully creating a new VersionReference object with value field as the input string.

  Scenario 2: Test when the input is null

  Details:
    TestName: testOfValueWithNull
    Description: This tests the scenario when null is used as input for the ofValue() method.

  Execution:
    Arrange: No setup is required for this.
    Act: Invoke the ofValue() method with null as input.
    Assert: Assert that the returned VersionReference object is not null, and the value field is null.

  Validation:
    This test validates that the ofValue() method accepts null as input and returns correct VersionReference objects. It asserts the implementation of the method in successfully creating a new VersionReference object with null value field.

  Scenario 3: Test when the input is an empty string

  Details:
    TestName: testOfValueWithEmptyString
    Description: This tests the scenario when an empty string is given as input for the ofValue() method.

  Execution:
    Arrange: Create an empty string for testing.
    Act: Invoke the ofValue() method with the empty string.
    Assert: Assert that the returned VersionReference object is not null, and the value field is an empty string.

  Validation:
    This test validates that the ofValue() method accepts empty strings as input and returns correct VersionReference objects. It asserts the implementation of the method in successfully creating a new VersionReference object with empty value field.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.experimental.categories.Category;
import org.mockito.Mockito;
import io.spring.initializr.generator.version.VersionReference;
import io.spring.initializr.generator.version.VersionProperty;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.util.Objects;

public class VersionReferenceOfValueTest {

	private String validTestString;

	private String emptyTestString;

	private VersionReference versionReferenceObject;

	@BeforeEach
	public void setUp() {
		validTestString = "validString";
		emptyTestString = "";
		versionReferenceObject = null;
	}

	@Test
	@Category(Categories.valid.class)
	public void testOfValueWithValidString() {
		versionReferenceObject = VersionReference.ofValue(validTestString);
		assertNotNull(versionReferenceObject, "VersionReference Object should not be null");
		assertEquals(validTestString, versionReferenceObject.getValue());
	}

	@Test
	@Category(Categories.valid.class)
	public void testOfValueWithNull() {
		versionReferenceObject = VersionReference.ofValue(null);
		assertNotNull(versionReferenceObject, "VersionReference Object should not be null");
		assertNull(versionReferenceObject.getValue());
	}

	@Test
	@Category(Categories.valid.class)
	public void testOfValueWithEmptyString() {
		versionReferenceObject = VersionReference.ofValue(emptyTestString);
		assertNotNull(versionReferenceObject, "VersionReference Object should not be null");
		assertEquals(emptyTestString, versionReferenceObject.getValue());
	}

}