/*
 * Copyright 2012-2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=writeTo_cf1e579445
ROOST_METHOD_SIG_HASH=writeTo_e486e6d0d9

"""
Scenario 1: Test Writing to an Indenting Writer with Non-Empty Compose File

Details:
  TestName: testWriteToWithNonEmptyComposeFile
  Description: This test aims to validate the writeTo method for non-empty ComposeFile instances. If the ComposeFile instance provided has one or more services, each service should be written correctly to the IndentingWriter.

Execution:
  Arrange: Mock a non-empty ComposeFile instance and an IndentingWriter.
  Act: Invoke the writeTo method with the mocked IndentingWriter and ComposeFile.
  Assert: Use JUnit assertions to check if the IndentingWriter received appropriate print method calls.

Validation:
  The assertion verifies that each service contained in the ComposeFile instance is written out correctly by the IndentingWriter, sorted by name. This test ensures that the application correctly writes each service in the compose file.

Scenario 2: Test Writing to an Indenting Writer with Empty Compose File

Details:
  TestName: testWriteToWithEmptyComposeFile
  Description: This test aims to validate the writeTo method for empty ComposeFile instances. If the ComposeFile instance provided has no services, no further method calls should be made to the IndentingWriter after printing "services:".

Execution:
  Arrange: Mock an empty ComposeFile instance and an IndentingWriter.
  Act: Invoke the writeTo method with the mocked IndentingWriter and ComposeFile.
  Assert: Use JUnit assertions to check if the IndentingWriter only received one print method call.

Validation:
  The assertion verifies that no unnecessary method calls are made when attempting to write an empty ComposeFile instance. This test ensures that the application handles empty ComposeFile instances correctly without attempting to access non-existent services.

Scenario 3: Test Writing to an Indenting Writer with a Null Compose File

Details:
  TestName: testWriteToWithNullComposeFile
  Description: This test aims to validate the writeTo method's handling of null ComposeFile instances. If a null ComposeFile instance is provided, the writeTo method should throw an appropriate exception.

Execution:
  Arrange: Mock an IndentingWriter.
  Act: Invoke the writeTo method with the mocked IndentingWriter and a null ComposeFile.
  Assert: Use JUnit assertions to check if a NullPointerException was thrown.

Validation:
  The assertion verifies that the writeTo method throws a NullPointerException when provided with a null ComposeFile instance. This test ensures that the application correctly handles null instances and prevents unintended null-related exceptions within the application.

Scenario 4: Test Writing to a Null Indenting Writer

Details:
  TestName: testWriteToWithNullIndentingWriter
  Description: This test aims to validate the writeTo method's handling of a null IndentingWriter. If a null IndentingWriter is provided, the writeTo method should throw an appropriate exception.

Execution:
  Arrange: Mock a ComposeFile.
  Act: Invoke the writeTo method with a null IndentingWriter and the mocked ComposeFile.
  Assert: Use JUnit assertions to check if a NullPointerException was thrown.

Validation:
  The assertion verifies that the writeTo method throws a NullPointerException when provided with a null IndentingWriter. This test ensures that the application correctly manages null IndentingWriter instances and prevents unintended null-related exceptions within the application.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.container.docker.compose;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.mockito.Mockito;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.*;
import java.util.Comparator;
import java.util.Map;
import java.util.Set;
import io.spring.initializr.generator.io.IndentingWriter;
import org.springframework.util.StringUtils;

public class ComposeFileWriterWriteToTest {

	private ComposeFileWriter composeFileWriter;

	private IndentingWriter writer;

	private ComposeFile compose;

	@BeforeEach
	void setup() {
		composeFileWriter = new ComposeFileWriter();
		writer = Mockito.mock(IndentingWriter.class);
		compose = Mockito.mock(ComposeFile.class);
	}

	@Test
	@Tag("valid")
	public void testWriteToWithNonEmptyComposeFile() {
		ComposeService service = Mockito.mock(ComposeService.class);
		Mockito.when(service.getName()).thenReturn("service_name");
		Mockito.when(compose.services()).thenReturn(Collections.singletonMap("service_key", service));
		composeFileWriter.writeTo(writer, compose);
		verify(writer, times(1)).println("services:");
		verify(writer, times(2)).println(Mockito.anyString());
	}

	@Test
	@Tag("valid")
	public void testWriteToWithEmptyComposeFile() {
		Mockito.when(compose.services()).thenReturn(Collections.emptyMap());
		composeFileWriter.writeTo(writer, compose);
		verify(writer, times(1)).println("services:");
		verify(writer, times(1)).println(Mockito.anyString());
	}

	@Test
	@Tag("invalid")
	public void testWriteToWithNullComposeFile() {
		assertThrows(NullPointerException.class, () -> {
			composeFileWriter.writeTo(writer, null);
		});
	}

	@Test
	@Tag("invalid")
	public void testWriteToWithNullIndentingWriter() {
		assertThrows(NullPointerException.class, () -> {
			composeFileWriter.writeTo(null, compose);
		});
	}

}