/*
 * Copyright 2012-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=createDistributionFile_82e954b859
ROOST_METHOD_SIG_HASH=createDistributionFile_8fc3142b95

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-web/src/test/java/io/spring/initializr/web/project/ProjectGenerationInvokerTests.java
Tests:
    "@Test
@Test
@SuppressWarnings("unchecked")
void createDistributionDirectory(@TempDir Path tempDir) {
    ProjectRequest request = new ProjectRequest();
    request.setType("gradle-project");
    Path distributionFile = this.invoker.createDistributionFile(tempDir, ".zip");
    assertThat(distributionFile.toString()).isEqualTo(tempDir + ".zip");
    Map<Path, List<Path>> tempFiles = (Map<Path, List<Path>>) ReflectionTestUtils.getField(this.invoker, "temporaryFiles");
    assertThat(tempFiles.get(tempDir)).contains(distributionFile);
}
""""
  Scenario 1: Test correct return with valid parameters

  Details:
    TestName: validateCorrectReturnWithValidParams
    Description: This test verifies that the 'createDistributionFile' method is capable of correctly returning the intended Path object when provided with valid parameters. This is important business-wise as it is crucial when generating new project files.
  Execution:
    Arrange: Create a Path object called 'dir' with a valid directory. Also, create a String object 'extension' with a valid extension like '.csv'.
    Act: Invoke 'createDistributionFile' method on ProjectGenerationInvoker class instance with 'dir' and 'extension' parameters.
    Assert: Assert that the returned Path object matches the concatenation of 'dir' with 'extension'. Also assert that the map 'temporaryFiles' contains the newly created Path.
  Validation:
    The assertion verifies that the 'createDistributionFile' method behaves as expected when given valid parameters. The importance of this test is to ensure the correct functioning of the method, thus enabling us to generate new files properly.

  Scenario 2: Test correct behaviour with null 'extension' parameter

  Details:
    TestName: validateCorrectBehaviourWithNullExtension
    Description: This test verifies that the 'createDistributionFile' method appropriately handles null inputs for the 'extension' parameter.
  Execution:
    Arrange: Create a Path object called 'dir' with a valid directory. Also, set a String object 'extension' as null.
    Act: Invoke 'createDistributionFile' method on ProjectGenerationInvoker class instance with 'dir' and 'extension' parameters.
    Assert: Assert that the returned Path object matches 'dir'. Also assert that the map 'temporaryFiles' contains the newly created Path.
  Validation:
    The assertion confirms that the method can properly handle null inputs for the 'extension' parameter. This is important to prevent crashes or exceptions during the creation of distribution files.

  Scenario 3: Test correct behaviour with invalid 'dir' parameter

  Details:
    TestName: validateCorrectBehaviourWithInvalidDir
    Description: This test aims to verify that the 'createDistributionFile' method reacts appropriately when given an invalid 'dir' parameter.
  Execution:
    Arrange: Create a Path object 'dir' which does not exist in the file system. Also, set a String object 'extension' as ".txt".
    Act: Invoke 'createDistributionFile' method on ProjectGenerationInvoker class instance with 'dir' and 'extension' parameters.
    Assert: Assert that an exception is thrown.
  Validation:
    The assertion validates that the method properly manages invalid directory paths as 'dir' parameter. It is important to ensure that any invalid directories are correctly managed, so as not to disrupt file generation.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.project;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import static org.junit.jupiter.api.Assertions.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.junit.jupiter.api.*;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import io.spring.initializr.generator.buildsystem.BuildItemResolver;
import io.spring.initializr.generator.buildsystem.BuildWriter;
import io.spring.initializr.generator.project.DefaultProjectAssetGenerator;
import io.spring.initializr.generator.project.ProjectAssetGenerator;
import io.spring.initializr.generator.project.ProjectDescription;
import io.spring.initializr.generator.project.ProjectGenerationContext;
import io.spring.initializr.generator.project.ProjectGenerationException;
import io.spring.initializr.generator.project.ProjectGenerator;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.metadata.support.MetadataBuildItemResolver;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.util.FileSystemUtils;

public class ProjectGenerationInvokerCreateDistributionFileTest {

	@Test
	@Tag("valid")
	public void validateCorrectReturnWithValidParams(@TempDir Path tmpDir) throws Exception {
		ProjectGenerationInvoker projectGenerationInvoker = new ProjectGenerationInvoker();
		Path dir = tmpDir.resolve(Paths.get("test"));
		Files.createDirectories(dir);
		String extension = ".txt";

		Path result = projectGenerationInvoker.createDistributionFile(dir, extension);

		assertEquals(dir.resolveSibling(dir.getFileName() + extension), result);
		assertTrue(projectGenerationInvoker.getTemporaryFiles().containsKey(dir));
		assertTrue(projectGenerationInvoker.getTemporaryFiles().get(dir).contains(result));
	}

	@Test
	@Tag("invalid")
	public void validateCorrectBehaviourWithNullExtension(@TempDir Path tmpDir) throws Exception {
		ProjectGenerationInvoker projectGenerationInvoker = new ProjectGenerationInvoker();
		Path dir = tmpDir.resolve(Paths.get("test"));
		Files.createDirectories(dir);
		String extension = null;

		Path result = projectGenerationInvoker.createDistributionFile(dir, extension);

		assertEquals(dir.resolveSibling(dir.getFileName() + extension), result);
		assertTrue(projectGenerationInvoker.getTemporaryFiles().containsKey(dir));
		assertTrue(projectGenerationInvoker.getTemporaryFiles().get(dir).contains(result));
	}

	@Test
	@Tag("invalid")
	public void validateCorrectBehaviourWithInvalidDir() {
		ProjectGenerationInvoker projectGenerationInvoker = new ProjectGenerationInvoker();
		Path dir = Paths.get("nonexistentdirectory");
		String extension = ".txt";

		assertThrows(Exception.class, () -> projectGenerationInvoker.createDistributionFile(dir, extension));
	}

}