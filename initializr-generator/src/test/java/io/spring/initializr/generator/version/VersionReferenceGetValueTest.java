/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getValue_2cd603888e
ROOST_METHOD_SIG_HASH=getValue_e563a852ef

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d5958c2d-2a99-46e6-ba3d-f7c9d8576735/source/initializr/initializr-generator/src/test/java/io/spring/initializr/generator/version/VersionReferenceTests.java
Tests:
    "@Test
@Test
void ofPropertyWithVersionProperty() {
    VersionProperty property = VersionProperty.of("test.version", true);
    VersionReference reference = VersionReference.ofProperty(property);
    assertThat(reference.isProperty()).isTrue();
    assertThat(reference.getProperty()).isEqualTo(property);
    assertThat(reference.getValue()).isNull();
    assertThat(reference).hasToString("${test.version}");
}
"
    "@Test
@Test
void ofPropertyWithInternalProperty() {
    VersionReference reference = VersionReference.ofProperty("test.version");
    assertThat(reference.isProperty()).isTrue();
    assertThat(reference.getProperty().toStandardFormat()).isEqualTo("test.version");
    assertThat(reference.getValue()).isNull();
    assertThat(reference).hasToString("${test.version}");
}
"
    "@Test
@Test
void ofPropertyWithValue() {
    VersionReference reference = VersionReference.ofValue("1.2.3.RELEASE");
    assertThat(reference.isProperty()).isFalse();
    assertThat(reference.getProperty()).isNull();
    assertThat(reference.getValue()).isEqualTo("1.2.3.RELEASE");
    assertThat(reference).hasToString("1.2.3.RELEASE");
}
"Scenario 1: Test Scenario for Null Value

Details:
  TestName: testGetValueReturnsNullWhenItIsNotSet
  Description: This test checks the getValue method when the value field is not explicitly given a value and hence remains null. This is a corner case check because the value field by default, should be null unless given a value explicitly.

Execution:
  Arrange: Declare a VersionProperty and create a VersionReference using the ofProperty method, where we provide the property but not a value.
  Act: Call the getValue method from the object instance.
  Assert: Assert that the return value of the getValue method is null.

Validation:
  The assertion verifies that the value field remains null when it is not set, showing that the getValue method correctly returns the state of the object. This test is important for ensuring correct handling of null values by the getValue method.

Scenario 2: Test Scenario for Getting Value

Details:
  TestName: testGetValueReturnsCorrectValue
  Description: This test checks the getValue method when we have explicitly given a value.

Execution:
  Arrange: Create a VersionReference object using the ofValue method and provide a specific value.
  Act: Call the getValue method from the object instance.
  Assert: Assert that the returned value from the getValue method is equal to the given value.

Validation:
  The assertion checks that the getValue method returns the correct value that was set. This tests the basic functionality of the getValue method ensuring it returns the set value correctly.

Scenario 3: Test Scenario for Immutable Value

Details:
   TestName: testGetValueReturnsTheSameValueAfterMultipleCalls
   Description: This test checks the getValue method for object immutability, i.e., the value will remain constant even after multiple calls.

Execution:
  Arrange: Create a VersionReference object using the ofValue method and provide a specific value.
  Act: Call the getValue method from the object instance multiple times.
  Assert: Assert that the returned value from each getValue method call is equal to the initially given value.

Validation:
   The assertion confirms that the getValue method always returns the same data even after multiple calls, indicating that the object's value field remains unmodified. This behavior is integral for ensuring the classes' immutability.,
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.*;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Objects;

class VersionReferenceGetValueTest {

	@Test
	@Tag("valid")
	void testGetValueReturnsNullWhenItIsNotSet() {
		VersionProperty versionProperty = VersionProperty.of("Version", false);
		VersionReference versionReference = VersionReference.ofProperty(versionProperty);

		assertNull(versionReference.getValue());
	}

	@ParameterizedTest
	@ValueSource(strings = { "1.0.0", "2.0.0", "3.0.0" })
	@Tag("valid")
	void testGetValueReturnsCorrectValue(String expectedValue) {
		VersionReference versionReference = VersionReference.ofValue(expectedValue);

		String actualValue = versionReference.getValue();

		assertEquals(expectedValue, actualValue);
	}

	@Test
	@Tag("boundary")
	void testGetValueReturnsTheSameValueAfterMultipleCalls() {
		String expectedValue = "1.0.0";
		VersionReference versionReference = VersionReference.ofValue(expectedValue);

		String firstCallValue = versionReference.getValue();
		String secondCallValue = versionReference.getValue();

		assertEquals(expectedValue, firstCallValue);
		assertEquals(expectedValue, secondCallValue);
	}

}