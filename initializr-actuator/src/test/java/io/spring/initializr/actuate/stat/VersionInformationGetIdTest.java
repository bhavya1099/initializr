/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getId_0ef1fa3900
ROOST_METHOD_SIG_HASH=getId_d6f047d41e

"""
Scenario 1: Test to validate correct retrieval of ID

Details:
	TestName: testGetCorrectId
	Description: This test is to validate that the getId function retrieves and returns the correct ID value, as set in an instance of the VersionInformation class.
Execution:
	Arrange: Set up an instance of VersionInformation and assign a specific value to the ID.
	Act: Invoke the getId method on the instance.
	Assert: Assert that the returned value matches the assigned ID value.
Validation:
	The assertion is directly validating the primary expected outcome of the getId function - return the ID set to the instance.
	The test holds significance as it checks the basic functionality of retrieving ID from VersionInformation instance, ensuring the key 'get' operation works as expected.

Scenario 2: Generality of the getId method

Details:
	TestName: testGetIdGenerality
	Description: This test is to establish that the getId method can flexibly handle and return different ID values, validating its generality.
Execution:
	Arrange: Set up multiple instances of VersionInformation, each with distinct ID values.
	Act: Invoke the getId method on each instance.
	Assert: Assert that the returned value from each invocation correctly matches the respective ID value set on the instance.
Validation:
	Verifying that getId can handle a variety of IDs helps to ensure the function can correctly operate in various contexts and scenarios.
	Successfully passing this test demonstrates the reliability of the method irrespective of differing instance states.

Scenario 3: Handle null Value

Details:
	TestName: testHandleNullId
	Description: This test is to validate that the getId method gracefully handles scenarios where the ID value is null.
Execution:
	Arrange: Set up an instance of the VersionInformation class, specifically leaving the ID as null.
	Act: Invoke the getId method on the instance.
	Assert: Assert that the returned value is indeed null.
Validation:
	This assertion aims to test the getId function's resilience in handling potential null IDs.
	Ensuring that the method can handle this edge case successfully without throwing errors increases its robustness and reliability in real-world application scenarios.
""",a9f77e26-96ac-43c7-956f-ab5db28087d6
*/

// ********RoostGPT********

package io.spring.initializr.actuate.stat;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import io.spring.initializr.generator.version.Version;
import org.junit.jupiter.api.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.StringJoiner;
import io.spring.initializr.web.support.Agent;
import org.springframework.util.ObjectUtils;
import org.springframework.util.StringUtils;

public class VersionInformationGetIdTest {

	@Test
	@Tag("valid")
	public void testGetCorrectId() {
		ProjectRequestDocument.VersionInformation versionInformation = new ProjectRequestDocument.VersionInformation(
				new Version(1, 2, 0));
		versionInformation.setId("1.1.0");
		Assertions.assertEquals("1.1.0", versionInformation.getId());
	}

	@Test
	@Tag("valid")
	public void testGetIdGenerality() {
		ProjectRequestDocument.VersionInformation versionInformation1 = new ProjectRequestDocument.VersionInformation(
				new Version(1, 2, 0));
		versionInformation1.setId("1.1.1");
		Assertions.assertEquals("1.1.1", versionInformation1.getId());
		ProjectRequestDocument.VersionInformation versionInformation2 = new ProjectRequestDocument.VersionInformation(
				new Version(2, 3, 1));
		versionInformation2.setId("2.1.0");
		Assertions.assertEquals("2.1.0", versionInformation2.getId());
		ProjectRequestDocument.VersionInformation versionInformation3 = new ProjectRequestDocument.VersionInformation(
				new Version(3, 4, 2));
		versionInformation3.setId("3.2.2");
		Assertions.assertEquals("3.2.2", versionInformation3.getId());
	}

	@Test
	@Tag("invalid")
	public void testHandleNullId() {
		ProjectRequestDocument.VersionInformation versionInformation = new ProjectRequestDocument.VersionInformation(
				new Version(1, 2, 0));
		versionInformation.setId(null);
		Assertions.assertNull(versionInformation.getId());
	}

}