/*
 * Copyright 2012-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=of_e415a4e9c3
ROOST_METHOD_SIG_HASH=of_65b8c80ba2

"""
Scenario 1: Construction of VersionProperty object with valid property and internal value.

Details:
TestName: constructVersionPropertyValidParameters
Description: The test is meant to check the successful creation of a VersionProperty object by passing valid string property and boolean internal value.

Execution:
Arrange: Provide a valid string for 'property', and a boolean value for 'internal'.
Act: Invoke of method with the arranged parameters.
Assert: Check if resulting object is not null, is of type VersionProperty and has expected 'property' and 'internal' values.

Validation:
This test checks if a VersionProperty object can successfully be created with the correct 'property' and 'internal' values.

Scenario 2: Construction of VersionProperty object with a null property.

Details:
TestName: constructVersionPropertyWithNullProperty
Description: The test is designed to check the behavior of the 'of' method when null is passed as 'property' parameter.

Execution:
Arrange: Provide null for 'property' and a boolean value for 'internal'.
Act: Invoke 'of' method with the arranged parameters.
Assert: An exception should be thrown indicating 'property' shouldn't be null.

Validation:
This test ensures 'property' should always be a non-null value.

Scenario 3: Construction of VersionProperty object with a property containing unsupported characters.

Details:
TestName: constructVersionPropertyWithUnsupportedCharacters
Description: This test ascertains how the system handles properties containing unsupported characters.

Execution:
Arrange: Create a string 'property' containing unsupported symbols, and an arbitrary boolean value for 'internal'.
Act: Invoke 'of' method with the provided parameters.
Assert: An exception should be thrown indicating the unsupported character present in 'property'.

Validation:
This test checks how the operation is aborted when unsupported characters are included in 'property', this is essential to ensure standard format.

Scenario 4: Construction of VersionProperty object with a property containing uppercase characters.

Details:
TestName: constructVersionPropertyWithUpperCaseCharacters
Description: This test validates the system's handling of properties containing uppercase letters.

Execution:
Arrange: Create 'property' string with uppercase alphabets and provide a boolean value for 'internal'.
Act: Invoke 'of' method with the organized parameters.
Assert: An exception is expected to be thrown indicating 'property' should not contain uppercase.

Validation:
Uppercase characters in property might affect the consistency of data, hence this test is crucial to reject such non-standard properties.
"""

*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import java.io.Serializable;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import org.springframework.util.StringUtils;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.*;

public class VersionPropertyOfTest {

	@Test
	@Tag("valid")
	public void constructVersionPropertyValidParameters() {
		// Arrange
		String property = "versionProperty1";
		boolean internal = true;
		// Act
		VersionProperty versionProperty = VersionProperty.of(property, internal);
		// Assert
		Assertions.assertNotNull(versionProperty);
		Assertions.assertEquals(property, versionProperty.toString());
		Assertions.assertTrue(versionProperty.isInternal());
	}

	@Test
	@Tag("invalid")
	public void constructVersionPropertyWithNullProperty() {
		// Arrange
		String property = null;
		boolean internal = false;

		// Act and Assert
		Assertions.assertThrows(NullPointerException.class, () -> VersionProperty.of(property, internal));
	}

	@Test
	@Tag("invalid")
	public void constructVersionPropertyWithUnsupportedCharacters() {
		// Arrange
		String property = "unsupported#char={!act#ters";
		boolean internal = true;
		// Act and Assert
		Assertions.assertThrows(IllegalArgumentException.class, () -> VersionProperty.of(property, internal));
	}

	@Test
	@Tag("invalid")
	public void constructVersionPropertyWithUpperCaseCharacters() {
		// Arrange
		String property = "VersionProperty";
		boolean internal = false;
		// Act and Assert
		Assertions.assertThrows(IllegalArgumentException.class, () -> VersionProperty.of(property, internal));
	}

}