/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=projectGenerationController_8ab258a4a1
ROOST_METHOD_SIG_HASH=projectGenerationController_dab2b7ce7e

"""
Scenario 1: Test projectGenerationController with valid InitializrMetadataProvider and ApplicationContext
Details:
  TestName: projectGenerationControllerValidInputs
  Description: This test is used to check the functionality of the projectGenerationController method when valid InitializrMetadataProvider and ApplicationContext are passed as arguments.
Execution:
  Arrange: Mock InitializrMetadataProvider and ApplicationContext inputs.
  Act: Invoke the projectGenerationController method with the mocked inputs.
  Assert: Use JUnit assertions to check the output for a non-null object and the returned class type being CustomProjectGenerationController.
Validation:
  The purpose of this assertion is to confirm that the method doesn't return null and returns an object of CustomProjectGenerationController class when valid arguments are passed to it. The significance of this test is ensuring the correct functionality of the method with valid inputs.

Scenario 2: Test projectGenerationController with null InitializrMetadataProvider
Details:
  TestName: projectGenerationControllerNullMetadataProvider
  Description: This test is meant to check the behavior of the projectGenerationController when InitializrMetadataProvider passed as a parameter is null.
Execution:
  Arrange: Mock ApplicationContext and set InitializrMetadataProvider as null.
  Act: Invoke the projectGenerationController with the null InitializrMetadataProvider and mocked ApplicationContext.
  Assert: Use JUnit assertions to expect an exception.
Validation:
  The assertion aims to verify that an exception is thrown when InitializrMetadataProvider is null. The significance of this test is to cover error handling and to ensure that the program can handle null inputs properly.

Scenario 3: Test projectGenerationController with null ApplicationContext
Details:
  TestName: projectGenerationControllerNullApplicationContext
  Description: This test is created to check how the projectGenerationController method behaves when ApplicationContext passed as a parameter is null.
Execution:
  Arrange: Mock InitializrMetadataProvider and set ApplicationContext as null.
  Act: Invoke the projectGenerationController with the mocked InitializrMetadataProvider and null ApplicationContext.
  Assert: Use JUnit assertions to expect an exception.
Validation:
  This assertion aims to check if the method throws an exception when ApplicationContext is null. The importance of this test is to make sure that the function has appropriate error handling measures and can deal with null inputs effectively.
"""
*/

// ********RoostGPT********

package io.spring.initializr.doc.generator.project;

import io.spring.initializr.generator.project.MutableProjectDescription;
import io.spring.initializr.generator.project.ProjectDescription;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.web.controller.ProjectGenerationController;
import io.spring.initializr.web.project.ProjectGenerationInvoker;
import io.spring.initializr.web.project.ProjectRequestToDescriptionConverter;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.junit.jupiter.api.*;

public class CustomProjectGenerationConfigurationExampleProjectGenerationControllerTest {

	@Mock
	private InitializrMetadataProvider initializrMetadataProvider;

	@Mock
	private ApplicationContext applicationContext;

	private CustomProjectGenerationConfigurationExample hostedConfigurationExample;

	@BeforeEach
	public void init() {
		MockitoAnnotations.initMocks(CustomProjectGenerationConfigurationExampleTest.class);
		hostedConfigurationExample = new CustomProjectGenerationConfigurationExample();
	}

	@Test
	@Tag("valid")
	public void projectGenerationControllerValidInputs() {
		CustomProjectGenerationController result = hostedConfigurationExample
			.projectGenerationController(initializrMetadataProvider, applicationContext);
		assertNotNull(result, "Returned object should not be null");
		assertTrue(result instanceof CustomProjectGenerationController,
				"Returned object should be instance of CustomProjectGenerationController");
	}

	@Test
	@Tag("invalid")
	public void projectGenerationControllerNullMetadataProvider() {
		assertThrows(Exception.class,
				() -> hostedConfigurationExample.projectGenerationController(null, applicationContext));
	}

	@Test
	@Tag("invalid")
	public void projectGenerationControllerNullApplicationContext() {
		assertThrows(Exception.class,
				() -> hostedConfigurationExample.projectGenerationController(initializrMetadataProvider, null));
	}

}