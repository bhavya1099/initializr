/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=writeBuild_9996eddc68
ROOST_METHOD_SIG_HASH=writeBuild_6696fe2e98

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/GradleBuildProjectContributorTests.java
Tests:
    "@Test
private List<String> generateBuild(GradleBuildProjectContributor contributor) throws IOException {
    StringWriter writer = new StringWriter();
    contributor.writeBuild(writer);
    return TextTestUtils.readAllLines(writer.toString());
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/maven/MavenBuildProjectContributorTests.java
Tests:
    "@Test
private List<String> generatePom(MavenBuild mavenBuild, IndentingWriterFactory indentingWriterFactory) throws Exception {
    StringWriter writer = new StringWriter();
    new MavenBuildProjectContributor(mavenBuild, indentingWriterFactory).writeBuild(writer);
    return TextTestUtils.readAllLines(writer.toString());
}
""""
Scenario 1: Successful Writing of Maven Build

TestName: shouldWriteBuildSuccessfully.
Description: This test will check if the method writeBuild successfully writes a Maven build using a given writer.
Execution:
   Arrange: Create a mock Writer, instantiate a MavenBuild, an IndentingWriterFactory, and a MavenBuildWriter. Instantiate the MavenBuildProjectContributor with these mocks.
   Act: Invoke the writeBuild method, passing the mock Writer.
   Assert: Verify that the createIndentingWriter method of the IndentingWriterFactory was called with "maven" and the mock Writer as parameters. Verify that buildWriter's writeTo method was called with the IndentingWriter and Maven build.
Validation:
   The assertion verifies that all method calls were successful and the Maven build was written correctly. It's important since it examines the basic write functionality of the class.

Scenario 2: Handling IOException during build writing

TestName: shouldHandleIOExceptionOnWriteBuildFailure.
Description: This test will verify how the method handles the case when an IOException is thrown while writing build.
Execution:
   Arrange: Create a mock Writer that throws an IOException. Instantiate a MavenBuild, an IndentingWriterFactory, and a MavenBuildWriter. Instantiate the MavenBuildProjectContributor with these mocks.
   Act: Invoke the writeBuild method, passing the mock Writer.
   Assert: Assert that an IOException was thrown.
Validation:
   The test validates that the method handles the IOException properly by propagating it up the stack. This scenario validates the exception handling capability of the writeBuild method.

Scenario 3:  Verifying the expected output generated by writeBuild

TestName: shouldGenerateExpectedBuild.
Description: This test will confirm if the output generated by writeBuild matches expected output.
Execution:
   Arrange: Create and provide input to writeBuild. Have the expected output ready for comparison.
   Act: Capture the output of the writeBuild method.
   Assert: Compare the obtained output against the expected output.
Validation:
   The test validates that the writeBuild method produces the expected output in a controlled environment. This is important for ensuring that the method is behaving as expected.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.spring.build.maven;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import io.spring.initializr.generator.buildsystem.maven.MavenBuild;
import io.spring.initializr.generator.io.IndentingWriter;
import io.spring.initializr.generator.io.IndentingWriterFactory;
import java.io.IOException;
import java.io.Writer;
import static org.mockito.Mockito.*;
import org.junit.jupiter.api.*;
import java.nio.file.Files;
import java.nio.file.Path;
import io.spring.initializr.generator.buildsystem.BuildWriter;
import io.spring.initializr.generator.buildsystem.maven.MavenBuildWriter;
import io.spring.initializr.generator.project.contributor.ProjectContributor;

public class MavenBuildProjectContributorWriteBuildTest {

	@Test
	@Tag("valid")
	public void shouldWriteBuildSuccessfully() throws IOException {
		Writer out = mock(Writer.class);
		MavenBuild build = mock(MavenBuild.class);
		IndentingWriterFactory indentingWriterFactory = mock(IndentingWriterFactory.class);
		MavenBuildWriter buildWriter = mock(MavenBuildWriter.class);
		IndentingWriter writer = mock(IndentingWriter.class);
		when(indentingWriterFactory.createIndentingWriter("maven", out)).thenReturn(writer);
		MavenBuildProjectContributor contributor = new MavenBuildProjectContributor(build, indentingWriterFactory,
				buildWriter);
		contributor.writeBuild(out);
		verify(indentingWriterFactory).createIndentingWriter("maven", out);
		verify(buildWriter).writeTo(writer, build);
	}

	@Test
	@Tag("invalid")
	public void shouldHandleIOExceptionOnWriteBuildFailure() throws IOException {
		Writer out = mock(Writer.class);
		MavenBuild build = mock(MavenBuild.class);
		IndentingWriterFactory indentingWriterFactory = mock(IndentingWriterFactory.class);
		MavenBuildWriter buildWriter = mock(MavenBuildWriter.class);
		when(indentingWriterFactory.createIndentingWriter("maven", out)).thenThrow(IOException.class);
		MavenBuildProjectContributor contributor = new MavenBuildProjectContributor(build, indentingWriterFactory,
				buildWriter);

		assertThrows(IOException.class, () -> contributor.writeBuild(out));
	}

	@Test
	@Tag("boundary")
	public void shouldGenerateExpectedBuild() throws IOException {
		Writer out = mock(Writer.class);
		MavenBuild build = mock(MavenBuild.class);
		IndentingWriterFactory indentingWriterFactory = mock(IndentingWriterFactory.class);
		MavenBuildWriter buildWriter = mock(MavenBuildWriter.class);
		IndentingWriter writer = mock(IndentingWriter.class);
		when(indentingWriterFactory.createIndentingWriter("maven", out)).thenReturn(writer);
		MavenBuildProjectContributor contributor = new MavenBuildProjectContributor(build, indentingWriterFactory,
				buildWriter);
		contributor.writeBuild(out);
		String expectedOutput = "Expected Output";
		String actualOutput = out.toString();
		assertEquals(expectedOutput, actualOutput);
	}

}