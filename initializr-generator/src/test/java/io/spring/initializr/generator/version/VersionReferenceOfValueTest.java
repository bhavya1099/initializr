/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=ofValue_ffe1414efc
ROOST_METHOD_SIG_HASH=ofValue_0eeeb07dd6

Scenario 1: Passing a valid value as parameter

Details:
  TestName: testOfValueWithValidParam
  Description: This test manages a valid scenario where we pass to the method a valid string which will serve as a value for the versionReference instance.
Execution:
  Arrange: Declare a valid string value.
  Act: Call the VersionReference.ofValue('value') method passing the valid string.
  Assert: The method should return a new instance of VersionReference with property = null and value = the valid string we provided.
Validation:
  The returned VersionReference instance should not be null and should have its value field matching the valid string. The test verifies that the method creates a versionReference instance with the expected values.

Scenario 2: Passing null value as parameter

Details:
  TestName: testOfValueWithNullParam
  Description: This test focuses on the behavior when null is passed as value.
Execution:
  Arrange: Declare a null string.
  Act: Call the VersionReference.ofValue(null) method.
  Assert: Even if the value is null, the method should return a VersionReference instance with both value and property set to null.
Validation:
  Non-null instance is created regardless of null parameter. The result will verify that the method can handle null inputs effectively without causing an exception.

Scenario 3: Checking immutability of the created instance

Details:
  TestName: testOfValueInstanceImmutability
  Description: This test ensures that the VersionReference instances created are immutable.
Execution:
  Arrange: Declare a valid string.
  Act: Call the VersionReference.ofValue('value') method twice with the same string, creating two instances.
  Assert: Assert that the two instances are not the same.
Validation:
  Even though the values for creating the instances were identical, the instances themselves should not be the same, asserting the functionality of creating new immutable instances each time.

Scenario 4: Ensuring property is null

Details:
  TestName: testOfValuePropNullCheck
  Description: This test checks that the property of the created VersionReference instance is null.
Execution:
  Arrange: Declare a valid string value.
  Act: Call the VersionReference.ofValue('value') method passing the valid string.
  Assert: Check that the property of the returned VersionReference instance is null.
Validation:
  It validates that the property of the VersionReference instance created by the ofValue method is null as per method definition.

NOTE: These scenarios assume that the VersionReference constructor works properly. If it doesn't, these test cases would fail as well.
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.*;
import java.util.Objects;

public class VersionReferenceOfValueTest {

	@Test
	@Tag("valid")
	public void testOfValueWithValidParam() {
		String validVal = "validValue";
		VersionReference versionRef = VersionReference.ofValue(validVal);
		assertNotNull(versionRef);
		assertEquals(validVal, versionRef.getValue());
		assertNull(versionRef.getProperty());
	}

	@Test
	@Tag("valid")
	public void testOfValueWithNullParam() {
		String nullVal = null;
		VersionReference versionRef = VersionReference.ofValue(nullVal);
		assertNotNull(versionRef);
		assertNull(versionRef.getValue());
		assertNull(versionRef.getProperty());
	}

	@Test
	@Tag("valid")
	public void testOfValueInstanceImmutability() {
		String validVal = "validValue";
		VersionReference versionRef1 = VersionReference.ofValue(validVal);
		VersionReference versionRef2 = VersionReference.ofValue(validVal);
		assertNotSame(versionRef1, versionRef2);
	}

	@Test
	@Tag("valid")
	public void testOfValuePropNullCheck() {
		String validVal = "validValue";
		VersionReference versionRef = VersionReference.ofValue(validVal);
		assertNull(versionRef.getProperty());
	}

}