/*
 * Copyright 2012-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=createProjectGenerator_a47c7b7d31
ROOST_METHOD_SIG_HASH=createProjectGenerator_a7f17e7a2b

"""
  Scenario 1: Successful Creation of ProjectGenerator Object

  Details:
    TestName: testSuccessfulCreationOfProjectGenerator.
    Description: This scenario is meant to test the successful creation of a ProjectGenerator object from the createProjectGenerator method.
  Execution:
    Arrange: Create an InitializrMetadata object mock.
    Act: Invoke the method createProjectGenerator with this object.
    Assert: Assert that the returned ProjectGenerator is not null and is of ProjectGenerator class.
  Validation:
    The test should assert that the returned ProjectGenerator object is the expected type and is fully instantiated. This means that the method is able to construct a functional ProjectGenerator object.

  Scenario 2: Customization of ProjectGenerationContext during ProjectGenerator Creation

  Details:
    TestName: testCustomizationInProjectGenerationContextForProjectGeneratorCreation.
    Description: This test is intended to verify that during the creation of a ProjectGenerator, the ProjectGenerationContext customizations are applied.
  Execution:
    Arrange: Prepare a mock of InitializrMetadata and a mock of ProjectGenerationContext.
    Act: Call the createProjectGenerator with the mock metadata, and invoke the resulting ProjectGenerator on the mock context.
    Assert: Ensure that the metadata was passed to the context's parent ApplicationContext.
  Validation:
    This test assures that the context customizations occur as expected during the creation of ProjectGenerator. This includes setting a parent ApplicationContext which should be validated by checking the reference of the context's Parent. This impacts the hierarchical data access of beans ensuring that beans inherited from parent ApplicationContext are accessible.

  Scenario 3: Exception thrown during ProjectGenerator Creation

  Details:
    TestName: testExceptionDuringProjectGeneratorCreation.
    Description: This scenario is intended to validate what happens when an exception occurs during the ProjectGenerator creation process.
  Execution:
    Arrange: Inject a faulty InitializrMetadata, which will throw an exception when used.
    Act: Invoke the createProjectGenerator method with this faulty metadata.
    Assert: Assert that a specific type of exception (based on the faulty metadata implementation) has been thrown.
  Validation:
    The test is beneficial for understanding the error handling capabilities of this method. We must have a good understanding of how our code reacts and retrieves when exceptions occur, which is the focus of this test.

  Note: The validity of scenarios 2 and 3 are heavily based on the internal implementation of method "customizeProjectGenerationContext" which in general should be design tests around non-public methods but this heavily depend on custom logic of that method.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.project;

import io.spring.initializr.generator.project.ProjectGenerator;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.web.support.InitializrMetadataUpdateStrategy;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.BeforeEach;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.io.IOException;
import java.io.StringWriter;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import io.spring.initializr.generator.buildsystem.BuildItemResolver;
import io.spring.initializr.generator.buildsystem.BuildWriter;
import io.spring.initializr.generator.project.DefaultProjectAssetGenerator;
import io.spring.initializr.generator.project.ProjectAssetGenerator;
import io.spring.initializr.generator.project.ProjectDescription;
import io.spring.initializr.generator.project.ProjectGenerationContext;
import io.spring.initializr.generator.project.ProjectGenerationException;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.metadata.support.MetadataBuildItemResolver;
import org.springframework.util.FileSystemUtils;

public class ProjectGenerationInvokerCreateProjectGeneratorTest {

	private ProjectRequestToDescriptionConverter requestConverter;

	private ApplicationContext parentApplicationContext;

	private ApplicationEventPublisher eventPublisher;

	private ProjectGenerationInvoker projectGenerationInvoker;

	@BeforeEach
	public void setUp() {
		requestConverter = mock(ProjectRequestToDescriptionConverter.class);
		parentApplicationContext = mock(ApplicationContext.class);
		eventPublisher = mock(ApplicationEventPublisher.class);
		projectGenerationInvoker = new ProjectGenerationInvoker(parentApplicationContext, eventPublisher,
				requestConverter);
	}

	@Test
	@Tag("valid")
	public void testSuccessfulCreationOfProjectGenerator() {
		InitializrMetadata metadata = mock(InitializrMetadata.class);
		ProjectGenerator projectGenerator = projectGenerationInvoker.createProjectGenerator(metadata);

		assertNotNull(projectGenerator, "Created ProjectGenerator is null");
		assertTrue(projectGenerator instanceof ProjectGenerator,
				"Created ProjectGenerator is not instance of ProjectGenerator");
	}

	@Test
	@Tag("valid")
	public void testCustomizationInProjectGenerationContextForProjectGeneratorCreation() {
		InitializrMetadata metadata = mock(InitializrMetadata.class);
		ProjectGenerationContext context = mock(ProjectGenerationContext.class);
		ProjectGenerator projectGenerator = projectGenerationInvoker.createProjectGenerator(metadata);
		AnnotationConfigApplicationContext parentContext = new AnnotationConfigApplicationContext();
		when(context.getParent()).thenReturn(parentContext);
		projectGenerator.invokeProjectStructureGeneration(context);
		assertEquals(parentContext, context.getParent(),
				"Parent context of ProjectGenerationContext is not set correctly");
	}

	@Test
	@Tag("invalid")
	public void testExceptionDuringProjectGeneratorCreation() {
		InitializrMetadata metadata = mock(InitializrMetadata.class);
		when(metadata.getId()).thenThrow(RuntimeException.class);
		assertThrows(RuntimeException.class, () -> projectGenerationInvoker.createProjectGenerator(metadata),
				"Expected createProjectGenerator to throw RuntimeException, but it didn't");
	}

}