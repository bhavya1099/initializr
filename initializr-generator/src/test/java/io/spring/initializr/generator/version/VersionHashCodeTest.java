/*
 * Copyright 2012-2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=hashCode_83d8b31ebb
ROOST_METHOD_SIG_HASH=hashCode_44411a81c8

"""
  Scenario 1: Test HashCode value when Version fields are null.

  Details:
    TestName: testHashCodeWhenFieldsAreNull
    Description: This test verifies the functionality of the hashCode method when major, minor, patch, and qualifier fields of the Version object are all null.

  Execution:
    Arrange: Create a Version object with null values for major, minor, patch, and qualifier fields.
    Act: Invoke the hashCode method on the created Version object.
    Assert: Validate that the calculated hashcode is equal to 1 (Since all fields are null).
  Validation:
    The purpose of the assertion is to confirm that the hashcode of the Version object is as expected when all its fields are null. This ensures the hashcode method meets the contract of the hashCode function and works as expected when all fields are null.


  Scenario 2: Test HashCode value when Version identifier fields have values.

  Details:
    TestName: testHashCodeWhenIdentifierFieldsHaveValues
    Description: This test validates the functionality of the hashCode method when Version's major, minor, and patch fields have values and qualifier is null.

  Execution:
    Arrange: Create a Version object with values for major, minor, patch fields and null for the qualifier field.
    Act: Invoke the hashCode method on the created Version object.
    Assert: Validate that the computed hashCode value isn't 1 (indicating that the hashcode isn't default, calculated based on non-null major, minor, and patch fields).
  Validation:
    The objective of the assertion is to confirm that the computed hashcode value is calculated correctly when the identifier fields have values. This validates the proper functioning of the hashCode method in the condition when identifier fields have values and qualifier is null.


  Scenario 3: Test HashCode value when all fields of Version have values.

  Details:
    TestName: testHashCodeWhenAllFieldsHaveValues
    Description: This test confirms the functionality of the hashCode method when all the fields of the Version object (major, minor, patch, and qualifier) contain values.

  Execution:
    Arrange: Set up a Version object with values for all of its fields (major, minor, patch, and qualifier).
    Act: Invoke the hashCode method on the Version object that was set up.
    Assert: Confirm the computed hashCode value is not 1, showing the hashCode was calculated based on actual values rather than defaulting to the base hashcode value due to null fields.
  Validation:
    The purpose of the assertion is to confirm that the hashCode method behaves as expected when all fields contain values. This helps ensure that the hashCode method is effectively computing the hashcodes when all fields are non-null, providing uniqueness to each unique Version object, which is crucial during operations like storing the objects in a HashSet or HashMap.


  Scenario 4: Test HashCode value for two different Version objects with same values.

  Details:
    TestName: testHashCodeForSameFieldValues
    Description: This test aims to validate if the hashCode method returns the same hashcode value for two distinct Version objects having identical field values, thus abiding by the contract of the hashCode function.

  Execution:
    Arrange: Create two separate Version objects with identical field values.
    Act: Call the hashCode method on both Version objects.
    Assert: Assert that the two hashcodes returned are identical.
  Validation:
    The aim of the assertion is to ensure that the hashCode method functions correctly by generating identical hashcodes for two distinct Version objects that have identical field values. This ensures consistency and is an important aspect for collections that use hashing, such as HashSet or HashMap.
""",
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.function.Function;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;

public class VersionHashCodeTest {

	@Test
	@Tag("valid")
	public void testHashCodeWhenFieldsAreNull() {
		Version version = new Version(null, null, null, null);
		assertEquals(1, version.hashCode());
	}

	@Test
	@Tag("valid")
	public void testHashCodeWhenIdentifierFieldsHaveValues() {
		Version version = new Version(1, 2, 3, null);
		assertNotEquals(1, version.hashCode());
	}

	@Test
	@Tag("valid")
	public void testHashCodeWhenAllFieldsHaveValues() {
		Version.Qualifier qualifier = new Version.Qualifier("id", 1, ".");
		Version version = new Version(1, 2, 3, qualifier);
		assertNotEquals(1, version.hashCode());
	}

	@Test
	@Tag("valid")
	public void testHashCodeForSameFieldValues() {
		Version.Qualifier qualifier = new Version.Qualifier("id", 1, ".");
		Version version1 = new Version(1, 2, 3, qualifier);
		Version version2 = new Version(1, 2, 3, qualifier);
		assertEquals(version1.hashCode(), version2.hashCode());
	}

}