/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=isEmpty_b1d3c7ada2
ROOST_METHOD_SIG_HASH=isEmpty_62479dcfd9

"""
  Scenario 1: Validate isEmpty method functionality when services map has no elements

  Details:
    TestName: testIsEmptyWithEmptyServices.
    Description: The test validates that the isEmpty method returns true when the services map has no elements.
  Execution:
    Arrange: Instantiate ComposeServiceContainer. No service is added at this stage.
    Act: Invoke the isEmpty method.
    Assert: Assert the result is true as services map is empty.
  Validation:
    The method isEmpty is meant to verify if the services map is empty. In this case, it should return true. This is important to handle cases where operations on the services map should only be performed when it is not empty.


  Scenario 2: Validate isEmpty method functionality when services map has content

  Details:
    TestName: testIsEmptyWithServicesContent.
    Description: This test validates that the isEmpty method returns false when the services map has elements.
  Execution:
    Arrange: Instantiate ComposeServiceContainer and add a service to the services map.
    Act: Invoke the isEmpty method.
    Assert: Assert that the result is false as services map contains elements.
  Validation:
    The isEmpty method is meant to verify if the services map is empty. In this case, it should return false because we have added a service to the services map. This is important to handle cases where operations on the services map should only be performed when it is not empty.


  Scenario 3: Validate isEmpty method functionality after removing a service

  Details:
    TestName: testIsEmptyAfterRemovingService.
    Description: This test validates that the isEmpty method returns true when a service is removed from the services map.
  Execution:
    Arrange: Instantiate ComposeServiceContainer, add a service to the services map and then remove it.
    Act: Invoke the isEmpty method.
    Assert: Assert that the result is true as the services map should be empty after removing the service.
  Validation:
    The isEmpty method is meant to verify if the services map is empty. Even though a service was added, it was then removed, hence it should return true. This is important to handle cases where operations on the services map should only be operated when it is not empty.
"""


*/

// ********RoostGPT********

package io.spring.initializr.generator.container.docker.compose;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;
import java.util.function.Consumer;
import org.junit.jupiter.api.*;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.stream.Stream;
import io.spring.initializr.generator.container.docker.compose.ComposeService.Builder;

public class ComposeServiceContainerIsEmptyTest {

	private ComposeServiceContainer composeServiceContainer;

	private final Consumer<Builder> dummyService = builder -> {
	};

	@BeforeEach
	public void setUp() {
		this.composeServiceContainer = new ComposeServiceContainer();
	}

	@Test
	@Tag("valid")
	public void testIsEmptyWithEmptyServices() {
		assertTrue(this.composeServiceContainer.isEmpty());
	}

	@Test
	@Tag("valid")
	public void testIsEmptyWithServicesContent() {
		this.composeServiceContainer.add("testService1", dummyService);
		assertFalse(this.composeServiceContainer.isEmpty());
	}

	@Test
	@Tag("valid")
	public void testIsEmptyAfterRemovingService() {
		this.composeServiceContainer.add("testService2", dummyService);
		this.composeServiceContainer.remove("testService2");
		assertTrue(this.composeServiceContainer.isEmpty());
	}

}