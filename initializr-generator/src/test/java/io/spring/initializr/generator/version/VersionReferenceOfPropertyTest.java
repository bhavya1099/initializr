/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=ofProperty_1819a5588e
ROOST_METHOD_SIG_HASH=ofProperty_4e80268a07

"""
  Scenario 1: Validate the functionality of 'ofProperty' function by providing a valid VersionProperty as input.

  Details:
    TestName: testValidVersionPropertyInput.
    Description: This test is meant to verify if the function 'ofProperty' correctly creates an instance of VersionReference with the given VersionProperty and null value.
  Execution:
    Arrange: Create a mock VersionProperty object.
    Act: Invoke the 'ofProperty' method with the mock VersionProperty object as input.
    Assert: Use JUnit assertions to verify that the returned VersionReference object's property is the same as the mock VersionProperty object, and its value is null.
  Validation:
    This assertion is critical because it ensures that the 'ofProperty' function operates as anticipated - by creating a VersionReference instance using the provided VersionProperty. This test is significant from a business standpoint to ensure that the referenced versions are correctly created when only property is provided.

  Scenario 2: Test 'ofProperty' function with a null VersionProperty as input.

  Details:
    TestName: testNullVersionProperty.
    Description: This test is meant to verify the function 'ofProperty' response when provided with a null VersionProperty.
  Execution:
    Arrange: No pre-requisites.
    Act: Invoke the 'ofProperty' method with null as an argument.
    Assert: Use JUnit assertions to verify that a VersionReference object is returned with both its property and value as null.
  Validation:
    This assertion verifies that the method correctly handles null inputs, preventing potential NullPointerExceptions which can be critical in a live/production environment.

  Scenario 3: Validate 'ofProperty' function behavior by checking its non-interference with the 'value' field.

  Details:
    TestName: testNonInterferenceWithValue.
    Description: This test is meant to check whether the 'ofProperty' function interferes with the 'value' field when creating the VersionReference object.
  Execution:
    Arrange: Create a mock VersionProperty object.
    Act: Invoke the 'ofProperty' method with the mock VersionProperty object as input.
    Assert: Use JUnit assertions to compare the returned VersionReference object's value against null.
  Validation:
    This assertion aims to confirm that the 'ofProperty' function does not interfere with the 'value' field, preserving data integrity and functionality. This is crucial for the correct operation of the service in returning the expected result.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import static org.mockito.Mockito.*;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.junit.experimental.categories.Category;
import java.util.Objects;

public class VersionReferenceOfPropertyTest {

	@Mock
	VersionProperty versionProperty;

	@Test
	@Tag("Valid")
	public void testValidVersionPropertyInput() {
		MockitoAnnotations.openMocks(this);

		when(versionProperty.toStandardFormat()).thenReturn("mock.version.property");

		VersionReference versionReference = VersionReference.ofProperty(versionProperty);

		assertThat(versionReference.isProperty(), is(true));
		assertThat(versionReference.getValue(), is(nullValue()));
	}

	@Test
	@Tag("Invalid")
	public void testNullVersionProperty() {
		VersionReference versionReference = VersionReference.ofProperty(null);
		assertThat(versionReference.isProperty(), is(false));
		assertThat(versionReference.getValue(), is(nullValue()));
	}

	@Test
	@Tag("Boundary")
	public void testNonInterferenceWithValue() {
		MockitoAnnotations.openMocks(this);

		when(versionProperty.toStandardFormat()).thenReturn("mock.version.property");

		VersionReference versionReference = VersionReference.ofProperty(versionProperty);

		assertThat(versionReference.getValue(), is(nullValue()));
	}

}