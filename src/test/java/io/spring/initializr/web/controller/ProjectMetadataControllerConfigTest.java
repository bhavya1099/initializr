/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=config_9959740393
ROOST_METHOD_SIG_HASH=config_becbf164d9

"""
  Scenario 1: Successful Retrieval of InitializrMetadata
  Details:
    TestName: getConfigSuccessfully.
    Description: This test is used to check if the method config successfully retrieves and returns the InitializrMetadata instance from the metadataProvider.
  Execution:
    Arrange: Set the mock for the metadataProvider's get method to return an instance of InitializrMetadata.
    Act: Call the public method config.
    Assert: Check if the return value equals the expected instance of InitializrMetadata.
  Validation:
    This is checking that the config method successfully retrieves and returns the InitializrMetadata object. The expected result is that the system should successfully return the instance of InitializrMetadata provided by metadataProvider.get().


  Scenario 2: Null Value Response of InitializrMetadata
  Details:
    TestName: getNullConfig.
    Description: This test is used to check the scenario when the metadataProvider's get method returns null.
  Execution:
    Arrange: Mock the metadataProvider's get method to return null.
    Act: Call the public method config.
    Assert: Check the response of config method to ensure it returns null.
  Validation:
    Validate that the config method correctly handles null values by returning null. The test is significant because it needs to make sure the system does not break when there is an absence of metadata.


  Scenario 3: Handling metadataProvider's Unexpected Exception
  Details:
    TestName: handleMetadataProviderException.
    Description: This test is meant to validate how config method handles exceptions while performing metadataProvider.get().
  Execution:
    Arrange: Spy the metadataProvider's get method to throw an unexpected runtime exception.
    Act: Call the public method config.
    Assert: Assert that the thrown exception is instance of the specific runtime exception.
  Validation:
    This test ensures that the system can gracefully handle possible exceptions on getting the InitializrMetadata object from the metadataProvider. In addition, this ensures that the system fails fast by halting the process and communicating the error to the client rather than trying to recover from an unhealthy state.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.controller;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.junit.jupiter.api.extension.ExtendWith;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.web.controller.ProjectMetadataController;
import io.spring.initializr.metadata.DependencyMetadataProvider;
import org.junit.jupiter.api.*;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import io.spring.initializr.generator.version.Version;
import io.spring.initializr.metadata.DependencyMetadata;
import io.spring.initializr.metadata.InitializrConfiguration.Platform;
import io.spring.initializr.metadata.InvalidInitializrMetadataException;
import io.spring.initializr.web.mapper.DependencyMetadataJsonMapper;
import io.spring.initializr.web.mapper.DependencyMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataJsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV22JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV2JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataVersion;
import io.spring.initializr.web.project.InvalidProjectRequestException;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.http.CacheControl;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@ExtendWith(MockitoExtension.class)
public class ProjectMetadataControllerConfigTest {

	@Mock
	private InitializrMetadataProvider metadataProvider;

	@Mock
	private DependencyMetadataProvider dependencyMetadataProvider;

	@InjectMocks
	private ProjectMetadataController controller;

	@Test
	@Tag("valid")
	public void getConfigSuccessfully() {
		InitializrMetadata metadata = new InitializrMetadata();
		when(metadataProvider.get()).thenReturn(metadata);
		InitializrMetadata result = controller.config();
		assertEquals(metadata, result);
		verify(metadataProvider, times(1)).get();
	}

	@Test
	@Tag("invalid")
	public void getNullConfig() {
		when(metadataProvider.get()).thenReturn(null);
		InitializrMetadata result = controller.config();
		assertNull(result);
		verify(metadataProvider, times(1)).get();
	}

	@Test
	@Tag("boundary")
	public void handleMetadataProviderException() {
		RuntimeException runtimeException = new RuntimeException();
		when(metadataProvider.get()).thenThrow(runtimeException);
		Exception exception = assertThrows(RuntimeException.class, () -> {
			controller.config();
		});
		assertTrue(exception instanceof RuntimeException);
	}

}