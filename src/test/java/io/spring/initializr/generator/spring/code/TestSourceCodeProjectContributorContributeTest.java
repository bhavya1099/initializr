/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=contribute_0c3025b7f2
ROOST_METHOD_SIG_HASH=contribute_a94e4219ee

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/container/docker/compose/ComposeProjectContributorTests.java
Tests:
    "@Test
@Test
void composeFileIsContributedInProjectStructure(@TempDir Path projectDir) throws IOException {
    ComposeFile compose = new ComposeFile();
    compose.services().add("test", (service) -> service.image("my-image:1.2.3"));
    new ComposeProjectContributor(compose, IndentingWriterFactory.withDefaultSettings()).contribute(projectDir);
    Path composeFile = projectDir.resolve("compose.yaml");
    assertThat(composeFile).isRegularFile();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-actuator/src/test/java/io/spring/initializr/actuate/info/BomRangesInfoContributorTests.java
Tests:
    "@Test
private static Info getInfo(InitializrMetadata metadata) {
    Info.Builder builder = new Info.Builder();
    new BomRangesInfoContributor(new SimpleInitializrMetadataProvider(metadata)).contribute(builder);
    return builder.build();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/maven/MavenBuildProjectContributorTests.java
Tests:
    "@Test
@Test
void mavenBuildIsContributedInProjectStructure(@TempDir Path projectDir) throws IOException {
    MavenBuild build = new MavenBuild();
    new MavenBuildProjectContributor(build, IndentingWriterFactory.withDefaultSettings()).contribute(projectDir);
    Path pomFile = projectDir.resolve("pom.xml");
    assertThat(pomFile).isRegularFile();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/scm/git/GitProjectGenerationConfigurationTests.java
Tests:
    "@Test
@Test
void gitIgnoreIsContributedToProject(@TempDir Path directory) {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setBuildSystem(new GradleBuildSystem());
    Path projectDirectory = this.projectTester.withDirectory(directory).generate(description, (context) -> {
        GitIgnoreContributor contributor = context.getBean(GitIgnoreContributor.class);
        contributor.contribute(directory);
        return directory;
    });
    assertThat(projectDirectory.resolve(".gitignore")).isRegularFile();
}
"
    "@Test
@Test
void gitAttributesIsContributedToProject(@TempDir Path directory) {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setBuildSystem(new GradleBuildSystem());
    Path projectDirectory = this.projectTester.withDirectory(directory).generate(description, (context) -> {
        GitAttributesContributor contributor = context.getBean(GitAttributesContributor.class);
        contributor.contribute(directory);
        return directory;
    });
    assertThat(projectDirectory.resolve(".gitattributes")).isRegularFile();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/properties/ApplicationPropertiesContributorTests.java
Tests:
    "@Test
@Test
void applicationConfigurationWithDefaultSettings() throws IOException {
    new ApplicationPropertiesContributor(new ApplicationProperties()).contribute(this.directory);
    assertThat(new ProjectStructure(this.directory)).textFile("src/main/resources/application.properties").isEmpty();
}
"
    "@Test
@Test
void shouldAddStringProperty() throws IOException {
    ApplicationProperties properties = new ApplicationProperties();
    properties.add("spring.application.name", "test");
    ApplicationPropertiesContributor contributor = new ApplicationPropertiesContributor(properties);
    contributor.contribute(this.directory);
    assertThat(new ProjectStructure(this.directory)).textFile("src/main/resources/application.properties").lines().contains("spring.application.name=test");
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/GradleWrapperContributorTests.java
Tests:
    "@Test
@ParameterizedTest(name = "Gradle {0}")
@ValueSource(strings = "8")
void gradleWrapperSetExecutableFlagOnScripts(String gradleVersion) throws IOException {
    Path projectDir = contribute(gradleVersion);
    assertThat(projectDir.resolve("gradlew")).isRegularFile().isExecutable();
    assertThat(projectDir.resolve("gradlew.bat")).isRegularFile().isExecutable();
    assertThat(projectDir.resolve("gradle/wrapper/gradle-wrapper.jar")).isRegularFile().satisfies(isNotExecutable());
    assertThat(projectDir.resolve("gradle/wrapper/gradle-wrapper.properties")).isRegularFile().satisfies(isNotExecutable());
}
"
    "@Test
Path contribute(String gradleVersion) throws IOException {
    Path projectDir = Files.createTempDirectory(this.directory, "project-");
    new GradleWrapperContributor(gradleVersion).contribute(projectDir);
    return projectDir;
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/maven/MavenWrapperContributorTests.java
Tests:
    "@Test
@ParameterizedTest(name = "Maven {0}")
@ValueSource(strings = "3")
void mavenWrapperSetExecutableFlagOnScripts(String mavenVersion) throws IOException {
    Path projectDir = contribute(mavenVersion);
    assertThat(projectDir.resolve("mvnw")).isRegularFile().isExecutable();
    assertThat(projectDir.resolve("mvnw.cmd")).isRegularFile().isExecutable();
    assertThat(projectDir.resolve(".mvn/wrapper/maven-wrapper.properties")).isRegularFile().satisfies(isNotExecutable());
}
"
    "@Test
Path contribute(String mavenVersion) throws IOException {
    Path projectDir = Files.createTempDirectory(this.directory, "project-");
    new MavenWrapperContributor(mavenVersion).contribute(projectDir);
    return projectDir;
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/GradleBuildProjectContributorTests.java
Tests:
    "@Test
@Test
void groovyDslGradleBuildIsContributedInProjectStructure(@TempDir Path projectDir) throws IOException {
    GradleBuild build = new GradleBuild();
    groovyDslGradleBuildProjectContributor(build, IndentingWriterFactory.withDefaultSettings()).contribute(projectDir);
    Path buildGradle = projectDir.resolve("build.gradle");
    assertThat(buildGradle).isRegularFile();
}
"
    "@Test
@Test
void kotlinDslGradleBuildIsContributedInProjectStructure(@TempDir Path projectDir) throws IOException {
    GradleBuild build = new GradleBuild();
    kotlinDslGradleBuildProjectContributor(build, IndentingWriterFactory.withDefaultSettings()).contribute(projectDir);
    Path buildGradleKts = projectDir.resolve("build.gradle.kts");
    assertThat(buildGradleKts).isRegularFile();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator/src/test/java/io/spring/initializr/generator/project/contributor/MultipleResourcesProjectContributorTests.java
Tests:
    "@Test
@Test
void contribute(@TempDir Path directory) throws IOException {
    new MultipleResourcesProjectContributor("classpath:/data/multi").contribute(directory);
    assertThat(directory.resolve("one.properties")).exists().isRegularFile();
    assertThat(directory.resolve("two.xml")).exists().isRegularFile();
}
"
    "@Test
@Test
void contributeWithTrailingSlash(@TempDir Path directory) throws IOException {
    new MultipleResourcesProjectContributor("classpath:/data/multi/").contribute(directory);
    assertThat(directory.resolve("one.properties")).exists().isRegularFile();
    assertThat(directory.resolve("two.xml")).exists().isRegularFile();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/SettingsGradleProjectContributorTests.java
Tests:
    "@Test
private TextAssert assertSettings(SettingsGradleProjectContributor contributor) throws IOException {
    Path projectDir = Files.createTempDirectory(this.directory, "project-");
    contributor.contribute(projectDir);
    return new TextAssert(projectDir.resolve("test.gradle"));
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/configuration/WebFoldersContributorTests.java
Tests:
    "@Test
@Test
void webFoldersCreatedWithWebDependency() throws IOException {
    Dependency simple = Dependency.withId("simple", "com.example", "simple", null, Dependency.SCOPE_COMPILE);
    Dependency web = Dependency.withId("web", "com.example", "web", null, Dependency.SCOPE_COMPILE);
    web.setFacets(Collections.singletonList("web"));
    InitializrMetadata metadata = InitializrMetadataTestBuilder.withDefaults().addDependencyGroup("test", simple, web).build();
    Build build = createBuild(metadata);
    build.dependencies().add("simple");
    build.dependencies().add("web");
    Path projectDir = contribute(build, metadata);
    assertThat(projectDir.resolve("src/main/resources/templates")).isDirectory();
    assertThat(projectDir.resolve("src/main/resources/static")).isDirectory();
}
"
    "@Test
@Test
void webFoldersNotCreatedWithoutWebDependency() throws IOException {
    Dependency simple = Dependency.withId("simple", "com.example", "simple", null, Dependency.SCOPE_COMPILE);
    Dependency web = Dependency.withId("web", "com.example", "web", null, Dependency.SCOPE_COMPILE);
    web.setFacets(Collections.singletonList("web"));
    InitializrMetadata metadata = InitializrMetadataTestBuilder.withDefaults().addDependencyGroup("test", simple, web).build();
    Build build = createBuild(metadata);
    build.dependencies().add("simple");
    Path projectDir = contribute(build, metadata);
    assertThat(projectDir.resolve("src/main/resources/templates")).doesNotExist();
    assertThat(projectDir.resolve("src/main/resources/static")).doesNotExist();
}
"
    "@Test
private Path contribute(Build build, InitializrMetadata metadata) throws IOException {
    MutableProjectDescription projectDescription = new MutableProjectDescription();
    projectDescription.setPlatformVersion(Version.parse("1.0.0"));
    new WebFoldersContributor(build, metadata, projectDescription).contribute(this.projectDir);
    return this.projectDir;
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-actuator/src/test/java/io/spring/initializr/actuate/info/DependencyRangesInfoContributorTests.java
Tests:
    "@Test
private static Info getInfo(InitializrMetadata metadata) {
    Info.Builder builder = new Info.Builder();
    new DependencyRangesInfoContributor(new SimpleInitializrMetadataProvider(metadata)).contribute(builder);
    return builder.build();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-web/src/test/java/io/spring/initializr/web/controller/custom/CustomProjectContributor.java
Tests:
    "@Test
@Override
public void contribute(Path projectRoot) throws IOException {
    if (this.description instanceof CustomProjectDescription && ((CustomProjectDescription) this.description).isCustomFlag()) {
        Files.createFile(projectRoot.resolve("custom.txt"));
    }
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/documentation/HelpDocumentProjectContributorTests.java
Tests:
    "@Test
@Test
void helpDocumentEmptyDoesNotCreateFile() throws IOException {
    HelpDocument document = new HelpDocument(this.templateRenderer);
    assertThat(document.isEmpty()).isTrue();
    Path projectDir = Files.createTempDirectory(this.directory, "project-");
    new HelpDocumentProjectContributor(document).contribute(projectDir);
    Path helpDocument = projectDir.resolve("HELP.md");
    assertThat(helpDocument).doesNotExist();
}
"
    "@Test
private ListAssert<String> assertHelpDocument(HelpDocument document) throws IOException {
    Path projectDir = Files.createTempDirectory(this.directory, "project-");
    new HelpDocumentProjectContributor(document).contribute(projectDir);
    return new TextAssert(projectDir.resolve("HELP.md")).lines();
}
""""
Scenario 1: Valid path and successful contribution
TestName: verifySuccessfulContribution
Description: The test is needed to verify that the contribute function works correctly when it's provided with a valid path and all function calls execute smoothly.
Execution:
  Arrange: A valid path is provided as input.
  Act: Call the contribute function with the provided path.
  Assert: No exceptions are thrown during function execution.
Validation:
  This ensures that the contribute method functions as expected under normal operating conditions, with all required dependencies being accessible and functioning correctly.

Scenario 2: Null path is provided
TestName: verifyContributionWithNullPath
Description: This test checks that the contribute function sends the expected exception when provided with a null path as input.
Execution:
  Arrange: A null path is provided as input.
  Act: Call the contribute function with the null path.
  Assert: Expect an exception (for example NullPointerException) to be thrown.
Validation:
  This ensures that the function correctly handles null paths and maintains application stability and error handling.

Scenario 3: The source factory returns null
TestName: verifyContributionWithNullSourceFactory
Description: This test checks the behavior of the contribute function when the SourceFactory associated with it returns null.
Execution:
  Arrange: Mock the sourceFactory object to return null when the get() method is called. Input a valid path.
  Act: Call the contribute function.
  Assert: Expect an exception (for example NullPointerException) to be thrown.
Validation:
  This ensures the function correctly handles situations where the SourceFactory fails to return a valid object, maintaining application stability and error handling.

Scenario 4: An IOException occurs during the writing of source code
TestName: verifyIOExceptionHandling
Description: This test checks that an IOException thrown while writing the source code is correctly thrown by the contribute method.
Execution:
  Arrange: Mock the sourceWriter object to throw an IOException. Input a valid path.
  Act: Call the contribute function.
  Assert: Expect an IOException to be thrown.
Validation:
  This ensures the function correctly handles IOExceptions, signaling when there's an issue with the disk operation.

Scenario 5: The TestApplicationTypeCustomizer and TestSourceCodeCustomizer are null
TestName: verifyNullCustomizersHandling
Description: This test checks the behavior of contribute method when both the TestApplicationTypeCustomizer and TestSourceCodeCustomizer are null.
Execution:
  Arrange: Mock the testApplicationTypeCustomizers and the testSourceCodeCustomizers objects to return null ordered streams. Input a valid path.
  Act: Call the contribute function.
  Assert: Expect no exceptions to be thrown.
Validation:
  This ensures the function can handle situations where the TestApplicationTypeCustomizer and TestSourceCodeCustomizer are not provided, still ensuring the contribute method functions correctly.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.spring.code;

import org.junit.jupiter.api.*;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.bea.factory.ObjectProvider;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.mockito.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
import java.io.IOException;
import java.nio.file.Paths;
import java.nio.file.Path;
import io.spring.initializr.generator.project.ProjectDescription;
import io.spring.initializr.generator.language.SourceCodeWriter;
import io.spring.initializr.generator.language.CompilationUnit;
import io.spring.initializr.generator.language.SourceCode;
import java.util.function.Supplier;
import java.util.List;
import java.util.stream.Collectors;
import io.spring.initializr.generator.language.TypeDeclaration;
import io.spring.initializr.generator.project.contributor.ProjectContributor;
import io.spring.initializr.generator.spring.util.LambdaSafe;
import org.springframework.beans.factory.ObjectProvider;

@ExtendWith(SpringExtension.class)
public class TestSourceCodeProjectContributorContributeTest {

	@Mock
	private ProjectDescription description;

	@Mock
	private SourceCodeWriter sourceWriter;

	@Mock
	private Supplier sourceFactory;

	@Mock
	private ObjectProvider<TestApplicationTypeCustomizer> testApplicationTypeCustomizers;

	@Mock
	private ObjectProvider<TestSourceCodeCustomizer> testSourceCodeCustomizers;

	@InjectMocks
	private TestSourceCodeProjectContributor testSourceCodeContributor;

	@BeforeEach
	public void setup() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
	@Tag("valid")
	public void verifySuccessfulContribution() throws IOException {
		Path validPath = Paths.get("validPath");
		testSourceCodeContributor.contribute(validPath);
		verify(sourceWriter, times(1)).writeTo(any(), any());
	}

	@Test
	@Tag("invalid")
	public void verifyContributionWithNullPath() {
		Path nullPath = null;
		assertThrows(NullPointerException.class, () -> {
			testSourceCodeContributor.contribute(nullPath);
		});
	}

	@Test
	@Tag("invalid")
	public void verifyContributionWithNullSourceFactory() throws IOException {
		when(sourceFactory.get()).thenReturn(null);
		assertThrows(NullPointerException.class, () -> {
			testSourceCodeContributor.contribute(Paths.get("validPath"));
		});
	}

	@Test
	@Tag("invalid")
	public void verifyIOExceptionHandling() throws IOException {
		doThrow(IOException.class).when(sourceWriter).writeTo(any(), any());
		assertThrows(IOException.class, () -> {
			testSourceCodeContributor.contribute(Paths.get("validPath"));
		});
	}

	@Test
	@Tag("valid")
	public void verifyNullCustomizersHandling() throws IOException {
		when(testApplicationTypeCustomizers.orderedStream()).thenReturn(null);
		when(testSourceCodeCustomizers.orderedStream()).thenReturn(null);
		assertDoesNotThrow(() -> {
			testSourceCodeContributor.contribute(Paths.get("validPath"));
		});
	}

}