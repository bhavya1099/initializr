/*
 * Copyright 2012-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=toCamelCaseFormat_ded7add320
ROOST_METHOD_SIG_HASH=toCamelCaseFormat_0ccf380fd1

"""
Scenario 1: Test CamelCase formatting of a VersionProperty containing supported character and lower case letters
Details:
  TestName: toCamelCaseFormatWithSupportedCharsAndLowercaseLetters.
  Description: This test is meant to check the camelCase formatting behavior of a VersionProperty instance when all letters are exclusively in lowercase, and the present special character is either '.' or '-'.
Execution:
  Arrange: Initialize VersionProperty instance with a property containing letters in lowercase separated by either of the SUPPORTED_CHARS ('.' or '-').
  Act: Invoke the toCamelCaseFormat method.
  Assert: Compare the actual output string with the expected string in camelCase formatting.
Validation:
  Examine if the output string matches the expectation with all words in lower case except for the first character of the second word onwards, which should be in upper case. This outcome proves the capability of the method to convert strings with '.' or '-' into Camel Case Format.

Scenario 2: Test CamelCase formatting of a VersionProperty containing supported character and mix of upper, lower case letters
Details:
  TestName: toCamelCaseFormatWithSupportedCharsAndCaseMixedLetters.
  Description: This test is meant to examine the camelCase formatting behavior of a VersionProperty instance when the property contains a mix of upper and lower case letters. And the present special character is either '.' or '-'.
Execution:
  Arrange: Initialize VersionProperty instance with a property containing mixed case letters separated by either of the SUPPORTED_CHARS ('.' or '-').
  Act: Invoke the toCamelCaseFormat method.
  Assert: Compare the actual output string with the expected string in camelCase formatting.
Validation:
  Examine if the output string matches the expectation with first word in lower case and the first character of the second word onwards, in upper case. This outcome proves the capability of the method to convert strings with '.' or '-' along with mixed case letters into Camel Case Format.

Scenario 3: Test CamelCase formatting of a VersionProperty that only contains lowercase alphabets with no special characters
Details:
  TestName: toCamelCaseFormatWithOnlyLowerCaseAlphabetsNoSpecialChars.
  Description: This test is meant to check the camelCase formatting behavior of a VersionProperty instance that does not have any special characters and contains only letters in lowercase.
Execution:
  Arrange: Initialize VersionProperty instance with a property containing only letters in lowercase and no special characters.
  Act: Invoke the toCamelCaseFormat method.
  Assert: Compare the actual output string with the expected string in lowercase.
Validation:
  Examine if the output string matches the expectation with the string staying in lower case due to the absence of special characters. This outcome proves correctness of the method to handle input without any special characters or digits.

Scenario 4: Test CamelCase formatting of a null VersionProperty
Details:
  TestName: toCamelCaseFormatWithNullVersionProperty.
  Description: This test is meant to check the behavior of the toCamelCaseFormat method when it is invoked with a null VersionProperty.
Execution:
  Arrange: Initialize VersionProperty instance with a null property.
  Act: Invoke the toCamelCaseFormat method.
  Assert: Catch the NullPointerException and ensure it is thrown.
Validation:
  The assertion aims to verify handling of null VersionProperty. The occurrence of NullPointerException indicates that the method can't handle null properties.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import org.springframework.util.StringUtils;

public class VersionPropertyToCamelCaseFormatTest {

	@Test
	@Tag("valid")
	public void toCamelCaseFormatWithSupportedCharsAndLowercaseLetters() {
		VersionProperty versionProperty = VersionProperty.of("test.version");
		String actualResult = versionProperty.toCamelCaseFormat();
		String expectedResult = "testVersion";
		assertEquals(expectedResult, actualResult);
	}

	@Test
	@Tag("valid")
	public void toCamelCaseFormatWithSupportedCharsAndCaseMixedLetters() {
		VersionProperty versionProperty = VersionProperty.of("TeSt.VeRsIoN");
		String actualResult = versionProperty.toCamelCaseFormat();
		String expectedResult = "testVersion";
		assertEquals(expectedResult, actualResult);
	}

	@Test
	@Tag("valid")
	public void toCamelCaseFormatWithOnlyLowerCaseAlphabetsNoSpecialChars() {
		VersionProperty versionProperty = VersionProperty.of("testversion");
		String actualResult = versionProperty.toCamelCaseFormat();
		String expectedResult = "testversion";
		assertEquals(expectedResult, actualResult);
	}

	@Test
	@Tag("invalid")
	public void toCamelCaseFormatWithNullVersionProperty() {
		assertThrows(NullPointerException.class, () -> {
			VersionProperty versionProperty = VersionProperty.of(null);
			versionProperty.toCamelCaseFormat();
		});
	}

}