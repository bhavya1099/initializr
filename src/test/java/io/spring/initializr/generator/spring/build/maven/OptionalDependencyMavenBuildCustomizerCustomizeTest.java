/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=customize_bb113c34b3
ROOST_METHOD_SIG_HASH=customize_f56fdf334d

"""
  Scenario 1: Test Dependency Existence

  Details:
    TestName: testDependencyExists
    Description: This test checks if the given dependency ID exists. If it exists, it should add MavenDependency as an optional dependency in the build.
    Execution:
        Arrange: Create a MavenBuild object with a set of dependencies including the dependency matching the dependencyId.
        Act: Invoke the `customize` method on the `OptionalDependencyMavenBuildCustomizer` instance.
        Assert: Assert the MavenDependency added to the build is the same as the original dependency and is marked as optional.
    Validation:
        This test verifies whether the method correctly adds the dependency as an optional dependency when the dependency exists. It checks the correct functionality of the method when valid conditions are met.

  Scenario 2: Test Dependency Non-existence

  Details:
    TestName: testDependencyDoesntExist
    Description: This test attempts to customize a build for a nonexistent dependency.
    Execution:
        Arrange: Create a MavenBuild object without the dependency matching the dependencyId.
        Act: Invoke the `customize` method on the `OptionalDependencyMavenBuildCustomizer` instance.
        Assert: Assert that the size and contents of the dependencies in the build are unchanged.
    Validation:
        This scenario tests the function's behavior when the required dependency is not present. The function should exit without making any changes to the build dependencies, meeting the conditions of the if statement.

  Scenario 3: Test Multiple Dependency Instances

  Details:
    TestName: testMultipleDependencyInstances
    Description: This test validates whether the function works correctly when there are multiple dependencies in the build, including the dependency we are trying to customize.
    Execution:
        Arrange: Create a MavenBuild object with multiple dependencies, including the dependency matching the dependencyId.
        Act: Invoke the `customize` method on the `OptionalDependencyMavenBuildCustomizer` instance.
        Assert: Assert that the MavenDependency is added only once and it is marked as optional.
    Validation:
        This test checks the function's handling of a build with multiple dependencies. It should only modify the intended dependency and leave others unaltered.

  Scenario 4: Test No Dependencies in Build

  Details:
    TestName: testNoDependenciesInBuild
    Description: This test checks whether the function behaves correctly if there are no dependencies in the build.
    Execution:
        Arrange: Create an empty MavenBuild objectâ€”no dependencies.
        Act: Invoke the `customize` method on the `OptionalDependencyMavenBuildCustomizer` instance.
        Assert: Assert that the size and contents of the dependencies in the build are unchanged.
    Validation:
        This scenario checks the function's behavior when the build does not have any dependencies. The function should exit without making any changes to the build dependencies.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.spring.build.maven;

import io.spring.initializr.generator.buildsystem.Dependency;
import io.spring.initializr.generator.buildsystem.maven.MavenBuild;
import io.spring.initializr.generator.buildsystem.maven.MavenDependency;
import io.spring.initializr.generator.spring.build.maven.OptionalDependencyMavenBuildCustomizer;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import io.spring.initializr.generator.spring.build.BuildCustomizer;

class OptionalDependencyMavenBuildCustomizerCustomizeTest {

	@Test
	@Tag("valid")
	void testDependencyExists() {
		// Arrange
		String dependencyId = "testDependency";
		MavenBuild build = new MavenBuild();
		build.dependencies().add(dependencyId, Dependency.withCoordinates("group", "artifact"));
		OptionalDependencyMavenBuildCustomizer customizer = new OptionalDependencyMavenBuildCustomizer(dependencyId);

		// Act
		customizer.customize(build);

		// Assert
		Dependency dependency = build.dependencies().get(dependencyId);
		assertNotNull(dependency);
		assertTrue(((MavenDependency) dependency).isOptional());
	}

	@Test
	@Tag("invalid")
	void testDependencyDoesntExist() {
		// Arrange
		String dependencyId = "testDependency";
		MavenBuild build = new MavenBuild();
		OptionalDependencyMavenBuildCustomizer customizer = new OptionalDependencyMavenBuildCustomizer(dependencyId);

		// Act
		customizer.customize(build);

		// Assert
		Dependency dependency = build.dependencies().get(dependencyId);
		assertNull(dependency);
	}

	@Test
	@Tag("valid")
	void testMultipleDependencyInstances() {
		// Arrange
		String dependencyId = "testDependency";
		MavenBuild build = new MavenBuild();
		build.dependencies().add(dependencyId, Dependency.withCoordinates("group1", "artifact1"));
		build.dependencies().add("otherDependency", Dependency.withCoordinates("group2", "artifact2"));
		OptionalDependencyMavenBuildCustomizer customizer = new OptionalDependencyMavenBuildCustomizer(dependencyId);

		// Act
		customizer.customize(build);

		// Assert
		Dependency dependency = build.dependencies().get(dependencyId);
		assertNotNull(dependency);
		assertTrue(((MavenDependency) dependency).isOptional());
		assertEquals(2, build.dependencies().ids().size());
	}

	@Test
	@Tag("invalid")
	void testNoDependenciesInBuild() {
		// Arrange
		String dependencyId = "testDependency";
		MavenBuild build = new MavenBuild();
		OptionalDependencyMavenBuildCustomizer customizer = new OptionalDependencyMavenBuildCustomizer(dependencyId);
		// Act
		customizer.customize(build);

		// Assert
		Dependency dependency = build.dependencies().get(dependencyId);
		assertNull(dependency);
		assertTrue(build.dependencies().ids().isEmpty());
	}

}