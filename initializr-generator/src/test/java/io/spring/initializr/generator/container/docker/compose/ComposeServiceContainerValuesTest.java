/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=values_a1a2e18042
ROOST_METHOD_SIG_HASH=values_64f728a106

"""
  Scenario 1: Test to check if values of services method returns a stream of compose services

  Details:
    TestName: testIfValuesReturnStreamOfComposeServices.
    Description: Testing whether the 'values' method in ComposeServiceContainer class correctly returns a stream of services that built using Builder.
  Execution:
    Arrange: Use add method to populate the services hashmap with test data.
    Act: Invoke the 'values' method.
    Assert: Use JUnit assertions to check if returned stream contains compose services with built from the builder.
  Validation:
    If the test passes, it confirms that the method can correctly retrieve a stream of compose services. This is an important feature of the ComposeServiceContainer as it is often used to iterate over the services.

  Scenario 2: Test to check if values method returns an empty stream when services are empty

  Details:
    TestName: testIfValuesReturnEmptyStreamOnNoServices.
    Description: Ensuring that the 'values method' correctly returns an empty stream when there are no services.
  Execution:
    Arrange: No prior arrangement required as the services will be empty by default.
    Act: Invoke the 'values' method.
    Assert: Use JUnit assertions to check if returned stream is empty.
  Validation:
    The test ensures that the service respects situations where no services have been added. This maintains data integrity by avoiding errors or exceptions.

  Scenario 3: Test to check that the addition of a service enriches the values returned by the 'values' method

  Details:
    TestName: testIfValuesReturnAddedService.
    Description: Testing to ensure the 'values' method correctly includes newly added service in its returned stream.
  Execution:
    Arrange: Use add method to add a new service.
    Act: Invoke the 'values' method.
    Assert: Use JUnit assertions to check whether the returned stream, when collected to list, contains the newly added service.
  Validation:
    If the test passes, that ensures the method correctly reflects newly added services. It validates that the container class is dynamic and can adapt to changes in services.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.container.docker.compose;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.Consumer;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.util.stream.Stream;
import io.spring.initializr.generator.container.docker.compose.ComposeService.Builder;

public class ComposeServiceContainerValuesTest {

	@Test
	@Tag("valid")
	public void testIfValuesReturnStreamOfComposeServices() {
		// Arrange
		ComposeServiceContainer container = new ComposeServiceContainer();
		container.add("testService1", Builder::new);
		container.add("testService2", Builder::new);
		container.add("testService3", Builder::new);

		// Act
		var result = container.values().collect(Collectors.toList());

		// Assert
		assertNotNull(result);
		assertEquals(3, result.size());
	}

	@Test
	@Tag("valid")
	public void testIfValuesReturnEmptyStreamOnNoServices() {
		// Arrange
		ComposeServiceContainer container = new ComposeServiceContainer();

		// Act
		var result = container.values().collect(Collectors.toList());

		// Assert
		assertTrue(result.isEmpty());
	}

	@Test
	@Tag("valid")
	public void testIfValuesReturnAddedService() {
		// Arrange
		ComposeServiceContainer container = new ComposeServiceContainer();
		container.add("newlyAddedService", Builder::new);

		// Act
		var result = container.values().collect(Collectors.toList());

		// Assert
		assertTrue(result.stream().anyMatch(service -> service.getName().equals("newlyAddedService")));
	}

}