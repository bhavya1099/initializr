/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=serviceCapabilitiesFor_4bd823958e
ROOST_METHOD_SIG_HASH=serviceCapabilitiesFor_28dfd3d1a3

"""
 Scenario 1: Verifying the returned ResponseEntity object when the valid InitializrMetadataVersion and MediaType are provided

Details:
    TestName: testValidInitializrMetadataVersionAndMediaType
    Description: This test will verify if the method returns the correct ResponseEntity object in a scenario where the provided InitializrMetadataVersion and MediaType are valid and correctly dereference to a metadata instance and a content-type header.
Execution:
    Arrange: Mock the InitializrMetadataProvider to return a valid InitializrMetadata. Also, mock the createMetadataJsonMapper to return a valid metadataJSONMapper and it should write a valid JSON string.
    Act: Invoke the method serviceCapabilitiesFor providing the mocked InitializrMetadataVersion and MediaType.
    Assert: The returned ResponseEntity's body and headers should match the expected ResponseEntity object.
Validation:
    This test verifies the success scenario of the method and ensures that it returns the correct ResponseEntity object for valid inputs.

 Scenario 2: Testing the returned ResponseEntity object for an unreferenced MediaType content type

Details:
    TestName: testUnreferencedMediaType
    Description: This test will verify the behavior of the method when an unreferenced or incompatible MediaType content type is provided.
Execution:
    Arrange: Mock the InitializrMetadataProvider to return a valid InitializrMetadata.
    Act: Invoke the method serviceCapabilitiesFor providing valid InitializrMetadataVersion and provide an unreferenced or incompatible MediaType content type.
    Assert: An exception is expected during the execution of this method.
Validation:
    This test verifies that if an unreferenced or incompatible MediaType content type is provided the method throws an appropriate exception.

 Scenario 3: Testing the method behavior when an invalid InitializrMetadataVersion provided

Details:
    TestName: testInvalidInitializrMetadataVersion
    Description: This test will make sure that the method behaves correctly when an invalid version of the InitializrMetadata is provided.
Execution:
    Arrange: No need to mock as we are providing invalid inputs.
    Act: Invoke the method serviceCapabilitiesFor and provide an invalid InitializrMetadataVersion and a valid MediaType content type.
    Assert: An exception is expected during the execution of this method.
Validation:
    This test ensures the method's robustness in handling invalid InitializrMetadataVersion, i.e., it should throw an appropriate exception for invalid inputs.

 Scenario 4: Testing the method for null inputs

Details:
    TestName: testNullInputs
    Description: This test will verify how the method behaves when null inputs are given for both the InitializrMetadataVersion and MediaType.
Execution:
    Arrange: No need to mock simply invoke the method with null inputs.
    Act: Invoke the serviceCapabilitiesFor method with NULL for both InitializrMetadataVersion and MediaType.
    Assert: An exception is expected during the execution of this method.
Validation:
    This test verifies that the method can handle null inputs and correctly throws the appropriate exception.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.controller;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.BDDMockito.given;
import org.springframework.http.MediaType;
import io.spring.initializr.metadata.DependencyMetadataProvider;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.web.mapper.DependencyMetadataJsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataJsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.DependencyMetadataV21JsonMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.ResponseEntity;
import io.spring.initializr.web.mapper.InitializrMetadataVersion;
import org.springframework.http.CacheControl;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.*;
import java.io.IOException;
import io.spring.initializr.generator.version.Version;
import io.spring.initializr.metadata.DependencyMetadata;
import io.spring.initializr.metadata.InitializrConfiguration.Platform;
import io.spring.initializr.metadata.InvalidInitializrMetadataException;
import io.spring.initializr.web.mapper.InitializrMetadataV22JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV2JsonMapper;
import io.spring.initializr.web.project.InvalidProjectRequestException;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

public class ProjectMetadataControllerServiceCapabilitiesForTest {

	@Mock
	InitializrMetadataProvider metadataProvider;

	@Mock
	DependencyMetadataProvider dependencyMetadataProvider;

	@InjectMocks
	ProjectMetadataController controller;

	@BeforeEach
	void setUp() {
		MockitoAnnotations.initMocks(this);
	}

	@Test
    @Tag("valid")
    public void testValidInitializrMetadataVersionAndMediaType() {
        MockingSetup:
        InitializrMetadata metadata = new InitializrMetadata();
        when(this.metadataProvider.get()).thenReturn(metadata);
        InitializrMetadataJsonMapper mockMapper = mock(InitializrMetadataV21JsonMapper.class);
        when(mockMapper.write(any(), any())).thenReturn("testJsonResponse");

        Act:
        ResponseEntity<String> response = controller.serviceCapabilitiesFor(InitializrMetadataVersion.V2_2, MediaType.APPLICATION_JSON);

        Assert:
        assertNotNull(response);
        assertEquals("testJsonResponse", response.getBody());
        assertEquals(MediaType.APPLICATION_JSON, response.getHeaders().getContentType());
    }

	@Test
    @Tag("invalid")
    public void testUnreferencedMediaType() {
       MockingSetup:
       InitializrMetadata metadata = new InitializrMetadata();
       when(this.metadataProvider.get()).thenReturn(metadata);
         Act :
        IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
            ResponseEntity<String> response = controller.serviceCapabilitiesFor(InitializrMetadataVersion.V2_2, MediaType.TEXT_PLAIN);
        });

        Assert:
        assertEquals("Unsupported content type: text/plain", exception.getMessage());
    }

	@Test
    void testInvalidInitializrMetadataVersion() {
        MockingSetup:
        InitializrMetadata metadata = new InitializrMetadata();
        when(this.metadataProvider.get()).thenReturn(metadata);

        Act:
        ResponseEntity<String> response = controller.serviceCapabilitiesFor(InitializrMetadataVersion.INVALID, MediaType.APPLICATION_JSON);

        Assert:
        assertEquals(400, response.getStatusCodeValue());
        assertEquals("Bad Request", response.getBody());
    }

	@Test
    @Tag("boundary")
    public void testNullInputs() {
       MockingSetup:
       InitializrMetadata metadata = new InitializrMetadata();
       when(this.metadataProvider.get()).thenReturn(metadata);

       Act:
       IllegalArgumentException exception = assertThrows(IllegalArgumentException.class, () -> {
            ResponseEntity<String> response = controller.serviceCapabilitiesFor(null, null);
        });

        Assert:
        assertEquals("The provided InitializrMetadataVersion and MediaType cannot be null", exception.getMessage());
    }

}