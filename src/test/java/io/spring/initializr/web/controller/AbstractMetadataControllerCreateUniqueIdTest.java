/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=createUniqueId_8fa91d0557
ROOST_METHOD_SIG_HASH=createUniqueId_30c760a911

"""
 Scenario 1: Test to check Unique ID creation for valid input.

  Details:
    TestName: testCreateUniqueIdWithValidContent.
    Description: This scenario tests whether the createUniqueId method generates correct IDs in case valid inputs are given.
  Execution:
    Arrange: Provide a valid 'content' string.
    Act: Invoke the createUniqueId with the 'content' string.
    Assert: Check whether the returned String is a valid MD5 hash of the given 'content' string.
  Validation:
    This scenario aims to ensure that a correct MD5 hash is generated for the given 'content' string. It forms the basis of checking whether the method works fine with valid inputs.

Scenario 2: Test to check ID creation with content string whitespace.

  Details:
    TestName: testCreateUniqueIdWithWhitespace.
    Description: This scenario checks the createUniqueId's functionality with leading, trailing, or intermediate whitespaces in the input string.
  Execution:
    Arrange: Provide content strings with whitespaces.
    Act: Call the createUniqueId method with the provided strings.
    Assert: Check whether the returned IDs are the valid MD5 hashes of corresponding strings. The hash should get computed as if they don't include any leading, trailing, or intermediate spaces.
  Validation:
    This test ensures that the createUniqueId function is capable of handling content strings with spaces, confirming the reliability of its created unique identifiers.

Scenario 3: Test to check handling of empty content strings.

  Details:
    TestName: testCreateUniqueIdWithEmptyString.
    Description: This scenario checks if the createUniqueId method can handle empty strings correctly.
  Execution:
    Arrange: Provide an empty 'content' string.
    Act: Call the createUniqueId method with the empty string.
    Assert: Check whether the returned String is a valid MD5 hash for the empty string.
  Validation:
    This test aims to ensure that the createUniqueId function works correctly for edge cases where an empty string is passed as input.

Scenario 4: Test to check handling of null content strings.

  Details:
    TestName: testCreateUniqueIdWithNullInput.
    Description: This scenario checks if the createUniqueId handles null values correctly.
  Execution:
    Arrange: Provide a null 'content' string.
    Act: Call the createUniqueId method with the null 'content' string.
    Assert: An exception (NullPointerException) should be thrown since null values can't be processed to MD5 hash.
  Validation:
    This scenario aims to ensure that the createUniqueId function handles edge cases properly, especially in the instance of passing null inputs, where the resultant behavior should ideally be the throwing of an exception.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.controller;

import io.spring.initializr.metadata.InitializrMetadataProvider;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.springframework.util.DigestUtils;
import java.nio.charset.StandardCharsets;
import org.junit.jupiter.api.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

public class AbstractMetadataControllerCreateUniqueIdTest {

	private AbstractMetadataController controller;

	@BeforeEach
	public void beforeEach() {
		InitializrMetadataProvider metadataProvider = null; // TODO: Add appropriate
															// object.
		controller = new AbstractMetadataController(metadataProvider);
	}

	@Test
	@Tag("valid")
	public void testCreateUniqueIdWithValidContent() {
		String content = "validContent";
		String expected = DigestUtils.md5DigestAsHex(content.getBytes(StandardCharsets.UTF_8));
		String actual = controller.createUniqueId(content);
		Assertions.assertEquals(expected, actual);
	}

	@Test
	@Tag("valid")
	public void testCreateUniqueIdWithWhitespace() {
		String content = " content with white space ";
		String expected = DigestUtils.md5DigestAsHex(content.getBytes(StandardCharsets.UTF_8));
		String actual = controller.createUniqueId(content);
		Assertions.assertEquals(expected, actual);
	}

	@Test
	@Tag("boundary")
	public void testCreateUniqueIdWithEmptyString() {
		String content = "";
		String expected = DigestUtils.md5DigestAsHex(content.getBytes(StandardCharsets.UTF_8));
		String actual = controller.createUniqueId(content);
		Assertions.assertEquals(expected, actual);
	}

	@Test
	@Tag("invalid")
	public void testCreateUniqueIdWithNullInput() {
		Assertions.assertThrows(NullPointerException.class, () -> {
			controller.createUniqueId(null);
		});
	}

}