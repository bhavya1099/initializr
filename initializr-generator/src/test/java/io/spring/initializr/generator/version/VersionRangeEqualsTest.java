/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=equals_1d72c3344d
ROOST_METHOD_SIG_HASH=equals_f4eca31364

"""
Scenario 1: Test to validate equality of identical VersionRange objects

Details:
  TestName: equalsWithIdenticalObjects
  Description: This test will check the "equals" method behavior when two identical VersionRange objects are compared.
Execution:
  Arrange: Create two identical version ranges using the same parameters (lowerVersion, lowerInclusive, higherVersion, higherInclusive).
  Act: Invoke the "equals" method by passing one version range object to the other.
  Assert: AssertTrue as identical objects should be equal.
Validation:
  The test verifies that the "equals" method correctly identifies objects as equal if they are identical. It ensures that basic object equality is correctly implemented.

Scenario 2: Test to validate equality of different VersionRange objects

Details:
  TestName: equalsWithDifferentObjects
  Description: This test will check the "equals" method behavior when two different VersionRange objects are compared.
Execution:
  Arrange: Create two version range objects with different values for (lowerVersion, lowerInclusive, higherVersion, higherInclusive).
  Act: Invoke the "equals" method by passing one version range object to the other.
  Assert: AssertFalse as objects with different attributes should not be equal.
Validation:
  The test verifies that the "equals" method correctly recognizes that objects with different properties are not equal. This underpins correct behaviour in collections and comparisons.

Scenario 3: Test to validate equality against null

Details:
  TestName: equalsAgainstNull
  Description: This test will check the "equals" method's behavior when the comparison is made against null.
Execution:
  Arrange: Create a VersionRange object.
  Act: Invoke the "equals" method by passing a null reference to the object.
  Assert: AssertFalse as an object is not equal to null.
Validation:
  The test verifies that the "equals" method behaves correctly when null is passed as a parameter. It ensures that the method does not throw any exceptions and handles nulls correctly.

Scenario 4: Test to validate equality with different object types

Details:
  TestName: equalsWithDifferentTypes
  Description: This test will check the "equals" method behavior when the comparison is made with an object of a different type.
Execution:
  Arrange: Create a VersionRange object and an object of a different type.
  Act: Invoke the "equals" method by passing the object of a different type to the VersionRange object.
  Assert: AssertFalse because objects of different types are not equal.
Validation:
  The method should return false when comparing to an instance of a different class. This test ensures that the "equals" method behaves correctly when attempting to compare dissimilar types.
""",
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import io.spring.initializr.generator.version.Version;
import io.spring.initializr.generator.version.VersionRange;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.*;
import io.spring.initializr.generator.version.Version.Format;
import org.springframework.util.Assert;

public class VersionRangeEqualsTest {

	@Test
	@Tag("valid")
	public void equalsWithIdenticalObjects() {
		Version version1 = new Version(1, 2, 3);
		Version version2 = new Version(4, 5, 6);
		VersionRange range1 = new VersionRange(version1, true, version2, true);
		VersionRange range2 = new VersionRange(version1, true, version2, true);
		assertTrue(range1.equals(range2));
	}

	@Test
	@Tag("invalid")
	public void equalsWithDifferentObjects() {
		Version version1 = new Version(1, 2, 3);
		Version version2 = new Version(4, 5, 6);
		VersionRange range1 = new VersionRange(version1, true, version2, true);
		VersionRange range2 = new VersionRange(version2, true, version1, true);
		assertFalse(range1.equals(range2));
	}

	@Test
	@Tag("boundary")
	public void equalsAgainstNull() {
		Version version1 = new Version(1, 2, 3);
		Version version2 = new Version(4, 5, 6);
		VersionRange range = new VersionRange(version1, true, version2, true);
		assertFalse(range.equals(null));
	}

	@Test
	@Tag("invalid")
	public void equalsWithDifferentTypes() {
		Version version1 = new Version(1, 2, 3);
		Version version2 = new Version(4, 5, 6);
		VersionRange range = new VersionRange(version1, true, version2, true);
		String differentType = "A different type";
		assertFalse(range.equals(differentType));
	}

}