/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=toString_a3b625e043
ROOST_METHOD_SIG_HASH=toString_bbffdadaa2

"""
  Scenario 1: Test toString with property being not null

  Details:
    TestName: testToStringScenarioWithNonNullProperty.
    Description: This test is meant to check the output of the toString method when the property is not null.
  Execution:
    Arrange: Create an instance of VersionReference using the ofProperty method with non-null property.
    Act: Invoke the toString method on the instance.
    Assert: Use JUnit assertions to compare the actual result against the expected '`${<property_To_Standard_Format>}`'.
  Validation:
    The assertion aims to verify the correct formatting of the toString method when the property is not null. This test ensures that the program is behaving as expected when handling a non-null property value.

  Scenario 2: Test toString with property being null

  Details:
    TestName: testToStringScenarioWithNullProperty.
    Description: This test checks the output of the toString method when the property is null.
  Execution:
    Arrange: Create an instance of VersionReference using the ofValue method with a non-null value.
    Act: Invoke the toString method on the instance.
    Assert: Use JUnit assertions to compare the actual result against the expected value.
  Validation:
    This assertion verifies the correct output of the toString method when the property is null and value is non-null. It validates the method's ability to handle cases where the property is null.

  Scenario 3: Test toString with both property and value being null

  Details:
    TestName: testToStringScenarioWithNullPropertyAndValue.
    Description: This test is meant to validate the toString method's output when both property and value are null.
  Execution:
    Arrange: Create an instance of VersionReference using its constructor with null property and value.
    Act: Invoke the toString method on the instance.
    Assert: Use JUnit assertions to compare the actual result against the expected null.
  Validation:
    The assertion aims to verify the correct behavior of the toString method when both property and value are null. It demonstrates the ability of the method to handle error conditions and edge cases.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.*;
import java.util.Objects;

public class VersionReferenceToStringTest {

	@Test
	@Tag("valid")
	public void testToStringScenarioWithNonNullProperty() {
		VersionProperty property = VersionProperty.of("someProperty");
		VersionReference reference = VersionReference.ofProperty(property);
		String expected = "${" + property.toStandardFormat() + "}";
		String actual = reference.toString();
		Assertions.assertEquals(expected, actual, "The actual value does not match the expected value.");
	}

	@Test
	@Tag("valid")
	public void testToStringScenarioWithNullProperty() {
		String value = "someValue";
		VersionReference reference = VersionReference.ofValue(value);
		String expected = value;
		String actual = reference.toString();
		Assertions.assertEquals(expected, actual, "The actual value does not match the expected value.");
	}

	@Test
	@Tag("boundary")
	public void testToStringScenarioWithNullPropertyAndValue() {
		VersionReference reference = new VersionReference(null, null);
		String expected = null;
		String actual = reference.toString();
		Assertions.assertEquals(expected, actual, "The actual value does not match the expected value.");
	}

}