/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getProjectRequest_4deadfa269
ROOST_METHOD_SIG_HASH=getProjectRequest_42c43c1c93

"""
  Scenario 1: Test that retrieved ProjectRequest is null when no ProjectRequest has been set

  Details:
    TestName: testGetProjectRequestWhenNotSet.
    Description: This will test that the getProjectRequest method correctly returns null when no ProjectRequest has been set by using the InitializrMetadata and timestamp fields only.
  Execution:
    Arrange: Create an instance of the ProjectRequestEvent with null request, some InitializrMetadata and timestamp.
    Act: Invoke getProjectRequest() method on the instance.
    Assert: Assert if returned project request is null.
  Validation:
    This will validate that the method correctly retrieves the value stored in the request field. If there is no ProjectRequest initialized, the expected return is null. This is consistent with the business logic expectations.

  Scenario 2: Test that the retrieved ProjectRequest is the one set at the creation of the ProjectRequestEvent

  Details:
    TestName: testGetProjectRequestWhenSet.
    Description: This is to validate that the getProjectRequest correctly retrieves the ProjectRequest that has been set in the ProjectRequestEvent.
  Execution:
    Arrange: Create an instance of the ProjectRequestEvent with a specific ProjectRequest, some InitializrMetadata, and timestamp.
    Act: Use the getProjectRequest() method on the instance.
    Assert: Assert if the returned value of the request equals to the ProjectRequest set at the creation.
  Validation:
    This assertion checks if the ProjectRequest retrieved equals to the one set at the initial creation. This is crucial for ensuring the consistency and integrity of the data in the class as per the business logic.

  Scenario 3: Test if getProjectRequest gives correct response for multiple calls

  Details:
    TestName: testGetProjectRequestOnMultipleCalls.
    Description: This test aims to validate that the method getProjectRequest provides a consistent result on multiple calls, given that the ProjectRequestEvent instance remains the same.
  Execution:
    Arrange: Create a ProjectRequestEvent instance with a specific ProjectRequest, some InitializrMetadata, and timestamp.
    Act: Use getProjectRequest() method on the instance multiple times.
    Assert: Assert if the result of getProjectRequest() is the same for all calls.
  Validation:
    This assertion ensures that getProjectRequest produces consistent results across multiple calls, which is essential for ensuring reliability in software systems as per business logic demands.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.project;

import io.spring.initializr.metadata.InitializrMetadata;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.*;
import org.junit.jupiter.api.*;

public class ProjectRequestEventGetProjectRequestTest {

	@Test
	@Tag("invalid")
	public void testGetProjectRequestWhenNotSet() {
		InitializrMetadata initializrMetadata = mock(InitializrMetadata.class);
		ProjectRequestEvent projectRequestEvent = new ProjectRequestEvent(null, initializrMetadata);
		ProjectRequest request = projectRequestEvent.getProjectRequest();
		assertNull(request, "Project request should be null when not set.");
	}

	@Test
	@Tag("valid")
	public void testGetProjectRequestWhenSet() {
		InitializrMetadata initializrMetadata = mock(InitializrMetadata.class);
		ProjectRequest expectedRequest = mock(ProjectRequest.class);
		ProjectRequestEvent projectRequestEvent = new ProjectRequestEvent(expectedRequest, initializrMetadata);
		ProjectRequest request = projectRequestEvent.getProjectRequest();
		assertEquals(expectedRequest, request, "Retrieved ProjectRequest is not the same as the one set.");
	}

	@Test
	@Tag("valid")
	public void testGetProjectRequestOnMultipleCalls() {
		InitializrMetadata initializrMetadata = mock(InitializrMetadata.class);
		ProjectRequest expectedRequest = mock(ProjectRequest.class);
		ProjectRequestEvent projectRequestEvent = new ProjectRequestEvent(expectedRequest, initializrMetadata);
		ProjectRequest request1 = projectRequestEvent.getProjectRequest();
		ProjectRequest request2 = projectRequestEvent.getProjectRequest();
		assertEquals(expectedRequest, request1, "First call to getProjectRequest did not return the correct request.");
		assertEquals(expectedRequest, request2, "Second call to getProjectRequest did not return the correct request.");
		assertEquals(request1, request2, "Multiple calls to getProjectRequest returned inconsistent results.");
	}

}