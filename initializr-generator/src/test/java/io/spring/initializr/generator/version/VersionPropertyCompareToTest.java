/*
 * Copyright 2012-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=compareTo_56aba6d64f
ROOST_METHOD_SIG_HASH=compareTo_a426e303a2

"""
  Scenario 1: Check "compareTo" method when two properties are the same

  Details:
    TestName: compareSameProperties
    Description: This test scenario checks the compareTo method when both properties being compared are the same.
  Execution:
    Arrange: Instantiate two VersionProperty instances with the same "property".
    Act: Use the compareTo method to compare the two VersionProperty instances.
    Assert: Verify that result is 0 because both properties are equal.
  Validation:
    The assertion checks that the method returns 0 when comparing two equal properties. This means that the properties are equal.

  Scenario 2: Check "compareTo" method when first property precedes the second one alphabetically

  Details:
    TestName: compareFirstPropertyPrecedes
    Description: This test scenario checks the compareTo method when the first property precedes the second one alphabetically.
  Execution:
    Arrange: Instantiate two VersionProperty instances with two different "property", where the first instance's property precedes the second one lexicographically.
    Act: Use the compareTo method to compare the two VersionProperty instances.
    Assert: Verify that result is a negative integer because first property precedes the second one.
  Validation:
    The assertion checks that the method returns a negative integer when the first property precedes the second one. This means that the first property is lexically less than the second property.

  Scenario 3: Check "compareTo" method when second property precedes the first one alphabetically

  Details:
    TestName: compareSecondPropertyPrecedes
    Description: This test scenario checks the compareTo method when the second property precedes the first one alphabetically.
  Execution:
    Arrange: Instantiate two VersionProperty instances with two different "property", where the second instance's property precedes the first one lexicographically.
    Act: Use the compareTo method to compare the two VersionProperty instances.
    Assert: Verify that result is a positive integer because second property precedes the first one.
  Validation:
    The assertion checks that the method returns a positive integer when the second property precedes the first one. This means that the second property is lexically less than the first property.
""",
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import org.springframework.util.StringUtils;

public class VersionPropertyCompareToTest {

	@Test
	@Tag("valid")
	public void compareSameProperties() {
		VersionProperty versionProperty1 = VersionProperty.of("property", true);
		VersionProperty versionProperty2 = VersionProperty.of("property", true);
		int isSame = versionProperty1.compareTo(versionProperty2);
		assertEquals(0, isSame, "compareTo method should return 0 when same properties are compared");
	}

	@Test
	@Tag("valid")
	public void compareFirstPropertyPrecedes() {
		VersionProperty versionProperty1 = VersionProperty.of("apple", true);
		VersionProperty versionProperty2 = VersionProperty.of("orange", true);
		int result = versionProperty1.compareTo(versionProperty2);
		assertTrue(result < 0,
				"compareTo method should return a negative integer when first property precedes the second one alphabetically");
	}

	@Test
	@Tag("valid")
	public void compareSecondPropertyPrecedes() {
		VersionProperty versionProperty1 = VersionProperty.of("orange", true);
		VersionProperty versionProperty2 = VersionProperty.of("apple", true);
		int result = versionProperty1.compareTo(versionProperty2);

		assertTrue(result > 0,
				"compareTo method should return a positive integer when second property precedes the first one alphabetically");
	}

}