/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=add_bfda50d955
ROOST_METHOD_SIG_HASH=add_933e54acc9

"""
Scenario 1: Test to Check if the Service is added properly

Details:
  TestName: addServiceSuccessfully
  Description: Verify if the function 'add' successfully adds the provided service with the given name to the services map.
Execution:
  Arrange: Provide a name and a service. Ensure the service map is empty initially.
  Act:  Invoke the 'add' type: method with the provided name and service parameters.
  Assert: Check using 'has' method if the service with the given name exists in the services map.
Validation:
  Assertion here is to verify the added service with the given name exists in the services. The expected result is 'true', which confirms the service is added successfully with the provided name. If we have add method working correctly, we can transparently manage services.

Scenario 2: Test to Check if the Same Service is Overridden

Details:
  TestName: overrideSameNamedService
  Description: Validate that when adding with the same service name, the new service should override the existing one.
Execution:
  Arrange: Provide a name and two different services. Ensure the service map is empty initially.
  Act:  Invoke the 'add' method with the provided name and first service, and again invoke 'add' with the same name and second service.
  Assert: Check using 'values' method if the second service exists and first service doesn't in the services map.
Validation:
  Assertion aims to validate that the second service overrides the first service when both services have the same name. The expected result is 'true' for second service existence and 'false' for first service existence which confirms the replacement of services based on the name in our management.

Scenario 3: Test to Check if Empty Name is Provided

Details:
  TestName: provideEmptyNameForService
  Description: Validate that when trying to add a service with an empty name, an appropriate error should be thrown.
Execution:
  Arrange: Provide an empty name and a service. Ensure the service map is empty initially.
  Act:  Invoke the 'add' method with the empty name and provided service.
  Assert: Catch and Assert expected error or Exception.
Validation:
  The purpose of assertion here is to validate the method's way of handling edge case scenarios, such as when an empty name is provided. The expected outcome is an Exception or some error, which should bring attention to the empty input. This ensures the robustness of the code in handling edge cases.

Scenario 4: Test to check if null Service is Provided

Details:
  TestName: provideNullService
  Description: Validate that the method handles the situation when a null service is provided correctly.
Execution:
  Arrange: Provide a name and a null service. Ensure the service map is empty initially.
  Act:  Invoke the 'add' method with the provided name and null service.
  Assert: Catch and Assert expected error or Exception.
Validation:
  Assertion aims to validate the method's way of handling edge case scenarios such as when null service is provided. The expected outcome is an Exception or some error should be thrown, which should notify the improper service input ensuring code robustness in handling edge cases.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.container.docker.compose;

import java.util.function.Consumer;
import java.util.Optional;
import java.util.stream.Stream;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.*;
import org.mockito.Mockito;
import io.spring.initializr.generator.container.docker.compose.ComposeService.Builder;
import org.junit.jupiter.api.*;
import java.util.LinkedHashMap;
import java.util.Map;

public class ComposeServiceContainerAddTest {

	@Test
	@Tag("valid")
	public void addServiceSuccessfully() {
		ComposeServiceContainer container = new ComposeServiceContainer();
		String serviceName = "web";
		Builder webService = new Builder();
		container.add(serviceName, b -> webService);
		assertTrue(container.has(serviceName));
	}

	@Test
	@Tag("valid")
	public void overrideSameNamedService() {
		ComposeServiceContainer container = new ComposeServiceContainer();
		String serviceName = "web";
		Builder webService1 = new Builder();
		Builder webService2 = new Builder();
		container.add(serviceName, b -> webService1);
		container.add(serviceName, b -> webService2);
		Stream<ComposeService> services = container.values();
		assertTrue(services.anyMatch(service -> service.equals(webService2.build())));
		assertFalse(services.anyMatch(service -> service.equals(webService1.build())));
	}

	@Test
	@Tag("invalid")
	public void provideEmptyNameForService() {
		ComposeServiceContainer container = new ComposeServiceContainer();
		String serviceName = "";
		Builder webService = new Builder();
		Exception exception = assertThrows(IllegalArgumentException.class, () -> {
			container.add(serviceName, b -> webService);
		});
		assertTrue(exception.getMessage().contains("Service name cannot be empty"));
	}

	@Test
	@Tag("boundary")
	public void provideNullService() {
		ComposeServiceContainer container = new ComposeServiceContainer();
		String serviceName = "web";
		Exception exception = assertThrows(NullPointerException.class, () -> {
			container.add(serviceName, null);
		});
		assertTrue(exception.getMessage().contains("Service cannot be null"));
	}

}