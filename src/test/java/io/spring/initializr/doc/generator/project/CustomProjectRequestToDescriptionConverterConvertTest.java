/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=convert_b1cb36a8e4
ROOST_METHOD_SIG_HASH=convert_390a89183f

"""
Scenario 1: Convert method returning mutable project description object

TestName: convertMethodReturnsObject
Description: This test is meant to check if the convert() method is properly returning the MutableProjectDescription object.
Execution:
  Arrange: Create a mock object for CustomProjectRequest and InitializrMetadata and pass it to the convert() method.
  Act: Invoke the convert() method in CustomProjectRequestToDescriptionConverter class with the mock objects for applied parameters.
  Assert: Use JUnit assertions to check if the returned object is an instance of MutableProjectDescription class.
Validation:
  The assertion aims to verify that the convert() is returning the correct object type. As per the implemented method, it should always return a new MutableProjectDescription object regardless of the given parameters.

Scenario 2: Validate Non-null return value from the convert method

TestName: validateNonNullReturnFromConvert
Description: This test is meant to validate that the convert method does not return a null value.
Execution:
  Arrange: Create a mock object for CustomProjectRequest and InitializrMetadata.
  Act: Invoke the convert method in CustomProjectRequestToDescriptionConverter class with the mock objects as parameters.
  Assert: Use JUnit assertions to check if the output returned by the convert() method is not null.
Validation:
  The assertion verifies the non-null output from the convert method. The test is significant to ensure that the application does not break due to null object reference, even in edge cases.

Scenario 3: CustomProjectRequest or InitializrMetadata as Null

TestName: convertMethodWithNullParameters
Description: This test is meant to check whether the application handles null parameters gracefully without throwing an exception.
Execution:
  Arrange: Pass null as the parameters to the convert() method.
  Act: Invoke the convert() method in CustomProjectRequestToDescriptionConverter class with null parameters.
  Assert: Use JUnit assertions to check if the convert() method returns a new instance of MutableProjectDescription.
Validation:
  The assertion aims to verify that even if null parameters are passed, the convert() method does not throw a NullPointerException but returns a new instance of MutableProjectDescription.
"""
*/

// ********RoostGPT********

package io.spring.initializr.doc.generator.project;

import io.spring.initializr.generator.project.MutableProjectDescription;
import io.spring.initializr.generator.project.ProjectDescription;
import io.spring.initializr.generator.project.ProjectGenerationController;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.web.controller.ProjectGenerationController;
import io.spring.initializr.web.project.ProjectGenerationInvoker;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.web.project.ProjectRequestToDescriptionConverter;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@ExtendWith(MockitoExtension.class)
class CustomProjectRequestToDescriptionConverterConvertTest {

	private CustomProjectGenerationConfigurationExample.CustomProjectRequestToDescriptionConverter converter;

	@Mock
	private CustomProjectRequest request;

	@Mock
	private InitializrMetadata metadata;

	@BeforeEach
	void setUp() {
		CustomProjectGenerationConfigurationExample configExample = new CustomProjectGenerationConfigurationExample();
		converter = configExample.new CustomProjectRequestToDescriptionConverter();
	}

	@Test
	@Tag("valid")
	void convertMethodReturnsObject() {
		ProjectDescription description = converter.convert(request, metadata);
		assertTrue(description instanceof MutableProjectDescription);
	}

	@Test
	@Tag("valid")
	void validateNonNullReturnFromConvert() {
		ProjectDescription description = converter.convert(request, metadata);
		assertNotNull(description);
	}

	@Test
	@Tag("boundary")
	void convertMethodWithNullParameters() {
		ProjectDescription description = converter.convert(null, null);
		assertTrue(description instanceof MutableProjectDescription);
	}

}