/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=equals_26d745efe8
ROOST_METHOD_SIG_HASH=equals_ded257778a

"""
  Scenario 1: Validating equals method by comparing the same reference.

  Details:
    TestName: testSortingSameReference
    Description: This test ensures that the equals method returns true when we compare the same reference of VersionReference.
  Execution:
    Arrange: Create a VersionReference object.
    Act: Invoke the equals method by passing the same reference.
    Assert: Assert that the equals method returns true.
  Validation:
    The equals method should return true when we compare the same reference because in this case both references point to the same object.

  Scenario 2: Validating equals method with a null reference.

  Details:
    TestName: testSortingWithNullReference
    Description: This test validates the equals method by passing a null reference.
  Execution:
    Arrange: Create a VersionReference object.
    Act: Invoke the equals method by passing null.
    Assert: Assert that the equals method returns false.
  Validation:
    The equals method should return false because a valid object can never be equal to null.

  Scenario 3: Validating equals method with an object of a different class.

  Details:
    TestName: testSortingWithDifferentClassObject
    Description: This test validates the equals method by passing an object that is not an instance of VersionReference.
  Execution:
    Arrange: Create a VersionReference object and an object of another class.
    Act: Invoke the equals method by passing the object of a different class.
    Assert: Assert that the equals method returns false.
  Validation:
    The equals method should return false because the object is not an instance of VersionReference. An object of a different class can never be equal to an object of VersionReference.

  Scenario 4: Validating equals method with two VersionReference objects that have different properties.

  Details:
    TestName: testSortingWithDifferentProperties
    Description: This test checks the equals method by passing a VersionReference object with a different property.
  Execution:
    Arrange: Create two VersionReference objects with different properties.
    Act: Invoke the equals method by passing the VersionReference object with the different property.
    Assert: Assert that the equals method returns false.
  Validation:
    The equals method should return false because the properties of the two VersionReference objects are different. Even though they are instances of the same class, their properties are not the same.

  Scenario 5: Validating equals method with two VersionReference objects that have the same properties.

  Details:
    TestName: testSortingWithSameProperties
    Description: This test will verify that when two VersionReference objects with the same properties are compared, the equals method returns true.
  Execution:
    Arrange: Create two VersionReference objects using same properties.
    Act: Invoke the equals method by passing the VersionReference object with the same properties.
    Assert: Assert that the equals method returns true.
  Validation:
    The equals method should return true because both VersionReference objects have the same properties. Even though they are two different references, they contain the same data.
""",
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.*;
import java.util.Objects;

public class VersionReferenceEqualsTest {

	private VersionProperty versionProperty1 = VersionProperty.of("property1", true);

	private VersionProperty versionProperty2 = VersionProperty.of("property2", true);

	@Test
	@Tag("valid")
	public void testSortingSameReference() {
		VersionReference versionReference1 = VersionReference.ofProperty(versionProperty1);
		Assertions.assertTrue(versionReference1.equals(versionReference1));
	}

	@Test
	@Tag("invalid")
	public void testSortingWithNullReference() {
		VersionReference versionReference1 = VersionReference.ofProperty(versionProperty1);
		Assertions.assertFalse(versionReference1.equals(null));
	}

	@Test
	@Tag("invalid")
	public void testSortingWithDifferentClassObject() {
		VersionReference versionReference1 = VersionReference.ofProperty(versionProperty1);
		Object object = new Object();
		Assertions.assertFalse(versionReference1.equals(object));
	}

	@Test
	@Tag("boundary")
	public void testSortingWithDifferentProperties() {
		VersionReference versionReference1 = VersionReference.ofProperty(versionProperty1);
		VersionReference versionReference2 = VersionReference.ofProperty(versionProperty2);
		Assertions.assertFalse(versionReference1.equals(versionReference2));
	}

	@Test
	@Tag("valid")
	public void testSortingWithSameProperties() {
		VersionReference versionReference1 = VersionReference.ofProperty(versionProperty1);
		VersionReference versionReference3 = VersionReference.ofProperty(versionProperty1);
		Assertions.assertTrue(versionReference1.equals(versionReference3));
	}

}