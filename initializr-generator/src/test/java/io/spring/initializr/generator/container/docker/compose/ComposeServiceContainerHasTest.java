/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=has_0e92d45001
ROOST_METHOD_SIG_HASH=has_eea2a7d1c0

"""
 Scenario 1: Map contains the provided key

  Details:
    TestName: mapContainsProvidedKey
    Description: This test is meant to check if the method returns true when the provided key (name) is present in the services map.
  Execution:
    Arrange: Add a service to the services map using the add() method with the key 'service1'.
    Act: Invoke the has() method with 'service1' as the parameter.
    Assert: Use JUnit assertions to verify that has() returns true.
  Validation:
    The assertion aims to verify that the has() method correctly identifies when a key is present in the services map. If the provided key 'service1' is present in the services map, the has(String name) method should return true.

 Scenario 2: Map does not contain the provided key

  Details:
    TestName: mapDoesNotContainProvidedKey
    Description: The test is meant to check if the method returns false when the provided key (name) is not present in the services map.
  Execution:
    Arrange: Add a service to the services map using the add() method with the key 'service1'.
    Act: Invoke the has() method with 'service2' as the parameter.
    Assert: Use JUnit assertions to verify that the has() method returns false.
  Validation:
    The assertion focuses on verifying that the has() method correctly identifies when a key is not present in the services map. If the provided key 'service2' is not present, the has(String name) method should return false.

 Scenario 3: Map is empty

  Details:
    TestName: mapIsEmpty
    Description: The test is meant to verify if the method returns false if the services map is empty.
  Execution:
    Arrange: No need to add any services to the map since it's empty.
    Act: Invoke the has() method with 'service1' as the parameter.
    Assert: Use JUnit assertions to verify that the has() method returns false.
  Validation:
    The assertion aims to verify that the has() method correctly identifies when the services map is empty. If no key is present in the services map, the has(String name) method should return false.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.container.docker.compose;

import java.util.function.Consumer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.stream.Stream;
import io.spring.initializr.generator.container.docker.compose.ComposeService.Builder;

public class ComposeServiceContainerHasTest {

	private ComposeServiceContainer container;

	@BeforeEach
	public void setUp() {
		this.container = new ComposeServiceContainer();
	}

	@Test
	@Tag("valid")
	public void mapContainsProvidedKey() {
		this.container.add("service1", (Consumer<ComposeService.Builder>) null);
		assertTrue(this.container.has("service1"));
	}

	@Test
	@Tag("invalid")
	public void mapDoesNotContainProvidedKey() {
		this.container.add("service1", (Consumer<ComposeService.Builder>) null);
		assertFalse(this.container.has("service2"));
	}

	@Test
	@Tag("boundary")
	public void mapIsEmpty() {
		assertFalse(this.container.has("service1"));
	}

}