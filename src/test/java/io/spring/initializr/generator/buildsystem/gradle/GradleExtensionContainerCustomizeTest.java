/*
 * Copyright 2012-2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=customize_23c72799c4
ROOST_METHOD_SIG_HASH=customize_e2f45b5a7d

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746075742/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/GradleConfigurationBuildCustomizerTests.java
Tests:
    "@Test
private void customize(GradleBuild build) {
    new GradleConfigurationBuildCustomizer().customize(build);
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746075742/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/GradleAnnotationProcessorScopeBuildCustomizerTests.java
Tests:
    "@Test
private void customize(GradleBuild build) {
    new GradleAnnotationProcessorScopeBuildCustomizer().customize(build);
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746075742/source/initializr/initializr-web/src/test/java/io/spring/initializr/web/project/MetadataProjectDescriptionCustomizerTests.java
Tests:
    "@Test
MutableProjectDescription customize(MutableProjectDescription description) {
    new MetadataProjectDescriptionCustomizer(this.metadata).customize(description);
    return description;
}
""""
Scenario 1: Successful customization with valid inputs.

Details:
  TestName: whenCustomizeWithValidParametersThenSuccessful.
  Description: This test ensures that the customize method works correctly with valid parameters. The method should add the provided 'name and builder' into the 'extensions' map if not already exists or update it if exists.
Execution:
  Arrange: Create a GradleExtension.Builder mock and a valid name String.
  Act: Invoke the customize method with the created mock and name.
  Assert: Check that the extensions Map contains a builder with the given name.
Validation:
  The assertion will validate that the 'name' key now exists in the extensions map with the provided builder as its value. This verifies the function of the method as expected, handling the main scenario correctly.



Scenario 2: Check for customization when name already exists in the Map.

Details:
  TestName: whenCustomizeWithNameExists.
  Description: The test aims to check the behavior of the customize method when the provided name string already exists in the 'extensions' map. It is expected to update the existing builder instead of adding a new one.
Execution:
  Arrange: Add an entry with a key-value pair in the extensions Map. Then, create a new builder with modifications.
  Act: Invoke the customize method with the already existing name and the updated builder.
  Assert: Assert that the builder associated with the name has been updated and not a new entry has been added.
Validation:
  The assertion verifies that the customize method properly updates the existing builder when the provided 'name' already exists in the 'extensions' map. This is important to ensure that the Map doesn't have redundant entries and the method works as expected.



Scenario 3: Test Customize method with an empty name string.

Details:
  TestName: whenCustomizeWithEmptyName.
  Description: This test verifies that the customize method handles empty name inputs properly. It should throw an appropriate exception if the name string is empty.
Execution:
  Arrange: Create an empty string and a GradleExtension.Builder mock.
  Act: Invoke the customize method with the empty string and mock builder.
  Assert: Assert an expected exception.
Validation:
  The assertion confirms that an exception is thrown when an empty name string is passed. It validates that the method handles inappropriate inputs and prevents adding unwanted items to the Map.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.buildsystem.gradle;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import java.util.function.Consumer;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.util.HashSet;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import java.util.stream.Stream;

class GradleExtensionContainerCustomizeTest {

	@Test
	@Tag("valid")
	void whenCustomizeWithValidParametersThenSuccessful() {
		GradleExtensionContainer gradleExtensionContainer = new GradleExtensionContainer();
		String name = "validName";
		Consumer<GradleExtension.Builder> mockExtension = Mockito.mock(Consumer.class);
		gradleExtensionContainer.customize(name, mockExtension);
		assertTrue(gradleExtensionContainer.extensions.containsKey(name));
	}

	@Test
	@Tag("valid")
	void whenCustomizeWithNameExists() {
		GradleExtensionContainer gradleExtensionContainer = new GradleExtensionContainer();
		String name = "existingName";
		Consumer<GradleExtension.Builder> initialExtension = Mockito.mock(Consumer.class);
		gradleExtensionContainer.extensions.put(name, new GradleExtension.Builder());
		Consumer<GradleExtension.Builder> updatedExtension = Mockito.mock(Consumer.class);
		gradleExtensionContainer.customize(name, updatedExtension);
		assertEquals(updatedExtension, gradleExtensionContainer.extensions.get(name));
	}

	@Test
	@Tag("invalid")
	void whenCustomizeWithEmptyName() {
		GradleExtensionContainer gradleExtensionContainer = new GradleExtensionContainer();
		String name = "";
		Consumer<GradleExtension.Builder> mockExtension = Mockito.mock(Consumer.class);
		assertThrows(IllegalArgumentException.class, () -> gradleExtensionContainer.customize(name, mockExtension));
	}

}