/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=spring_61f83c27b6
ROOST_METHOD_SIG_HASH=spring_61f83c27b6

"""
Scenario 1: Verify the redirect URL when spring endpoint is hit

TestName: getSpringRedirectUrlSuccessScenario
Description: This test is designed to evaluate if the get() method of the InitializrMetadataProvider instance returns the expected redirect URL when the /spring or /spring.zip endpoint is hit.

Execution:
Arrange: Mock the InitializrMetadataProvider instance and its get() method to return a predefined value when called.
Act: Invoke the spring() method in SpringCliDistributionController.
Assert: The resulting String contains the expected URL.

Validation:
Validate if the redirection URL returned by the spring() function matches the pre-defined URL. This verifies that the createCliDistributionURl() function of the InitializrMetadataProvider's instance is functioning as expected when the 'zip' parameter is passed.


Scenario 2: Error handling when the metadataProvider returns null

TestName: handleSpringRedirectUrlNullScenario
Description: This test is aimed to check if the get() method of the the InitializrMetadataProvider instance returns null, which does not have the createCliDistributionURl() method.

Execution:
Arrange: Mock the InitializrMetadataProvider instance's get() method to return null when called.
Act: Invoke the spring() method in SpringCliDistributionController.
Assert: The method throws a NullPointerException.

Validation:
The test is designed to verify how the spring() method behaves when the return value of metadataProvider's get() method is null. It ensures that the system can handle the return of null values gracefully.


Scenario 3: Error handling when the metadataProvider instance isn't initialized

TestName: handleSpringMetadataProviderNotInitializedScenario
Description: This test is intended to verify the behavior of the spring() method when the metadataProvider instance isn't initialized.

Execution:
Arrange: Do not initialize the metadataProvider instance.
Act: Call the spring() method in SpringCliDistributionController.
Assert: The method throws a NullPointerException.

Validation:
This test is to verify the behavior of the spring() method when the metadataProvider instance isn't initialized. Proper exception handling ensures the stability of the application.

"""
*/

// ********RoostGPT********

package io.spring.initializr.web.controller;

import io.spring.initializr.metadata.InitializrMetadataProvider;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;
import org.junit.jupiter.api.*;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

public class SpringCliDistributionControllerSpringTest {

	private SpringCliDistributionController controller;

	@Mock
	private InitializrMetadataProvider metadataProvider;

	@BeforeEach
	public void setup() {
		MockitoAnnotations.openMocks(this);
		controller = new SpringCliDistributionController(metadataProvider);
	}

	@Test
	@Tag("Valid")
	public void getSpringRedirectUrlSuccessScenario() {
		String expectedUrl = "https://example.com/zip";
		when(metadataProvider.get().createCliDistributionURl("zip")).thenReturn(expectedUrl);
		String resultUrl = controller.spring();
		assertEquals("redirect:" + expectedUrl, resultUrl);
	}

	@Test
	@Tag("Invalid")
	public void handleSpringRedirectUrlNullScenario() {
		when(metadataProvider.get()).thenReturn(null);
		assertThrows(NullPointerException.class, () -> controller.spring());
	}

	@Test
	@Tag("Invalid")
	public void handleSpringMetadataProviderNotInitializedScenario() {
		controller = new SpringCliDistributionController(null);
		assertThrows(NullPointerException.class, () -> controller.spring());
	}

}