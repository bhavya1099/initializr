/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=toString_dcd279ca52
ROOST_METHOD_SIG_HASH=toString_bbffdadaa2

"""
 Scenario 1: Test VersionInformation class toString method with valid id, major, and minor values.

Details:
   TestName: testToStringReturnsCorrectFormat.
   Description: This test aims to validate the correctness of the output when calling the toString method within the VersionInformation class. The output should follow the correct format "{id='{id}', major='{major}', minor='{minor}'}".
Execution:
   Arrange: Set up a VersionInformation object and assign values to the fields id, major, and minor.
   Act: Invoke toString method on the VersionInformation instance.
   Assert: Compare the output with the expected output format.
Validation:
  This assertion checks if the string result of the toString method is correctly formatted and includes all the value fields. It confirms the proper implementation of the toString method in the VersionInformation class.

 Scenario 2: Test VersionInformation class toString method with null values.

Details:
   TestName: testToStringWithNullValues.
   Description: This test aims to validate the handling of null values when calling the toString method within the VersionInformation class.
Execution:
   Arrange: Set up a VersionInformation object without assigning any value to the fields.
   Act: Invoke toString method on the VersionInformation instance.
   Assert: Compare the output with the expected output format, where all value fields are null.
Validation:
  This assertion verifies the proper handling of null values by the toString method. It checks if null references are correctly represented in the returned string, preventing the occurrence of NullPointerException.

 Scenario 3: Test VersionInformation class toString method with special characters included in values.

Details:
   TestName: testToStringWithSpecialCharacters.
   Description: This test aims to validate the correct representation of special characters when calling the toString method within the VersionInformation class.
Execution:
   Arrange: Set up a VersionInformation object and assign values to the fields id, major, and minor, where each includes special characters.
   Act: Invoke toString method on the VersionInformation instance.
   Assert: Compare the output with the expected output format, where field values contain special characters.
Validation:
  This assertion checks if special characters within the values of id, major, and minor are correctly represented in the output string, maintaining the integrity of data.
""",
*/

// ********RoostGPT********

package io.spring.initializr.actuate.stat;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.StringJoiner;
import io.spring.initializr.generator.version.Version;
import io.spring.initializr.web.support.Agent;
import org.springframework.util.ObjectUtils;
import org.springframework.util.StringUtils;

public class VersionInformationToStringTest {

	@Test
	@Tag("valid")
	public void testToStringReturnsCorrectFormat() {
		// arrange
		ProjectRequestDocument.VersionInformation version = new ProjectRequestDocument().new VersionInformation();
		version.setId("1.2.3");
		version.setMajor("1");
		version.setMinor("2.3");
		// act
		String result = version.toString();
		// assert
		String expectedOutput = "{id='1.2.3', major='1', minor='2.3'}";
		Assertions.assertEquals(expectedOutput, result, "Should return correct string format");
	}

	@Test
	@Tag("valid")
	public void testToStringWithNullValues() {
		// arrange
		ProjectRequestDocument.VersionInformation version = new ProjectRequestDocument().new VersionInformation();
		// act
		String result = version.toString();
		// assert
		String expectedOutput = "{id='null', major='null', minor='null'}";
		Assertions.assertEquals(expectedOutput, result, "Should handle null values correctly");
	}

	@Test
	@Tag("valid")
	public void testToStringWithSpecialCharacters() {
		// arrange
		ProjectRequestDocument.VersionInformation version = new ProjectRequestDocument().new VersionInformation();
		version.setId("1_.2.3");
		version.setMajor("!1");
		version.setMinor("2.3#");
		// act
		String result = version.toString();
		// assert
		String expectedOutput = "{id='1_.2.3', major='!1', minor='2.3#'}";
		Assertions.assertEquals(expectedOutput, result, "Should display special characters correctly");
	}

}