/*
 * Copyright 2012-2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=equals_8224fef9d7
ROOST_METHOD_SIG_HASH=equals_f4eca31364

"""
Scenario 1: Test same object equality

Details:
  TestName: testEqualityForSameObject
  Description: The test is designed to confirm that the equals method returns true when an object is compared with itself.
Execution:
  Arrange: Create a new instance of the Version class.
  Act: Call the equals method on the instance and pass the same instance as a parameter.
  Assert: Check that the method returns true.
Validation:
  According to Java's contract on the equals method, an object must be equal to itself. Therefore, the expected result is true. By passing this test, our equals method confirms to this part of the contract.

Scenario 2: Test equality for two similar objects

Details:
  TestName: testEqualityForSimilarObjects
  Description: The test is meant to verify that the equals method can identify two separate but similar instances of the same class as equal.
Execution:
  Arrange: Create two identical instances of the Version class with the same major, minor, patch, and qualifier values.
  Act: Call the equals method on one of the instances and pass the other as a parameter.
  Assert: Check that the equals method returns true.
Validation:
  In this scenario, since all the comparable fields in both objects are equal, the equals method is expected to return true. This confirms that the equals method correctly identifies equal instances.

Scenario 3: Check non-equality for dissimilar objects

Details:
  TestName: testNonEqualityForDissimilarObjects
  Description: The test confirms that the equals method correctly identifies non-equality between two instances where major, minor, patch, and qualifier values are different.
Execution:
  Arrange: Create two instances of the Version class, each with different major, minor, patch, and qualifier values.
  Act: Call the equals method on one of the instances and pass the other instance as a parameter.
  Assert: Check that the equals method returns false.
Validation:
  As the comparable field values in both instances are different, the equals method is expected to return false. This behavior confirms that the equals method can correctly identify non-equal instances.

Scenario 4: Test non-equality for null object

Details:
  TestName: testEqualityForNullObject
  Description: The test is designed to verify that equals method returns false when a null object is passed as an argument.
Execution:
  Arrange: Create an instance of the Version class.
  Act: Call the equals method on the instance and pass null as a parameter.
  Assert: Check that the equals method returns false.
Validation:
  According to the contract in Java's equals method, an object can never be equal to null. So, the expected result is false. Successful passing of this test finds that our equals method confirms to this part of the contract.

Scenario 5: Test non-equality for objects of different classes

Details:
  TestName: testNonEqualityForObjectsOfDifferentClasses
  Description: The test is designed to confirm that the equals method returns false when an object of a different class is passed as an argument.
Execution:
  Arrange: Create an instance of the Version class and an instance of a different class, such as String.
  Act: Call the equals method on the Version instance and pass the String instance as a parameter.
  Assert: Check that the equals method returns false.
Validation:
  According to the contract in Java's equals method, objects of different classes are considered not equal. So, expected result is false. If this test is passed, our equals method fulfills this part of the contract.
"""

*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.function.Function;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;

public class VersionEqualsTest {

	@Test
	@Tag("valid")
	public void testEqualityForSameObject() {
		Version version = new Version(1, 2, 3, null);
		assertTrue(version.equals(version));
	}

	@Test
	@Tag("valid")
	public void testEqualityForSimilarObjects() {
		Version version1 = new Version(1, 2, 3, null);
		Version version2 = new Version(1, 2, 3, null);
		assertTrue(version1.equals(version2));
	}

	@Test
	@Tag("invalid")
	public void testNonEqualityForDissimilarObjects() {
		Version version1 = new Version(1, 2, 3, new Qualifier("SNAPSHOT"));
		Version version2 = new Version(1, 2, 3, null);
		assertFalse(version1.equals(version2));
	}

	@Test
	@Tag("invalid")
	public void testEqualityForNullObject() {
		Version version = new Version(1, 2, 3, null);
		assertFalse(version.equals(null));
	}

	@Test
	@Tag("invalid")
	public void testNonEqualityForObjectsOfDifferentClasses() {
		Version version = new Version(1, 2, 3, null);
		String str = "Some String";
		assertFalse(version.equals(str));
	}

}