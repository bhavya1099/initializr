/*
 * Copyright 2012-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=equals_29289503be
ROOST_METHOD_SIG_HASH=equals_ded257778a

"""
  Scenario 1: Validating equals method with identical VersionProperty instances

  Details:
    TestName: validateEqualsWithIdenticalInstances.
    Description: This test is meant to check the equals method when it is invoked with two identical VersionProperty instances. The target scenario is when two instances of VersionProperty with exact same internal and property attributes are compared.
  Execution:
    Arrange: Create two identical VersionProperty instances using of method.
    Act: Invoke equals method by passing the second instance as parameter to the first instance.
    Assert: Assert that the equals method returns true.
  Validation:
    The assertion verifies that equals method correctly identifies identical instances. This behavior is acceptable per contract of the equals method in Java.

  Scenario 2: Validating equals method with different VersionProperty instances

  Details:
    TestName: validateEqualsWithDifferentInstances.
    Description: This test verifies equals method when two different VersionProperty instances are compared. The target scenario is when VersionProperty instances with different property or internal attributes are compared.
  Execution:
    Arrange: Create two VersionProperty instances with different values for property or internal attribute using of method.
    Act: Invoke equals method by passing the second instance as a parameter to the first instance.
    Assert: Assert that the equals method returns false.
  Validation:
    The assertion verifies that equals method correctly identifies different instances. This behavior is mandatory per contract of the equals method in Java.

  Scenario 3: Validating equals method with null

  Details:
    TestName: validateEqualsWithNull.
    Description: This test is meant to validate equals method when it is invoked with null. The target scenario is when null is used as parameter to the equals method.
  Execution:
    Arrange: Create a VersionProperty instance using of method.
    Act: Invoke equals method by passing null as parameter.
    Assert: Assert that the equals method returns false.
  Validation:
    The assertion verifies that equals method correctly handles null. As per Java equals method contract, when compared with null, it should return false.

  Scenario 4: Validating equals method with different type of instance

  Details:
    TestName: validateEqualsWithDifferentType.
    Description: This test verifies equals method when instance of a different type is compared. The target scenario is when equals method is invoked with a non-VersionProperty instance.
  Execution:
    Arrange: Create a VersionProperty instance and a String instance.
    Act: Invoke equals method by passing the String instance as parameter.
    Assert: Assert that the equals method returns false.
  Validation:
    The assertion verifies that equals method correctly handles different types of instances. As per Java equals method contract, when compared with an instance of a different type, it should return false.

  Scenario 5: Validating equals method with same Object

  Details:
    TestName: validateEqualsWithSameObject
    Description: This test verifies equals method by invoking it on the same object. The target scenario is when a VersionProperty instance is compared with itself.
  Execution:
    Arrange: Create a VersionProperty instance.
    Act: Invoke equals method by passing the same instance as parameter.
    Assert: Assert that the equals method returns true.
  Validation:
    The assertion verifies that equals method correctly handles same Objects. As per Java equals method contract, when an object is compared with itself, it should return true.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import java.io.Serializable;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import org.springframework.util.StringUtils;

class VersionPropertyEqualsTest {

	// Test case for identical VersionProperty instances
	@Test
	@Tag("valid")
	void validateEqualsWithIdenticalInstances() {
		VersionProperty versionProperty1 = VersionProperty.of("property", true);
		VersionProperty versionProperty2 = VersionProperty.of("property", true);
		assertTrue(versionProperty1.equals(versionProperty2));
	}

	// Test case for different VersionProperty instances
	@Test
	@Tag("valid")
	void validateEqualsWithDifferentInstances() {
		VersionProperty versionProperty1 = VersionProperty.of("property", true);
		VersionProperty versionProperty2 = VersionProperty.of("property2", false);
		assertFalse(versionProperty1.equals(versionProperty2));
	}

	// Test case for comparison with null
	@Test
	@Tag("invalid")
	void validateEqualsWithNull() {
		VersionProperty versionProperty = VersionProperty.of("property", true);
		assertFalse(versionProperty.equals(null));
	}

	// Test case for comparison with different type instance
	@Test
	@Tag("invalid")
	void validateEqualsWithDifferentType() {
		VersionProperty versionProperty = VersionProperty.of("property", true);
		String differentTypeInstance = "abcd";
		assertFalse(versionProperty.equals(differentTypeInstance));
	}

	// Test case for comparison with same object
	@Test
	@Tag("valid")
	void validateEqualsWithSameObject() {
		VersionProperty versionProperty = VersionProperty.of("property", true);
		assertTrue(versionProperty.equals(versionProperty));
	}

}