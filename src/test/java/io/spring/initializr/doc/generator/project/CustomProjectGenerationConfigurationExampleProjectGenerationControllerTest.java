/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=projectGenerationController_8ab258a4a1
ROOST_METHOD_SIG_HASH=projectGenerationController_dab2b7ce7e

"""
Scenario 1: Validate proper instantiation of ProjectGenerationController

  Details:
    TestName: validateProperInitialization.
    Description: This test is meant to check the correct instantiation of ProjectGenerationController using the 'projectGenerationController' method.
  Execution:
    Arrange: Mock InitializrMetadataProvider and ApplicationContext objects.
    Act: Invoke the 'projectGenerationController' method with the mocked parameters.
    Assert: Use JUnit assertions to check if the result is null or not.
  Validation:
    This assertion verifies the correct instantiation of ProjectGenerationController. Expected result is non-null because a ProjectGenerationController should always be returned by the 'projectGenerationController' method. This is crucial for the correct behavior of the application, since it is needed for generating projects.

Scenario 2: Check if correct ProjectGenerationInvoker is instantiated

  Details:
    TestName: validateProperProjectGenerationInvokerInstantiation.
    Description: This test is to verify the correct instantiation of ProjectGenerationInvoker inside the 'projectGenerationController' method.
  Execution:
    Arrange: Mock InitializrMetadataProvider and ApplicationContext. Define a spy on 'projectGenerationController' method.
    Act: Invoke the 'projectGenerationController' method with mocked parameters. Capture the argument passed to ProjectGenerationInvoker constructor.
    Assert: Use JUnit assertions to check if the correct ApplicationContext has been passed to the ProjectGenerationInvoker constructor.
  Validation:
    This verifies the correct instantiation of ProjectGenerationInvoker with the mocked ApplicationContext. This is important because the wrong ApplicationContext instance may affect project generation.

Scenario 3: Validate the exception handling when null ApplicationContext is passed

  Details:
    TestName: ensureExceptionWhenNullApplicationContext.
    Description: This test is to check the 'projectGenerationController' method's error handling mechanism when null ApplicationContext is passed.
  Execution:
    Arrange: Mock InitializrMetadataProvider only.
    Act: Invoke the 'projectGenerationController' method with null ApplicationContext.
    Assert: Use JUnit assertions to expect an IllegalArgumentException.
  Validation:
    This verifies that the 'projectGenerationController' throws an IllegalArgumentException when the ApplicationContext is null. This is important because passing a null ApplicationContext is invalid and should be handled correctly.

Scenario 4: Validate the exception handling when null InitializrMetadataProvider is passed

  Details:
    TestName: ensureExceptionWhenNullMetadataProvider.
    Description: This test is to check the 'projectGenerationController' method's error handling mechanism when null InitializrMetadataProvider is passed.
  Execution:
    Arrange: Mock ApplicationContext only.
    Act: Invoke the 'projectGenerationController' method with null InitializrMetadataProvider.
    Assert: Use JUnit assertions to expect an IllegalArgumentException.
  Validation:
    This verifies that the 'projectGenerationController' throws an IllegalArgumentException when the InitializrMetadataProvider is null. This is important because passing a null InitializrMetadataProvider is invalid and should be handled correctly.
"""
*/

// ********RoostGPT********

package io.spring.initializr.doc.generator.project;

import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.web.controller.ProjectGenerationController;
import io.spring.initializr.web.project.ProjectGenerationInvoker;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.AdditionalAnswers;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.context.ApplicationContext;
import org.junit.jupiter.api.*;
import io.spring.initializr.generator.project.MutableProjectDescription;
import io.spring.initializr.generator.project.ProjectDescription;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.web.project.ProjectRequestToDescriptionConverter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@ExtendWith(MockitoExtension.class)
public class CustomProjectGenerationConfigurationExampleProjectGenerationControllerTest {

	@Mock
	private InitializrMetadataProvider metadataProvider;

	@Mock
	private ApplicationContext applicationContext;

	@InjectMocks
	private CustomProjectGenerationConfigurationExample customProjectGenerationConfigurationExample;

	@Test
	void validateProperInitialization() {
		ProjectGenerationController controller = customProjectGenerationConfigurationExample
			.projectGenerationController(metadataProvider, applicationContext);
		Assertions.assertNotNull(controller);
	}

	@Test
	void validateProperProjectGenerationInvokerInstantiation() {
		ProjectGenerationInvoker invoker = AdditionalAnswers.delegatesTo(
				new ProjectGenerationInvoker<>(applicationContext, new CustomProjectRequestToDescriptionConverter()));
		ProjectGenerationController controller = customProjectGenerationConfigurationExample
			.projectGenerationController(metadataProvider, applicationContext);
		Assertions.assertEquals(invoker.getApplicationContext(), controller.getApplicationContext());
	}

	@Test
	void ensureExceptionWhenNullApplicationContext() {
		Assertions.assertThrows(IllegalArgumentException.class,
				() -> customProjectGenerationConfigurationExample.projectGenerationController(metadataProvider, null));
	}

	@Test
	void ensureExceptionWhenNullMetadataProvider() {
		Assertions.assertThrows(IllegalArgumentException.class, () -> customProjectGenerationConfigurationExample
			.projectGenerationController(null, applicationContext));
	}

}