/*
 * Copyright 2012-2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getMinor_d33c2a1e30
ROOST_METHOD_SIG_HASH=getMinor_2383b694d6

"""
Scenario 1: Test to validate if getMinor method returns the correct value

Details:
  TestName: testGetMinorValue
  Description: This test aims to validate if the getMinor method from the Version class correctly returns the value of the minor field of a Version object.

Execution:
  Arrange: Create an instance of the Version class, and assign a value to the minor field.
  Act: Invoke the getMinor method on the instance of the Version class.
  Assert: Use JUnit assertions to confirm that the value returned by the getMinor method matches the value assigned to the minor field of the Version object.

Validation:
  The assertion verifies that the getMinor method correctly reads and returns the minor field's value of a Version object. This is crucial as any discrepancy in reading or returning this value could lead to incorrect version details.


Scenario 2: Validate getMinor method when the minor version is null

Details:
  TestName: testGetMinorWhenValueIsNull
  Description: This test aims to validate if the getMinor method gives an appropriate result when the minor field of a Version object is null.

Execution:
  Arrange: Create an instance of the Version class where the minor field is null.
  Act: Invoke the getMinor method on the instance of the Version class.
  Assert: Use JUnit assertions to compare the result returned by getMinor method against null.

Validation:
  The assertion aims to confirm whether the getMinor method correctly handles the scenario where the minor field of a Version object is null. As the minor component of the Version can be null, it is important that this scenario does not lead to null pointer exceptions or erroneous behavior.


Scenario 3: Check if getMinor method returns a separate instance for immutability

Details:
  TestName: testGetMinorForImmutability
  Description: This test intends to validate if the getMinor method returns a separate Integer instance ensuring immutability of the Version class.

Execution:
  Arrange: Create an instance of the Version class and assign some value to the minor field.
  Act: Invoke the getMinor method twice on the same instance of the Version class and store the references.
  Assert: Use JUnit assertions to confirm that the two returned references point to different instances.

Validation:
  The assertion verifies that the getMinor method returns new instances, ensuring immutability of the Version class. This is important as immutability ensures thread-safety and security against unintentional modifications.
""",
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertNotSame;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.function.Function;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;

public class VersionGetMinorTest {

	@Test
	@Tag("valid")
	public void testGetMinorValue() {
		// Arrange
		Version version = new Version(1, 2, 3, null);
		// Act
		Integer minorVersion = version.getMinor();
		// Assert
		assertEquals(2, (int) minorVersion, "The value of minor version is not as expected");
	}

	@Test
	@Tag("invalid")
	public void testGetMinorWhenValueIsNull() {
		// Arrange
		Version version = new Version(1, null, 3, null);
		// Act
		Integer minorVersion = version.getMinor();
		// Assert
		assertNull(minorVersion, "The minor version must be null when its value is null");
	}

	@Test
	@Tag("boundary")
	public void testGetMinorForImmutability() {
		// Arrange
		Version version = new Version(1, 2, 3, null);
		// Act
		Integer firstCallMinor = version.getMinor();
		Integer secondCallMinor = version.getMinor();
		// Assert
		assertNotSame(firstCallMinor, secondCallMinor,
				"The method must always return a new instance to ensure immutability");
	}

}