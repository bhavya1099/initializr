/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=spring_61f83c27b6
ROOST_METHOD_SIG_HASH=spring_61f83c27b6

"""
Scenario 1: Test Spring Method with Valid Distribution type.

Details:
    TestName: testSpringMethodWithValidDistributionType.
    Description: The test checks the method's functionality by providing a valid distribution type, it is expected to generate correct url.
Execution:
   Arrange: Mock the metadataProvider property and it's get method to return predetermined metadata.
   Act: Call the spring method.
   Assert: Assert the returned redirect url with the expected url
Validation:
    This test validates whether the method properly generates the url from the given zip distribution type. This is important to ensure that the cli distribution url is correctly formed for further processing.

Scenario 2: Test Spring Method with Invalid Distribution type.

Details:
    TestName: testSpringMethodWithInvalidDistributionType.
    Description: The test checks the method by providing an invalid/unsupported distribution type, and expects an exception or error.
Execution:
   Arrange: Mock the metadataProvider property and it's get method to return null or error when an invalid distribution type is provided.
   Act: Call the spring method.
   Assert: Assert that an error occurred or an exception is thrown
Validation:
   This test asserts the method can properly handle invalid or unsupported zip distribution type, ensuring error handling is in place so that the program does not crash and can provide useful error messages to the user.

Scenario 3: Test Spring Method without Distribution type.

Details:
    TestName: testSpringMethodWithoutDistributionType.
    Description: The test checks the method's behaviour when null or no distribution type is provided, expecting an exception or error
Execution:
   Arrange: Mock the metadataProvider property and it's get method to return null or error when no distribution type is provided.
   Act: Call the spring method.
   Assert: Assert that an error occurred or an exception is thrown
Validation:
    This test validates the method's behavior for null input, ensuring the cli distribution is not created for null distribution type and throws an informative message.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.controller;

import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.util.Assert;
import org.junit.jupiter.api.*;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

class SpringCliDistributionControllerSpringTest {

	@Mock
	private static InitializrMetadataProvider metadataProvider;

	private static SpringCliDistributionController controller;

	@BeforeAll
	public static void setUp() {
		MockitoAnnotations.initMocks(SpringCliDistributionControllerSpringTest.class);
		controller = new SpringCliDistributionController(metadataProvider);
	}

	@Test
	@Tag("Valid")
	public void testSpringMethodWithValidDistributionType() {
		Mockito.when(metadataProvider.get()).thenReturn(Mockito.mock(InitializrMetadata.class));
		Mockito.when(metadataProvider.get().createCliDistributionURl("zip")).thenReturn("http://valid-url.com");

		String actualUrl = controller.spring();
		String expectedUrl = "redirect:http://valid-url.com";

		Assert.hasText(actualUrl, "URL shouldn't be empty or null");
		Assert.isTrue(actualUrl.equals(expectedUrl), "URLs should match");
	}

	@Test
	@Tag("Invalid")
	public void testSpringMethodWithInvalidDistributionType() {
		Mockito.when(metadataProvider.get()).thenThrow(new IllegalArgumentException("Invalid distribution type."));
		try {
			controller.spring();
			assert false : "Expected an IllegalArgumentException.";
		}
		catch (Exception e) {
			assert e instanceof IllegalArgumentException : "Expected an IllegalArgumentException.";
		}
	}

	@Test
	@Tag("Boundary")
	public void testSpringMethodWithoutDistributionType() {
		Mockito.when(metadataProvider.get()).thenThrow(new IllegalArgumentException("Missing distribution type."));
		try {
			controller.spring();
			assert false : "Expected an IllegalArgumentException.";
		}
		catch (Exception e) {
			assert e instanceof IllegalArgumentException : "Expected an IllegalArgumentException.";
		}
	}

}