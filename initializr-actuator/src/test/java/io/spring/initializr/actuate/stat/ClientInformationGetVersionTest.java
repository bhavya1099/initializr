/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getVersion_6fe22325c9
ROOST_METHOD_SIG_HASH=getVersion_a44ba39179

"""
Scenario 1: Validate getVersion when a valid version is set

Details:
  TestName: validVersionSet
  Description: This test is meant to check the getVersion method when a valid version has already been set to the client.

Execution:
  Arrange: Set up a ClientInformation instance and set a valid version to it.
  Act: Invoke the getVersion method.
  Assert: Use JUnit assertions to compare the returned version with the set version.

Validation:
  The assertion aims to verify the correct retrieval of the version. The expected result is the version should be the same as we set earlier.

Scenario 2: Validate getVersion when a version is not set yet

Details:
  TestName: versionNotSet
  Description: This test is meant to check the getVersion method when no version has been set to the client yet.

Execution:
  Arrange: Set up a ClientInformation instance without setting a version.
  Act: Invoke the getVersion method.
  Assert: Use JUnit assertions to verify if the returned version is null.

Validation:
  The assertion aims to verify that in the absence of an explicitly set version, getVersion returns null.

Scenario 3: Validate getVersion when version id is empty

Details:
  TestName: emptyVersionId
  Description: This test is to check if getVersion method can handle empty version ids and maintains the data integrity.

Execution:
  Arrange: Set up a ClientInformation instance with an empty version id.
  Act: Invoke the getVersion method.
  Assert: Use JUnit assertions to compare the returned version id with the empty id.

Validation:
  The assertion aims to verify the correct retrieval of the version. The expected result is the version id should be the same as we set earlier which is an empty string. The test confirms the software can handle empty ids and maintains data integrity.

Scenario 4: Validate getVersion after resetting the version

Details:
  TestName: resetVersion
  Description: This test is meant to check the getVersion method's functionality after the version has been reset.

Execution:
  Arrange: Set up a ClientInformation instance with a set version, then set a new version.
  Act: Invoke the getVersion method.
  Assert: Use JUnit assertions to compare the returned version with the newly set version.

Validation:
  The assertion aims to verify that the getVersion method properly retrieves the latest version set. The expected result is the version should be equal to the newly set version.

Scenario 5: Validate getVersion with a very long version id

Details:
  TestName: longVersionId
  Description: This test is meant to check the getVersion method when dealing with a very long version id.

Execution:
  Arrange: Set up a ClientInformation instance with a very long version id.
  Act: Invoke the getVersion method.
  Assert: Use JUnit assertions to compare the returned version id with the long id.

Validation:
  The assertion aims to verify that the getVersion method can properly handle long version ids. The expected result is the returned version id is identical to the very long one we set. This test is important to determine if software handles large data efficiently.
""",
*/

// ********RoostGPT********

package io.spring.initializr.actuate.stat;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.springframework.boot.test.context.SpringBootTest;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import io.spring.initializr.generator.version.Version;
import io.spring.initializr.web.support.Agent;
import org.junit.jupiter.api.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.StringJoiner;
import org.springframework.util.ObjectUtils;
import org.springframework.util.StringUtils;

@SpringBootTest
public class ClientInformationGetVersionTest {

	@Test
	@Tag("valid")
	public void validVersionSet() {
		Agent agent = new Agent("userAgent", Version.parse("1.0.0"));
		ClientInformation client = new ClientInformation(agent, "127.0.0.1", "US");
		assertEquals(client.getVersion(), agent.getVersion(), "getVersion does not return the set version correctly");
	}

	@Test
	@Tag("invalid")
	public void versionNotSet() {
		ClientInformation client = new ClientInformation(null, "127.0.0.1", "US");
		assertNull(client.getVersion(), "getVersion does not handle unset version correctly");
	}

	@Test
	@Tag("boundary")
	public void emptyVersionId() {
		Agent agent = new Agent("userAgent", new Version("   "));
		ClientInformation client = new ClientInformation(agent, "127.0.0.1", "US");
		assertEquals(client.getVersion(), agent.getVersion(), "getVersion does not handle empty version id correctly");
	}

	@Test
	@Tag("valid")
	public void resetVersion() {
		Agent agent = new Agent("userAgent", Version.parse("1.0.0"));
		ClientInformation client = new ClientInformation(agent, "127.0.0.1", "US");
		agent = new Agent("userAgent", Version.parse("2.0.0"));
		client = new ClientInformation(agent, "127.0.0.1", "US");
		assertEquals(client.getVersion(), agent.getVersion(), "getVersion does not return the reset version correctly");
	}

	@Test
	@Tag("boundary")
	public void longVersionId() {
		String longVersionId = "1.0.0.beta-20190620135220-c86c1a4a9568313";
		Agent agent = new Agent("userAgent", Version.parse(longVersionId));
		ClientInformation client = new ClientInformation(agent, "127.0.0.1", "US");
		assertEquals(client.getVersion(), agent.getVersion(), "getVersion does not handle long version id correctly");
	}

}