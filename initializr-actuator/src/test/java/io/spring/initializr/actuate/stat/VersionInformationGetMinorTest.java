/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getMinor_d04202659c
ROOST_METHOD_SIG_HASH=getMinor_ab6892b451

"""
Scenario 1: Checking If Minor Version Exists In Case Of a Valid Version

Details:
    TestName: checkMinorVersionWhenVersionValid.
    Description: This test checks if the 'getMinor' method correctly retrieves the minor version when a valid version object is created.
Execution:
    Arrange: Create a new VersionInformation object with a specific minor string.
    Act: Invoke the 'getMinor' method on the VersionInformation instance.
    Assert: Use a JUnit assertion to verify that the returned value is equal to the minor string used during the object creation.
Validation:
    The assertion verifies that the 'getMinor' method successfully returns the minor version when called on a valid object.
    This test validates that the 'getMinor' method works correctly under normal operational conditions.

Scenario 2: Check If Null Is Returned When Minor Version Is Not Specified

Details:
    TestName: getMinorWhenMinorVersionUnspecified.
    Description: This test checks if the 'getMinor' method correctly handles cases where the minor version is not specified during the object's creation.
Execution:
    Arrange: Create a new VersionInformation object without specifying a minor version.
    Act: Invoke the 'getMinor' method on the VersionInformation instance.
    Assert: Use a JUnit assertion to verify that the returned value is null.
Validation:
    The assertion verifies that the 'getMinor' method returns null when it is invoked on an object with no specified minor version.
    This test validates whether the 'getMinor' method is capable of handling edge cases where the minor version is not specified.
"",a6d33618-b8e0-4c51-9d09-3749b5ab0912
*/

// ********RoostGPT********

package io.spring.initializr.actuate.stat;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import io.spring.initializr.generator.version.Version;
import org.junit.jupiter.api.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.StringJoiner;
import io.spring.initializr.web.support.Agent;
import org.springframework.util.ObjectUtils;
import org.springframework.util.StringUtils;

public class VersionInformationGetMinorTest {

	@Test
	@Tag("valid")
	public void checkMinorVersionWhenVersionValid() {
		// Arrange
		Version testVersion = new Version("2.3.4");
		ProjectRequestDocument.VersionInformation versionInformation = new ProjectRequestDocument.VersionInformation(
				testVersion);
		// Act
		String minorVersion = versionInformation.getMinor();
		// Assert
		assertEquals("2.3", minorVersion, "Expected minor version to be '2.3' in case of a valid version");
	}

	@Test
	@Tag("boundary")
	public void getMinorWhenMinorVersionUnspecified() {
		// Arrange
		Version testVersion = new Version("2");
		ProjectRequestDocument.VersionInformation versionInformation = new ProjectRequestDocument.VersionInformation(
				testVersion);
		// Act
		String minorVersion = versionInformation.getMinor();
		// Assert
		assertNull(minorVersion, "Expected minor version to be null when minor version is not specified");
	}

}