/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=invalidProjectRequest_787605a42d
ROOST_METHOD_SIG_HASH=invalidProjectRequest_eba419d7ad

"""
Scenario 1: Test for invalidProjectRequest method when InvalidProjectRequestException is thrown

Details:
  TestName: handleInvalidProjectRequestException
  Description: This test checks how the method handle InvalidProjectRequestException and ensures that it sends the appropriate HTTP status and exception message as a response.
Execution:
  Arrange: Create a mock HttpServletResponse and a new InvalidProjectRequestException with a predefined error message.
  Act: Call the invalidProjectRequest method using the aforementioned mock objects.
  Assert: Assert that sendError method from HttpServletResponse mock object has been called with parameters HttpStatus.BAD_REQUEST.value() and the error message from exception.
Validation:
  This validates that invalidProjectRequest method correctly handles InvalidProjectRequestException, by sending HTTP status BAD REQUEST and exception message in the response. It ensures proper error handling when invalid project requests are received.

Scenario 2: Test for invalidProjectRequest method when IOException is thrown while calling sendError

Details:
  TestName: handleIOExceptionWithinInvalidProjectRequest
  Description: This test checks the scenario when IOException is thrown from sendError method inside invalidProjectRequest, ensuring that the method doesn't handle it and let it propagate up in the call chain.
Execution:
  Arrange: Create a mock HttpServletResponse that when sendError method is called, throws IOException, also create a new InvalidProjectRequestException with a predefined error message.
  Act: Call the invalidProjectRequest method using the previously mentioned mock objects, and catch the IOException.
  Assert: Assert that IOException is thrown.
Validation:
  This scenario validates that if an IOException is thrown from the sendError method within invalidProjectRequest, the method doesn't handle it and throws it up the chain. This kind of error handling is expected when there is an issue with the servlet response stream.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.controller;

import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.doThrow;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.springframework.http.HttpStatus;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import org.mockito.Mock;
import org.mockito.Mockito;
import io.spring.initializr.web.project.InvalidProjectRequestException;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.metadata.DependencyMetadataProvider;
import io.spring.initializr.web.controller.ProjectMetadataController;
import org.junit.jupiter.api.*;
import java.util.concurrent.TimeUnit;
import io.spring.initializr.generator.version.Version;
import io.spring.initializr.metadata.DependencyMetadata;
import io.spring.initializr.metadata.InitializrConfiguration.Platform;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InvalidInitializrMetadataException;
import io.spring.initializr.web.mapper.DependencyMetadataJsonMapper;
import io.spring.initializr.web.mapper.DependencyMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataJsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV22JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV2JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataVersion;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.http.CacheControl;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

// Relevant imports
class ProjectMetadataControllerInvalidProjectRequestTest {

	private InitializrMetadataProvider metadataProvider = Mockito.mock(InitializrMetadataProvider.class);

	private DependencyMetadataProvider dependencyMetadataProvider = Mockito.mock(DependencyMetadataProvider.class);

	private ProjectMetadataController subject = new ProjectMetadataController(metadataProvider,
			dependencyMetadataProvider);

	@Tag("invalid")
	@Test
	void handleInvalidProjectRequestException() throws IOException {
		// arrange
		String errorMessage = "Invalid request";
		InvalidProjectRequestException ex = new InvalidProjectRequestException(errorMessage);
		HttpServletResponse mockResponse = Mockito.mock(HttpServletResponse.class);
		// act
		subject.invalidProjectRequest(mockResponse, ex);
		// assert
		verify(mockResponse, times(1)).sendError(HttpStatus.BAD_REQUEST.value(), errorMessage);
	}

	@Tag("exception")
	@Test
	void handleIOExceptionWithinInvalidProjectRequest() throws IOException {
		// arrange
		String errorMessage = "Invalid request";
		InvalidProjectRequestException ex = new InvalidProjectRequestException(errorMessage);
		HttpServletResponse mockResponse = Mockito.mock(HttpServletResponse.class);
		doThrow(new IOException()).when(mockResponse).sendError(HttpStatus.BAD_REQUEST.value(), errorMessage);
		// act and assert
		assertThrows(IOException.class, () -> subject.invalidProjectRequest(mockResponse, ex));
	}

}