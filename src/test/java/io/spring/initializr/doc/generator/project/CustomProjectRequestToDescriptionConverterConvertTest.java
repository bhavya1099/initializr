/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=convert_b1cb36a8e4
ROOST_METHOD_SIG_HASH=convert_390a89183f

"""
Scenario 1: Testing the convert method with valid parameters

Details:
  TestName: testConvertWithValidParameters
  Description: This test will verify if the convert method can successfully create an instance of a MutableProjectDescription when passed valid request and metadata objects.

Execution:
  Arrange: Initialize a new CustomProjectRequest and InitializrMetadata instance with necessary data.
  Act: Invoke the convert method with the previously initialized CustomProjectRequest and InitializrMetadata instances.
  Assert: Assert that the returned object is not null and is an instance of MutableProjectDescription.

Validation:
  The assertion verifies that a non-null MutableProjectDescription object is returned when calling the "convert" method with valid parameters. This is expected because the convert method is meant to return a new instance of MutableProjectDescription.

Scenario 2: Testing convert method with null parameters

Details:
  TestName: testConvertWithNullParameters
  Description: This test will confirm if the convert method can handle null parameters without throwing errors.

Execution:
  Arrange: No need for any setup because we are testing with null parameters.
  Act: Call the convert method with CustomProjectRequest and InitializrMetadata parameters as null.
  Assert: Assert that the returned object is not null and is an instance of MutableProjectDescription.

Validation:
  The assertion verifies that a non-null MutableProjectDescription object is returned when calling the "convert" method with null parameters. This checks if the method can handle null inputs without crashing and still return a valid MutableProjectDescription instance.

Scenario 3: Testing convert method with mock parameters

Details:
  TestName: testConvertWithMockParameters
  Description: This test will verify if the convert method can work with mock parameters for testing purposes.

Execution:
  Arrange: Create mock instances of CustomProjectRequest and InitializrMetadata using a mocking library like Mockito.
  Act: Invoke the convert method with the mock objects.
  Assert: Assert that the returned object is not null and is an instance of MutableProjectDescription.

Validation:
  The assertion validates that even with mock parameters, the convert method returns an instance of MutableProjectDescription. This is useful for unit testing where mocking objects are often used to isolate the functionality of the method being tested."""
*/

// ********RoostGPT********

package io.spring.initializr.doc.generator.project;

import io.spring.initializr.metadata.InitializrMetadata;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.*;
import io.spring.initializr.generator.project.MutableProjectDescription;
import io.spring.initializr.generator.project.ProjectDescription;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.web.controller.ProjectGenerationController;
import io.spring.initializr.web.project.ProjectGenerationInvoker;
import io.spring.initializr.web.project.ProjectRequestToDescriptionConverter;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@SpringJUnitConfig
@SpringBootTest
public class CustomProjectRequestToDescriptionConverterConvertTest {

	@Test
	@Tag("valid")
	public void testConvertWithValidParameters() {
		InitializrMetadata metadata = new InitializrMetadata();
		CustomProjectRequest request = new CustomProjectRequest();
		CustomProjectGenerationConfigurationExample.CustomProjectRequestToDescriptionConverter converter = new CustomProjectGenerationConfigurationExample().new CustomProjectRequestToDescriptionConverter();
		ProjectDescription result = converter.convert(request, metadata);
		assertNotNull(result);
		assertTrue(result instanceof MutableProjectDescription);
	}

	@Test
	@Tag("invalid")
	public void testConvertWithNullParameters() {
		CustomProjectGenerationConfigurationExample.CustomProjectRequestToDescriptionConverter converter = new CustomProjectGenerationConfigurationExample().new CustomProjectRequestToDescriptionConverter();
		ProjectDescription result = converter.convert(null, null);
		assertNotNull(result);
		assertTrue(result instanceof MutableProjectDescription);
	}

	@Test
	@Tag("valid")
	public void testConvertWithMockParameters() {
		InitializrMetadata metadata = Mockito.mock(InitializrMetadata.class);
		CustomProjectRequest request = Mockito.mock(CustomProjectRequest.class);
		CustomProjectGenerationConfigurationExample.CustomProjectRequestToDescriptionConverter converter = new CustomProjectGenerationConfigurationExample().new CustomProjectRequestToDescriptionConverter();
		ProjectDescription result = converter.convert(request, metadata);
		assertNotNull(result);
		assertTrue(result instanceof MutableProjectDescription);
	}

}