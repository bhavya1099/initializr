/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=hashCode_2313d163f4
ROOST_METHOD_SIG_HASH=hashCode_44411a81c8

Scenario 1: Testing hashCode with non-null property and non-null value

Details:
  TestName: testHashCodeForNonNullPropertyAndValue
  Description: This test scenario checks the hashCode method by passing a Compound VersionReference object with non-null values for property and value.
Execution:
  Arrange: Instantiate a VersionReference object with a non-null property and value using ofProperty() and ofValue().
  Act: Invoke hashCode() method on the created VersionReference object.
  Assert: Use JUnit assertions to compare the calculated hash value with the expected hash value.
Validation:
  The test validates the correctness of the hashCode implementation when the property and value are non-null. On success, it demonstrates that the code adheres to the hashCode contract by returning consistent results for similar objects.

Scenario 2: Testing hashCode with null property and non-null value

Details:
  TestName: testHashCodeForNullPropertyNonNullValue
  Description: This test scenario checks the hashCode method by passing a VersionReference object with a null property and non-null value.
Execution:
  Arrange: Instantiate a VersionReference object with a null property and non-null value using ofProperty() and ofValue().
  Act: Invoke hashCode() method on the created VersionReference object.
  Assert: Use JUnit assertions to compare the calculated hash value with the expected hash value.
Validation:
  The test validates the correctness of the hashCode implementation when property is null and value is non-null. On success, it establishes that the hashCode method can handle null properties correctly.

Scenario 3: Testing hashCode with non-null property and null value

Details:
  TestName: testHashCodeForNonNullPropertyNullValue
  Description: This test scenario checks the hashCode method by passing a VersionReference object with a non-null property and a null value.
Execution:
  Arrange: Instantiate a VersionReference object with a non-null property and null value using ofProperty() and ofValue().
  Act: Invoke hashCode() method on the created VersionReference object.
  Assert: Use JUnit assertions to compare the calculated hash value with the expected hash value.
Validation:
  The test validates the correctness of the hashCode implementation when property is non-null and value is null. On success, it establishes that the hashCode method can handle null values correctly.

Scenario 4: Testing hashCode with a null property and null value

Details:
  TestName: testHashCodeForNullPropertyNullValue
  Description: This test scenario checks the hashCode method by passing a VersionReference object with both the property and value being null.
Execution:
  Arrange: Instantiate a VersionReference object with a null property and null value using ofProperty() and ofValue().
  Act: Invoke hashCode() method on the created VersionReference object.
  Assert: Use JUnit assertions to compare the calculated hash value with the expected hash value.
Validation:
  The test validates the correctness of the hashCode implementation when both property and value are null. On success, it establishes that the hashCode method can handle entirely null situations correctly.
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import java.util.Objects;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

class VersionReferenceHashCodeTest {

	@Test
	@Tag("valid")
	void testHashCodeForNonNullPropertyAndValue() {
		VersionProperty property = VersionProperty.of("property");
		VersionReference versionReference = VersionReference.ofProperty(property);
		versionReference = versionReference.ofValue("value");
		int expectedHashCode = Objects.hash(property, "value");
		int actualHashCode = versionReference.hashCode();
		assertEquals(expectedHashCode, actualHashCode);
	}

	@Test
	@Tag("valid")
	void testHashCodeForNullPropertyNonNullValue() {
		VersionReference versionReference = VersionReference.ofValue("value");
		int expectedHashCode = Objects.hash(null, "value");
		int actualHashCode = versionReference.hashCode();
		assertEquals(expectedHashCode, actualHashCode);
	}

	@Test
	@Tag("valid")
	void testHashCodeForNonNullPropertyNullValue() {
		VersionProperty property = VersionProperty.of("property");
		VersionReference versionReference = VersionReference.ofProperty(property);
		int expectedHashCode = Objects.hash(property, null);
		int actualHashCode = versionReference.hashCode();
		assertEquals(expectedHashCode, actualHashCode);
	}

	@Test
	@Tag("valid")
	void testHashCodeForNullPropertyNullValue() {
		VersionReference versionReference = new VersionReference(null, null);
		int expectedHashCode = Objects.hash(null, null);
		int actualHashCode = versionReference.hashCode();
		assertEquals(expectedHashCode, actualHashCode);
	}

}