/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=customize_ae525242c8
ROOST_METHOD_SIG_HASH=customize_f56fdf334d

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/documentation/HelpDocumentGitIgnoreCustomizerTests.java
Tests:
    "@Test
@Test
void gitIgnoreIsUpdatedWithNonEmptyHelpDocument() {
    HelpDocument document = new HelpDocument(mock(MustacheTemplateRenderer.class));
    document.addSection((writer) -> writer.println("test"));
    new HelpDocumentGitIgnoreCustomizer(document).customize(this.gitIgnore);
    assertThat(this.gitIgnore.getGeneral().getItems()).containsOnly("HELP.md");
}
"
    "@Test
@Test
void gitIgnoreIsNotUpdatedWithEmptyHelpDocument() {
    HelpDocument document = new HelpDocument(mock(MustacheTemplateRenderer.class));
    new HelpDocumentGitIgnoreCustomizer(document).customize(this.gitIgnore);
    assertThat(this.gitIgnore.getGeneral().getItems()).isEmpty();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/documentation/RequestedDependenciesHelpDocumentCustomizerTests.java
Tests:
    "@Test
private HelpDocument customizeHelp(Version platformVersion, String... requestedDependencies) {
    MutableProjectDescription description = new MutableProjectDescription();
    if (platformVersion != null) {
        description.setPlatformVersion(platformVersion);
    }
    for (String requestedDependency : requestedDependencies) {
        description.addDependency(requestedDependency, mock(io.spring.initializr.generator.buildsystem.Dependency.class));
    }
    InitializrMetadata metadata = this.metadataBuilder.build();
    HelpDocument document = new HelpDocument(new MustacheTemplateRenderer("classpath:/templates"));
    new RequestedDependenciesHelpDocumentCustomizer(description, metadata).customize(document);
    return document;
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/code/kotlin/KotlinMavenFullBuildCustomizerTests.java
Tests:
    "@Test
@Test
void kotlinVersionPropertyIsConfigured() {
    MavenBuild build = new MavenBuild();
    new KotlinMavenFullBuildCustomizer(new SimpleKotlinProjectSettings("1.2.70")).customize(build);
    assertThat(build.properties().versions(VersionProperty::toStandardFormat)).containsOnly(entry("kotlin.version", "1.2.70"));
}
"
    "@Test
@Test
void buildSourceDirectoriesAreConfigured() {
    MavenBuild build = new MavenBuild();
    new KotlinMavenFullBuildCustomizer(new SimpleKotlinProjectSettings("1.2.70")).customize(build);
    assertThat(build.getSettings().getSourceDirectory()).isEqualTo("${project.basedir}/src/main/kotlin");
    assertThat(build.getSettings().getTestSourceDirectory()).isEqualTo("${project.basedir}/src/test/kotlin");
}
"
    "@Test
@Test
void kotlinMavenPluginIsConfigured() {
    MavenBuild build = new MavenBuild();
    new KotlinMavenFullBuildCustomizer(new SimpleKotlinProjectSettings("1.2.70", "1.6")).customize(build);
    assertThat(build.plugins().values()).singleElement().satisfies((kotlinPlugin) -> {
        assertThat(kotlinPlugin.getGroupId()).isEqualTo("org.jetbrains.kotlin");
        assertThat(kotlinPlugin.getArtifactId()).isEqualTo("kotlin-maven-plugin");
        assertThat(kotlinPlugin.getVersionReference()).isEqualTo(VersionReference.ofProperty("kotlin.version"));
        Configuration configuration = kotlinPlugin.getConfiguration();
        assertThat(configuration).isNotNull();
        assertThat(configuration.getSettings()).hasSize(3);
        Setting args = configuration.getSettings().get(0);
        assertThat(args.getName()).isEqualTo("args");
        assertThat(args.getValue()).asInstanceOf(InstanceOfAssertFactories.LIST).hasSize(1);
        assertThat(args.getValue()).asInstanceOf(InstanceOfAssertFactories.LIST).element(0).hasFieldOrPropertyWithValue("name", "arg").hasFieldOrPropertyWithValue("value", "-Xjsr305=strict");
        Setting compilerPlugins = configuration.getSettings().get(1);
        assertThat(compilerPlugins.getName()).isEqualTo("compilerPlugins");
        assertThat(compilerPlugins.getValue()).asInstanceOf(InstanceOfAssertFactories.LIST).hasSize(1);
        assertThat(compilerPlugins.getValue()).asInstanceOf(InstanceOfAssertFactories.LIST).element(0).hasFieldOrPropertyWithValue("name", "plugin").hasFieldOrPropertyWithValue("value", "spring");
        Setting jvmTarget = configuration.getSettings().get(2);
        assertThat(jvmTarget.getName()).isEqualTo("jvmTarget");
        assertThat(jvmTarget.getValue()).isEqualTo("1.6");
        assertThat(kotlinPlugin.getExecutions()).hasSize(2);
        Execution compile = kotlinPlugin.getExecutions().get(0);
        assertThat(compile.getId()).isEqualTo("compile");
        assertThat(compile.getGoals()).containsExactly("compile");
        assertThat(compile.getPhase()).isEqualTo("compile");
        assertThat(compile.getConfiguration()).isNull();
        Execution testCompile = kotlinPlugin.getExecutions().get(1);
        assertThat(testCompile.getId()).isEqualTo("test-compile");
        assertThat(testCompile.getGoals()).containsExactly("test-compile");
        assertThat(testCompile.getPhase()).isEqualTo("test-compile");
        assertThat(testCompile.getConfiguration()).isNull();
        assertThat(kotlinPlugin.getDependencies()).hasSize(1);
        Dependency allOpen = kotlinPlugin.getDependencies().get(0);
        assertThat(allOpen.getGroupId()).isEqualTo("org.jetbrains.kotlin");
        assertThat(allOpen.getArtifactId()).isEqualTo("kotlin-maven-allopen");
        assertThat(allOpen.getVersionReference()).isEqualTo(VersionReference.ofProperty("kotlin.version"));
    });
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/container/docker/compose/ComposeHelpDocumentCustomizerTests.java
Tests:
    "@Test
@Test
void addsDockerComposeSection() throws IOException {
    this.dockerComposeFile.services().add("test2", (service) -> service.imageAndTag("image-2:4.5.6").imageWebsite("https:/example.com/image-2"));
    this.dockerComposeFile.services().add("test", (service) -> service.imageAndTag("image-1:1.2.3").imageWebsite("https:/example.com/image-1"));
    HelpDocument helpDocument = helpDocument();
    this.customizer.customize(helpDocument);
    assertThat(helpDocument.getSections()).hasSize(1);
    Section section = helpDocument.getSections().get(0);
    assertThat(section).isInstanceOf(MustacheSection.class);
    StringWriter stringWriter = new StringWriter();
    helpDocument.write(new PrintWriter(stringWriter));
    assertThat(stringWriter.toString()).isEqualToIgnoringNewLines("""
        ### Docker Compose support
        This project contains a Docker Compose file named `compose.yaml`.
        In this file, the following services have been defined:

        * test: [`image-1:1.2.3`](https:/example.com/image-1)
        * test2: [`image-2:4.5.6`](https:/example.com/image-2)

        Please review the tags of the used images and set them to the same as you're running in production.""");
}
"
    "@Test
@Test
void addsWarningIfNoServicesAreDefined() throws IOException {
    HelpDocument helpDocument = helpDocument();
    this.customizer.customize(helpDocument);
    assertThat(helpDocument.getWarnings().getItems()).containsExactly("No Docker Compose services found. As of now, the application won't start! Please add at least one service to the `compose.yaml` file.");
    StringWriter stringWriter = new StringWriter();
    helpDocument.write(new PrintWriter(stringWriter));
    assertThat(stringWriter.toString()).isEqualToIgnoringNewLines("""
        # Read Me First
        The following was discovered as part of building this project:

        * No Docker Compose services found. As of now, the application won't start! Please add at least one service to the `compose.yaml` file.

        ### Docker Compose support
        This project contains a Docker Compose file named `compose.yaml`.

        However, no services were found. As of now, the application won't start!

        Please make sure to add at least one service in the `compose.yaml` file.""");
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/WarPackagingWebStarterBuildCustomizerTests.java
Tests:
    "@Test
@Test
void addWebStarterWhenNoWebFacetIsPresent() {
    Dependency dependency = Dependency.withId("test", "com.example", "acme", null, Dependency.SCOPE_COMPILE);
    InitializrMetadata metadata = InitializrMetadataTestBuilder.withDefaults().addDependencyGroup("test", dependency).build();
    Build build = createBuild(metadata);
    build.dependencies().add("test");
    new WarPackagingWebStarterBuildCustomizer(metadata, this.projectDescription).customize(build);
    assertThat(build.dependencies().ids()).containsOnly("test", "web", "tomcat");
}
"
    "@Test
@Test
void addWebStarterWhenNoWebFacetIsPresentWithCustomWebStarter() {
    Dependency dependency = Dependency.withId("test", "com.example", "acme", null, Dependency.SCOPE_COMPILE);
    Dependency web = Dependency.withId("web", "com.example", "custom-web-starter", null, Dependency.SCOPE_COMPILE);
    InitializrMetadata metadata = InitializrMetadataTestBuilder.withDefaults().addDependencyGroup("test", dependency, web).build();
    Build build = createBuild(metadata);
    build.dependencies().add("test");
    new WarPackagingWebStarterBuildCustomizer(metadata, this.projectDescription).customize(build);
    assertThat(build.dependencies().ids()).containsOnly("test", "web", "tomcat");
}
"
    "@Test
@Test
void addWebStarterDoesNotReplaceWebFacetDependency() {
    Dependency dependency = Dependency.withId("test", "com.example", "acme", null, Dependency.SCOPE_COMPILE);
    dependency.setFacets(Collections.singletonList("web"));
    InitializrMetadata metadata = InitializrMetadataTestBuilder.withDefaults().addDependencyGroup("test", dependency).build();
    Build build = createBuild(metadata);
    build.dependencies().add("test");
    new WarPackagingWebStarterBuildCustomizer(metadata, this.projectDescription).customize(build);
    assertThat(build.dependencies().ids()).containsOnly("test", "tomcat");
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/DefaultStarterBuildCustomizerTests.java
Tests:
    "@Test
@Test
void defaultStarterIsAddedIfNoneExists() {
    Dependency dependency = Dependency.withId("acme", "com.example", "acme");
    dependency.setStarter(false);
    InitializrMetadata metadata = InitializrMetadataTestBuilder.withDefaults().addDependencyGroup("test", dependency).build();
    Build build = createBuild(metadata);
    build.dependencies().add("acme");
    new DefaultStarterBuildCustomizer(metadata, this.projectDescription).customize(build);
    assertThat(build.dependencies().ids()).containsOnly("acme", DefaultStarterBuildCustomizer.DEFAULT_STARTER);
}
"
    "@Test
@Test
void defaultStarterIsAddedIfNoCompileScopedStarterExists() {
    Dependency dependency = Dependency.withId("runtime", "org.springframework.boot", "runtime-starter", null, Dependency.SCOPE_RUNTIME);
    InitializrMetadata metadata = InitializrMetadataTestBuilder.withDefaults().addDependencyGroup("test", dependency).build();
    Build build = createBuild(metadata);
    build.dependencies().add("runtime");
    new DefaultStarterBuildCustomizer(metadata, this.projectDescription).customize(build);
    assertThat(build.dependencies().ids()).containsOnly("runtime", DefaultStarterBuildCustomizer.DEFAULT_STARTER);
}
"
    "@Test
@Test
void defaultStarterIsNotAddedIfCompileScopedStarterExists() {
    InitializrMetadata metadata = InitializrMetadataTestBuilder.withDefaults().addDependencyGroup("test", "web", "security").build();
    Build build = createBuild(metadata);
    build.dependencies().add("web");
    new DefaultStarterBuildCustomizer(metadata, this.projectDescription).customize(build);
    assertThat(build.dependencies().ids()).containsOnly("web");
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/code/SourceCodeProjectGenerationConfigurationTests.java
Tests:
    "@Test
@Test
@SuppressWarnings("unchecked")
void addsACustomizerThatAppliesSpringBootApplicationAnnotationOnMainClass() {
    TypeDeclaration declaration = this.projectTester.generate(new MutableProjectDescription(), (context) -> {
        TypeDeclaration type = new TypeDeclaration("Test");
        MainApplicationTypeCustomizer<TypeDeclaration> bean = context.getBean(MainApplicationTypeCustomizer.class);
        bean.customize(type);
        return type;
    });
    assertThat(declaration.annotations().values()).singleElement().satisfies((annotation) -> assertThat(annotation.getClassName()).isEqualTo(ClassName.of("org.springframework.boot.autoconfigure.SpringBootApplication")));
}
"
    "@Test
@SuppressWarnings("unchecked")
private TypeDeclaration generateTestTypeDeclaration(String version) {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setPlatformVersion(Version.parse(version));
    return this.projectTester.generate(description, (context) -> {
        TypeDeclaration type = new TypeDeclaration("Test");
        TestApplicationTypeCustomizer<TypeDeclaration> bean = context.getBean(TestApplicationTypeCustomizer.class);
        bean.customize(type);
        return type;
    });
}
"
    "@Test
@SuppressWarnings("unchecked")
private void runWarTest(String version, String className) {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setPackaging(Packaging.forId("war"));
    description.setPackageName("com.foo");
    description.setPlatformVersion(Version.parse(version));
    this.projectTester.configure(description, (context) -> {
        ServletInitializerContributor bean = context.getBean(ServletInitializerContributor.class);
        SourceCode<TypeDeclaration, CompilationUnit<TypeDeclaration>> sourceCode = mock(SourceCode.class);
        CompilationUnit<TypeDeclaration> compilationUnit = mock(CompilationUnit.class);
        given(sourceCode.createCompilationUnit(any(), any())).willReturn(compilationUnit);
        TypeDeclaration typeDeclaration = mock(TypeDeclaration.class);
        given(compilationUnit.createTypeDeclaration(any())).willReturn(typeDeclaration);
        bean.customize(sourceCode);
        verify(sourceCode).createCompilationUnit("com.foo", "ServletInitializer");
        verify(typeDeclaration).extend(className);
    });
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/code/kotlin/KotlinJpaMavenBuildCustomizerTests.java
Tests:
    "@Test
private MavenBuild getCustomizedBuild(Dependency dependency) {
    InitializrMetadata metadata = InitializrMetadataTestBuilder.withDefaults().addDependencyGroup("test", dependency).build();
    MutableProjectDescription projectDescription = new MutableProjectDescription();
    projectDescription.setPlatformVersion(Version.parse("1.0.0"));
    KotlinJpaMavenBuildCustomizer customizer = new KotlinJpaMavenBuildCustomizer(metadata, projectDescription);
    MavenBuild build = new MavenBuild(new MetadataBuildItemResolver(metadata, Version.parse("2.0.0.RELEASE")));
    build.dependencies().add("foo");
    customizer.customize(build);
    return build;
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/code/kotlin/KotlinGradleBuildCustomizerTests.java
Tests:
    "@Test
@Test
void kotlinPluginsAreConfigured() {
    GradleBuild build = new GradleBuild();
    new KotlinGradleBuildCustomizer(new SimpleKotlinProjectSettings("1.2.70"), '"').customize(build);
    assertThat(build.plugins().values()).extracting("id", "version").containsExactlyInAnyOrder(Tuple.tuple("org.jetbrains.kotlin.jvm", "1.2.70"), Tuple.tuple("org.jetbrains.kotlin.plugin.spring", "1.2.70"));
}
"
    "@Test
@Test
void shouldCustomizeCompilerOptions() {
    GradleBuild build = new GradleBuild();
    new KotlinGradleBuildCustomizer(new SimpleKotlinProjectSettings("1.2.70"), '\'').customize(build);
    assertThat(build.extensions().values()).singleElement().satisfies((kotlin) -> {
        assertThat(kotlin.getName()).isEqualTo("kotlin");
        assertThat(kotlin.getNested().values()).singleElement().satisfies((compilerOptions) -> {
            assertThat(compilerOptions.getName()).isEqualTo("compilerOptions");
            assertThat(compilerOptions.getInvocations()).singleElement().satisfies((freeCompilerArgs) -> {
                assertThat(freeCompilerArgs.getTarget()).isEqualTo("freeCompilerArgs.addAll");
                assertThat(freeCompilerArgs.getArguments()).containsExactly("'-Xjsr305=strict'");
            });
        });
    });
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/code/kotlin/KotlinJpaGradleBuildCustomizerTests.java
Tests:
    "@Test
private GradleBuild getCustomizedBuild(Dependency dependency) {
    InitializrMetadata metadata = InitializrMetadataTestBuilder.withDefaults().addDependencyGroup("test", dependency).build();
    SimpleKotlinProjectSettings settings = new SimpleKotlinProjectSettings("1.2.70");
    MutableProjectDescription projectDescription = new MutableProjectDescription();
    projectDescription.setPlatformVersion(Version.parse("1.0.0"));
    KotlinJpaGradleBuildCustomizer customizer = new KotlinJpaGradleBuildCustomizer(metadata, settings, projectDescription, '\"');
    GradleBuild build = new GradleBuild(new MetadataBuildItemResolver(metadata, Version.parse("2.0.0.RELEASE")));
    build.dependencies().add("foo");
    customizer.customize(build);
    return build;
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator/src/test/java/io/spring/initializr/generator/buildsystem/gradle/GroovyDslGradleBuildWriterTests.java
Tests:
    "@Test
@Test
void gradleBuildWithTaskCustomizedWithInvocations() {
    GradleBuild build = new GradleBuild();
    build.tasks().customize("asciidoctor", (task) -> {
        task.invoke("inputs.dir", "snippetsDir");
        task.invoke("dependsOn", "test");
    });
    assertThat(write(build)).contains("""
        tasks.named('asciidoctor') {
        	inputs.dir snippetsDir
        	dependsOn test
        }""");
}
"
    "@Test
@Test
void gradleBuildWithTaskCustomizedWithInvocationAndNoArgument() {
    GradleBuild build = new GradleBuild();
    build.tasks().customize("test", (task) -> task.invoke("myMethod"));
    assertThat(write(build)).contains("""
        tasks.named('test') {
        	myMethod()
        }""");
}
"
    "@Test
@Test
void gradleBuildWithTaskCustomizedWithAssignments() {
    GradleBuild build = new GradleBuild();
    build.tasks().customize("compileKotlin", (task) -> {
        task.attribute("kotlinOptions.freeCompilerArgs", "['-Xjsr305=strict']");
        task.attribute("kotlinOptions.jvmTarget", "'1.8'");
    });
    assertThat(write(build)).contains("""
        tasks.named('compileKotlin') {
        	kotlinOptions.freeCompilerArgs = ['-Xjsr305=strict']
        	kotlinOptions.jvmTarget = '1.8'
        }""");
}
"
    "@Test
@Test
void gradleBuildWithTaskCustomizedWithNestedCustomization() {
    GradleBuild build = new GradleBuild();
    build.tasks().customize("compileKotlin", (compileKotlin) -> compileKotlin.nested("kotlinOptions", (kotlinOptions) -> {
        kotlinOptions.attribute("freeCompilerArgs", "['-Xjsr305=strict']");
        kotlinOptions.attribute("jvmTarget", "'1.8'");
    }));
    assertThat(write(build)).contains("""
        tasks.named('compileKotlin') {
        	kotlinOptions {
        		freeCompilerArgs = ['-Xjsr305=strict']
        		jvmTarget = '1.8'
        	}
        }""");
}
"
    "@Test
@Test
void gradleBuildWithConfigurationCustomization() {
    GradleBuild build = new GradleBuild();
    build.configurations().customize("developmentOnly", (configuration) -> configuration.extendsFrom("compile"));
    build.configurations().customize("developmentOnly", (configuration) -> configuration.extendsFrom("testCompile"));
    assertThat(write(build)).contains("""
        configurations {
        	developmentOnly {
        		extendsFrom compile, testCompile
        	}
        }""");
}
"
    "@Test
@Test
void gradleBuildWithConfigurationCustomizations() {
    GradleBuild build = new GradleBuild();
    build.configurations().customize("developmentOnly", (configuration) -> configuration.extendsFrom("compile"));
    build.configurations().customize("testOnly", (configuration) -> configuration.extendsFrom("testCompile"));
    assertThat(write(build)).contains("""
        configurations {
        	developmentOnly {
        		extendsFrom compile
        	}
        	testOnly {
        		extendsFrom testCompile
        	}
        }""");
}
"
    "@Test
@Test
void shouldCustomizeExtensions() {
    GradleBuild build = new GradleBuild();
    build.extensions().customize("kotlin", (kotlin) -> kotlin.nested("compilerOptions", (compilerOptions) -> {
        compilerOptions.attributeWithType("jvmTarget", "JvmTarget.JVM_21", "org.jetbrains.kotlin.gradle.dsl.JvmTarget");
        compilerOptions.invoke("freeCompilerArgs.addAll", "'-Xjsr305=strict'", "'-Xexport-kdoc'");
    }));
    String written = write(build);
    assertThat(written).contains("import org.jetbrains.kotlin.gradle.dsl.JvmTarget");
    assertThat(written).contains("""
        kotlin {
        	compilerOptions {
        		freeCompilerArgs.addAll '-Xjsr305=strict', '-Xexport-kdoc'
        		jvmTarget = JvmTarget.JVM_21
        	}
        }""");
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator/src/test/java/io/spring/initializr/generator/project/ProjectGeneratorTests.java
Tests:
    "@Test
@Test
void generateInvokeProjectDescriptionCustomizersInOrder() {
    ProjectDescriptionCustomizer firstCustomizer = mock(ProjectDescriptionCustomizer.class);
    given(firstCustomizer.getOrder()).willReturn(5);
    ProjectDescriptionCustomizer secondCustomizer = mock(ProjectDescriptionCustomizer.class);
    given(secondCustomizer.getOrder()).willReturn(10);
    ProjectGenerator generator = new ProjectGenerator((context) -> {
        context.registerBean("first", ProjectDescriptionCustomizer.class, () -> secondCustomizer);
        context.registerBean("second", ProjectDescriptionCustomizer.class, () -> firstCustomizer);
    });
    MutableProjectDescription description = new MutableProjectDescription();
    generator.generate(description, (context) -> null);
    InOrder inOrder = inOrder(firstCustomizer, secondCustomizer);
    inOrder.verify(firstCustomizer).customize(description);
    inOrder.verify(secondCustomizer).customize(description);
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-web/src/test/java/io/spring/initializr/web/project/MetadataProjectDescriptionCustomizerTests.java
Tests:
    "@Test
@Test
void customizeShouldUseDefaultApplicationNameFromMetadata() {
    assertThat(customize(new MutableProjectDescription()).getApplicationName()).isEqualTo("Application");
}
"
    "@Test
@Test
void customizeShouldSetApplicationNameUsingNameWhenAbsent() {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setName("MyTest");
    assertThat(customize(description).getApplicationName()).isEqualTo("MyTestApplication");
}
"
    "@Test
@Test
void customizeShouldUseDefaultPlatformVersionFromMetadata() {
    assertThat(customize(new MutableProjectDescription()).getPlatformVersion()).isEqualTo(Version.parse("2.4.1"));
}
"
    "@Test
@Test
void customizeShouldUseDefaultFromMetadataOnEmptyGroup() {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setGroupId("  ");
    assertThat(customize(description).getGroupId()).isEqualTo("com.example");
}
"
    "@Test
@Test
void customizeShouldUseDefaultFromMetadataOnEmptyArtifact() {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setArtifactId("");
    assertThat(customize(description).getArtifactId()).isEqualTo("demo");
}
"
    "@Test
@Test
void customizeShouldUseDefaultFromMetadataOnEmptyName() {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setName("    ");
    assertThat(customize(description).getName()).isEqualTo("demo");
}
"
    "@Test
@Test
void customizeShouldUseDefaultFromMetadataOnEmptyDescription() {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setDescription("    ");
    assertThat(customize(description).getDescription()).isEqualTo("Demo project for Spring Boot");
}
"
    "@Test
@Test
void customizeShouldUseDefaultFromMetadataOnEmptyPackageName() {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setPackageName(" ");
    assertThat(customize(description).getPackageName()).isEqualTo("com.example.demo");
}
"
    "@Test
@Test
void customizeShouldUseDefaultFromMetadataWhenGeneratingPackageNameWithEmptyGroup() {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setGroupId("  ");
    assertThat(customize(description).getPackageName()).isEqualTo("com.example.demo");
}
"
    "@Test
@Test
void customizeShouldUseDefaultFromMetadataWhenGeneratingPackageNameWithEmptyArtifact() {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setArtifactId("  ");
    assertThat(customize(description).getPackageName()).isEqualTo("com.example.demo");
}
"
    "@Test
@Test
void customizeShouldUseDefaultFromMetadataOnEmptyVersion() {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setVersion("  ");
    assertThat(customize(description).getVersion()).isEqualTo("0.0.1-SNAPSHOT");
}
"
    "@Test
@Test
void customizeShouldNotCleanBaseDirWhenNotSameAsArtifactId() {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setArtifactId("correct ! ID @");
    description.setBaseDirectory("test");
    assertThat(customize(description).getBaseDirectory()).isEqualTo("test");
}
"
    "@Test
@Test
void customizeShouldCleanBaseDirWhenSameAsArtifactId() {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setArtifactId("correct ! ID @");
    description.setBaseDirectory("correct ! ID @");
    assertThat(customize(description).getBaseDirectory()).isEqualTo("correct-ID");
}
"
    "@Test
@Test
void customizeShouldNotCleanNameWhenNotSameAsArtifactId() {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setArtifactId("correct ! ID @");
    description.setName("test");
    assertThat(customize(description).getName()).isEqualTo("test");
}
"
    "@Test
@Test
void customizeShouldCleanNameWhenSameAsArtifactId() {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setArtifactId("correct ! ID @");
    description.setName("correct ! ID @");
    assertThat(customize(description).getName()).isEqualTo("correct-ID");
}
"
    "@Test
@Test
void customizeShouldNotCleanArtifactIdWithValidChars() {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setArtifactId("correct_test");
    assertThat(customize(description).getArtifactId()).isEqualTo("correct_test");
}
"
    "@Test
@Test
void customizeShouldCleanInvalidArtifactIdWithHyphenSeparator() {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setArtifactId("correct ! ID @");
    assertThat(customize(description).getArtifactId()).isEqualTo("correct-ID");
}
"
    "@Test
@Test
void customizeWithCleanedArtifactIdShouldNotContainHyphenBeforeOrAfterValidSpecialCharacter() {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setArtifactId("correct !_!ID @");
    assertThat(customize(description).getArtifactId()).isEqualTo("correct_ID");
}
"
    "@Test
@Test
void customizeShouldNotCleanGroupIdWithValidChars() {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setGroupId("correct.ID12");
    assertThat(customize(description).getGroupId()).isEqualTo("correct.ID12");
}
"
    "@Test
@Test
void customizeShouldCleanInvalidGroupIdWithDotDelimiter() {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setGroupId("correct !  ID12 @");
    assertThat(customize(description).getGroupId()).isEqualTo("correct.ID12");
}
"
    "@Test
MutableProjectDescription customize(MutableProjectDescription description) {
    new MetadataProjectDescriptionCustomizer(this.metadata).customize(description);
    return description;
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator/src/test/java/io/spring/initializr/generator/buildsystem/gradle/KotlinDslGradleBuildWriterTests.java
Tests:
    "@Test
@Test
void gradleBuildWithTaskCustomizedWithInvocations() {
    GradleBuild build = new GradleBuild();
    build.tasks().customize("asciidoctor", (task) -> {
        task.invoke("inputs.dir", "snippetsDir");
        task.invoke("dependsOn", "test");
    });
    assertThat(write(build)).contains("""
        tasks.asciidoctor {
        	inputs.dir(snippetsDir)
        	dependsOn(test)
        }""");
}
"
    "@Test
@Test
void gradleBuildWithTaskCustomizedWithAssignments() {
    GradleBuild build = new GradleBuild();
    build.tasks().customize("compileKotlin", (task) -> {
        task.attribute("kotlinOptions.freeCompilerArgs", "listOf(\"-Xjsr305=strict\")");
        task.attribute("kotlinOptions.jvmTarget", "\"1.8\"");
    });
    assertThat(write(build)).contains("""
        tasks.compileKotlin {
        	kotlinOptions.freeCompilerArgs = listOf("-Xjsr305=strict")
        	kotlinOptions.jvmTarget = "1.8"
        }""");
}
"
    "@Test
@Test
void gradleBuildWithTaskCustomizedWithNestedCustomization() {
    GradleBuild build = new GradleBuild();
    build.tasks().customize("compileKotlin", (compileKotlin) -> compileKotlin.nested("kotlinOptions", (kotlinOptions) -> {
        kotlinOptions.attribute("freeCompilerArgs", "listOf(\"-Xjsr305=strict\")");
        kotlinOptions.attribute("jvmTarget", "\"1.8\"");
    }));
    assertThat(write(build)).contains("""
        tasks.compileKotlin {
        	kotlinOptions {
        		freeCompilerArgs = listOf("-Xjsr305=strict")
        		jvmTarget = "1.8"
        	}
        }""");
}
"
    "@Test
@Test
void gradleBuildWithConfigurationCustomization() {
    GradleBuild build = new GradleBuild();
    build.configurations().add("custom");
    build.configurations().customize("runtimeClasspath", (configuration) -> configuration.extendsFrom("custom"));
    build.configurations().customize("runtimeClasspath", (configuration) -> configuration.extendsFrom("builtIn"));
    assertThat(write(build)).contains("""
        val custom by configurations.creating
        configurations {
        	runtimeClasspath {
        		extendsFrom(custom, configurations.builtIn.get())
        	}
        }
        """);
}
"
    "@Test
@Test
void gradleBuildWithConfigurationCustomizations() {
    GradleBuild build = new GradleBuild();
    build.configurations().add("custom");
    build.configurations().customize("runtimeClasspath", (configuration) -> configuration.extendsFrom("custom"));
    build.configurations().customize("testRuntimeClasspath", (configuration) -> configuration.extendsFrom("builtIn"));
    assertThat(write(build)).contains("""
        val custom by configurations.creating
        configurations {
        	runtimeClasspath {
        		extendsFrom(custom)
        	}
        	testRuntimeClasspath {
        		extendsFrom(configurations.builtIn.get())
        	}
        }
        """);
}
"
    "@Test
@Test
void shouldCustomizeExtensions() {
    GradleBuild build = new GradleBuild();
    build.extensions().customize("kotlin", (kotlin) -> kotlin.nested("compilerOptions", (compilerOptions) -> {
        compilerOptions.attributeWithType("jvmTarget", "JvmTarget.JVM_21", "org.jetbrains.kotlin.gradle.dsl.JvmTarget");
        compilerOptions.invoke("freeCompilerArgs.addAll", "\"-Xjsr305=strict\"", "\"-Xexport-kdoc\"");
    }));
    String written = write(build);
    assertThat(written).contains("import org.jetbrains.kotlin.gradle.dsl.JvmTarget");
    assertThat(written).contains("""
        kotlin {
        	compilerOptions {
        		freeCompilerArgs.addAll("-Xjsr305=strict", "-Xexport-kdoc")
        		jvmTarget = JvmTarget.JVM_21
        	}
        }""");
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator/src/test/java/io/spring/initializr/generator/buildsystem/gradle/GradleTaskContainerTests.java
Tests:
    "@Test
@Test
void isEmptyWithTask() {
    GradleTaskContainer container = new GradleTaskContainer();
    container.customize("test", (task) -> task.attribute("fork", "true"));
    assertThat(container.isEmpty()).isFalse();
}
"
    "@Test
@Test
void hasWithMatchingTask() {
    GradleTaskContainer container = new GradleTaskContainer();
    container.customize("test", (task) -> task.attribute("fork", "true"));
    assertThat(container.has("test")).isTrue();
}
"
    "@Test
@Test
void hasWithNonMatchingNameOrType() {
    GradleTaskContainer container = new GradleTaskContainer();
    container.customize("test", (task) -> task.attribute("fork", "true"));
    container.customizeWithType("JavaCompile", (task) -> task.attribute("fork", "true"));
    assertThat(container.has("another")).isFalse();
}
"
    "@Test
@Test
void customizeTask() {
    GradleTaskContainer container = new GradleTaskContainer();
    container.customize("test", (task) -> {
        task.attribute("fork", "true");
        task.append("names", "test");
    });
    assertThat(container.values()).singleElement().satisfies((task) -> {
        assertThat(task.getName()).isEqualTo("test");
        assertThat(task.getType()).isNull();
        assertThat(task.getAttributes()).containsOnly(Attribute.set("fork", "true"), Attribute.append("names", "test"));
        assertThat(task.getInvocations()).isEmpty();
        assertThat(task.getNested()).isEmpty();
    });
}
"
    "@Test
@Test
void customizeTaskSeveralTimeReuseConfiguration() {
    GradleTaskContainer container = new GradleTaskContainer();
    container.customize("test", (task) -> {
        task.attribute("ignore", "false");
        task.attribute("fork", "true");
    });
    container.customize("test", (task) -> {
        task.attribute("fork", "false");
        task.invoke("method", "arg1", "arg2");
    });
    assertThat(container.values()).singleElement().satisfies((task) -> {
        assertThat(task.getName()).isEqualTo("test");
        assertThat(task.getType()).isNull();
        assertThat(task.getAttributes()).containsOnly(Attribute.set("ignore", "false"), Attribute.set("fork", "false"));
        assertThat(task.getInvocations()).singleElement().satisfies((invocation) -> {
            assertThat(invocation.getTarget()).isEqualTo("method");
            assertThat(invocation.getArguments()).containsOnly("arg1", "arg2");
        });
        assertThat(task.getNested()).isEmpty();
    });
}
"
    "@Test
@Test
void removeWithMatchingTask() {
    GradleTaskContainer container = new GradleTaskContainer();
    container.customize("test", (task) -> task.attribute("fork", "true"));
    assertThat(container.remove("test")).isTrue();
    assertThat(container.isEmpty()).isTrue();
}
"
    "@Test
@Test
void removeWithNonMatchingNameOrType() {
    GradleTaskContainer container = new GradleTaskContainer();
    container.customize("test", (task) -> task.attribute("fork", "true"));
    container.customizeWithType("JavaCompile", (task) -> task.attribute("fork", "true"));
    assertThat(container.remove("another")).isFalse();
    assertThat(container.isEmpty()).isFalse();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator/src/test/java/io/spring/initializr/generator/buildsystem/gradle/GradleConfigurationContainerTests.java
Tests:
    "@Test
@Test
void isEmptyWithCustomization() {
    GradleConfigurationContainer container = new GradleConfigurationContainer();
    container.customize("runtime", (configuration) -> configuration.extendsFrom("test"));
    assertThat(container.isEmpty()).isFalse();
}
"
    "@Test
@Test
void hasWithMatchingCustomization() {
    GradleConfigurationContainer container = new GradleConfigurationContainer();
    container.customize("runtime", (configuration) -> configuration.extendsFrom("test"));
    assertThat(container.has("runtime")).isTrue();
}
"
    "@Test
@Test
void hasWithNonMatchingNameOrCustomization() {
    GradleConfigurationContainer container = new GradleConfigurationContainer();
    container.add("devOnly");
    container.customize("runtime", (configuration) -> configuration.extendsFrom("test"));
    assertThat(container.has("test")).isFalse();
}
"
    "@Test
@Test
void removeWithMatchingCustomization() {
    GradleConfigurationContainer container = new GradleConfigurationContainer();
    container.customize("runtime", (configuration) -> configuration.extendsFrom("test"));
    assertThat(container.remove("runtime")).isTrue();
    assertThat(container.isEmpty()).isTrue();
}
"
    "@Test
@Test
void removeWithNonMatchingNameOrCustomization() {
    GradleConfigurationContainer container = new GradleConfigurationContainer();
    container.add("devOnly");
    container.customize("runtime", (configuration) -> configuration.extendsFrom("test"));
    assertThat(container.remove("test")).isFalse();
    assertThat(container.isEmpty()).isFalse();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/maven/DefaultMavenBuildCustomizerTests.java
Tests:
    "@Test
private MavenBuild customizeBuild(InitializrMetadata metadata, MutableProjectDescription description) {
    MavenBuild build = new MavenBuild();
    DefaultMavenBuildCustomizer customizer = new DefaultMavenBuildCustomizer(description, metadata);
    customizer.customize(build);
    return build;
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/code/kotlin/KotlinMavenBuildCustomizerTests.java
Tests:
    "@Test
@Test
void kotlinVersionPropertyIsConfigured() {
    MavenBuild build = new MavenBuild();
    new KotlinMavenBuildCustomizer(new SimpleKotlinProjectSettings("1.2.70")).customize(build);
    assertThat(build.properties().versions(VersionProperty::toStandardFormat)).containsOnly(entry("kotlin.version", "1.2.70"));
}
"
    "@Test
@Test
void buildSourceDirectoriesAreConfigured() {
    MavenBuild build = new MavenBuild();
    new KotlinMavenBuildCustomizer(new SimpleKotlinProjectSettings("1.2.70")).customize(build);
    assertThat(build.getSettings().getSourceDirectory()).isEqualTo("${project.basedir}/src/main/kotlin");
    assertThat(build.getSettings().getTestSourceDirectory()).isEqualTo("${project.basedir}/src/test/kotlin");
}
"
    "@Test
@Test
void kotlinMavenPluginIsConfigured() {
    MavenBuild build = new MavenBuild();
    new KotlinMavenBuildCustomizer(new SimpleKotlinProjectSettings("1.2.70")).customize(build);
    assertThat(build.plugins().values()).singleElement().satisfies((kotlinPlugin) -> {
        assertThat(kotlinPlugin.getGroupId()).isEqualTo("org.jetbrains.kotlin");
        assertThat(kotlinPlugin.getArtifactId()).isEqualTo("kotlin-maven-plugin");
        assertThat(kotlinPlugin.getVersionReference()).isNull();
        Configuration configuration = kotlinPlugin.getConfiguration();
        assertThat(configuration).isNotNull();
        assertThat(configuration.getSettings()).hasSize(2);
        Setting args = configuration.getSettings().get(0);
        assertThat(args.getName()).isEqualTo("args");
        assertThat(args.getValue()).asInstanceOf(InstanceOfAssertFactories.LIST).hasSize(1);
        assertThat(args.getValue()).asInstanceOf(InstanceOfAssertFactories.LIST).element(0).hasFieldOrPropertyWithValue("name", "arg").hasFieldOrPropertyWithValue("value", "-Xjsr305=strict");
        Setting compilerPlugins = configuration.getSettings().get(1);
        assertThat(compilerPlugins.getName()).isEqualTo("compilerPlugins");
        assertThat(compilerPlugins.getValue()).asInstanceOf(InstanceOfAssertFactories.LIST).hasSize(1);
        assertThat(compilerPlugins.getValue()).asInstanceOf(InstanceOfAssertFactories.LIST).element(0).hasFieldOrPropertyWithValue("name", "plugin").hasFieldOrPropertyWithValue("value", "spring");
        assertThat(kotlinPlugin.getExecutions()).isEmpty();
        assertThat(kotlinPlugin.getDependencies()).hasSize(1);
        Dependency allOpen = kotlinPlugin.getDependencies().get(0);
        assertThat(allOpen.getGroupId()).isEqualTo("org.jetbrains.kotlin");
        assertThat(allOpen.getArtifactId()).isEqualTo("kotlin-maven-allopen");
        assertThat(allOpen.getVersionReference()).isEqualTo(VersionReference.ofProperty("kotlin.version"));
    });
}
"
    "@Test
@Test
void kotlinMavenPluginWithSeveralArgs() {
    MavenBuild build = new MavenBuild();
    new KotlinMavenBuildCustomizer(new KotlinOneEightProjectSettings()).customize(build);
    assertThat(build.plugins().values()).singleElement().satisfies((kotlinPlugin) -> {
        Configuration configuration = kotlinPlugin.getConfiguration();
        Setting args = configuration.getSettings().get(0);
        assertThat(args.getName()).isEqualTo("args");
        assertThat(args.getValue()).asInstanceOf(InstanceOfAssertFactories.LIST).hasSize(2);
        assertThat(args.getValue()).asInstanceOf(InstanceOfAssertFactories.LIST).element(0).hasFieldOrPropertyWithValue("name", "arg").hasFieldOrPropertyWithValue("value", "-Done=1");
        assertThat(args.getValue()).asInstanceOf(InstanceOfAssertFactories.LIST).element(1).hasFieldOrPropertyWithValue("name", "arg").hasFieldOrPropertyWithValue("value", "-Dtwo=2");
    });
}
"
    "@Test
@Test
void kotlinMavenKotlinStdlibIsConfiguredWithKotlinOneEight() {
    MavenBuild build = new MavenBuild();
    new KotlinMavenBuildCustomizer(new KotlinOneEightProjectSettings()).customize(build);
    assertThat(build.dependencies().ids()).containsOnly("kotlin-stdlib");
    io.spring.initializr.generator.buildsystem.Dependency kotlinStdlib = build.dependencies().get("kotlin-stdlib");
    assertThat(kotlinStdlib.getGroupId()).isEqualTo("org.jetbrains.kotlin");
    assertThat(kotlinStdlib.getArtifactId()).isEqualTo("kotlin-stdlib");
    assertThat(kotlinStdlib.getVersion()).isNull();
    assertThat(kotlinStdlib.getScope()).isEqualTo(DependencyScope.COMPILE);
}
"
    "@Test
@Test
void kotlinMavenKotlinStdlibJdk8IsConfiguredWithKotlinOneSeven() {
    MavenBuild build = new MavenBuild();
    new KotlinMavenBuildCustomizer(new KotlinOneSevenProjectSettings()).customize(build);
    assertThat(build.dependencies().ids()).containsOnly("kotlin-stdlib");
    io.spring.initializr.generator.buildsystem.Dependency kotlinStdlib = build.dependencies().get("kotlin-stdlib");
    assertThat(kotlinStdlib.getGroupId()).isEqualTo("org.jetbrains.kotlin");
    assertThat(kotlinStdlib.getArtifactId()).isEqualTo("kotlin-stdlib-jdk8");
    assertThat(kotlinStdlib.getVersion()).isNull();
    assertThat(kotlinStdlib.getScope()).isEqualTo(DependencyScope.COMPILE);
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/code/kotlin/KotlinDependenciesConfigurerTests.java
Tests:
    "@Test
@Test
void configuresDependenciesForGradleBuild() {
    GradleBuild build = new GradleBuild();
    new KotlinDependenciesConfigurer().customize(build);
    assertThat(build.dependencies().ids()).containsOnly("kotlin-reflect", "kotlin-test-junit5");
    Dependency kotlinReflect = build.dependencies().get("kotlin-reflect");
    assertThat(kotlinReflect.getGroupId()).isEqualTo("org.jetbrains.kotlin");
    assertThat(kotlinReflect.getArtifactId()).isEqualTo("kotlin-reflect");
    assertThat(kotlinReflect.getVersion()).isNull();
    Dependency kotlinTest = build.dependencies().get("kotlin-test-junit5");
    assertThat(kotlinTest.getGroupId()).isEqualTo("org.jetbrains.kotlin");
    assertThat(kotlinTest.getArtifactId()).isEqualTo("kotlin-test-junit5");
    assertThat(kotlinTest.getScope()).isEqualTo(DependencyScope.TEST_COMPILE);
    assertThat(kotlinTest.getVersion()).isNull();
}
"
    "@Test
@Test
void configuresDependenciesForMavenBuild() {
    MavenBuild build = new MavenBuild();
    new KotlinDependenciesConfigurer().customize(build);
    assertThat(build.dependencies().ids()).containsOnly("kotlin-reflect", "kotlin-test-junit5");
    Dependency kotlinReflect = build.dependencies().get("kotlin-reflect");
    assertThat(kotlinReflect.getGroupId()).isEqualTo("org.jetbrains.kotlin");
    assertThat(kotlinReflect.getArtifactId()).isEqualTo("kotlin-reflect");
    assertThat(kotlinReflect.getVersion()).isNull();
    Dependency kotlinTest = build.dependencies().get("kotlin-test-junit5");
    assertThat(kotlinTest.getGroupId()).isEqualTo("org.jetbrains.kotlin");
    assertThat(kotlinTest.getArtifactId()).isEqualTo("kotlin-test-junit5");
    assertThat(kotlinTest.getScope()).isEqualTo(DependencyScope.TEST_COMPILE);
    assertThat(kotlinTest.getVersion()).isNull();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/GradleAnnotationProcessorScopeBuildCustomizerTests.java
Tests:
    "@Test
@Test
void compileOnlyConfigurationIsAddedWithAnnotationProcessorDependency() {
    GradleBuild build = new GradleBuild();
    build.dependencies().add("lib", "com.example", "lib", DependencyScope.COMPILE);
    build.dependencies().add("ap", "com.example", "model-generator", DependencyScope.ANNOTATION_PROCESSOR);
    customize(build);
    assertThat(build.configurations().customizations()).singleElement().satisfies((configuration) -> {
        assertThat(configuration.getName()).isEqualTo("compileOnly");
        assertThat(configuration.getExtendsFrom()).containsOnly("annotationProcessor");
    });
}
"
    "@Test
@Test
void compileOnlyConfigurationIsNotAddedWithNonMatchingDependency() {
    GradleBuild build = new GradleBuild();
    build.dependencies().add("lib", "com.example", "lib", DependencyScope.COMPILE);
    build.dependencies().add("another", "com.example", "another", DependencyScope.RUNTIME);
    customize(build);
    assertThat(build.configurations().isEmpty()).isTrue();
}
"
    "@Test
private void customize(GradleBuild build) {
    new GradleAnnotationProcessorScopeBuildCustomizer().customize(build);
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/SimpleBuildCustomizerTests.java
Tests:
    "@Test
private MavenBuild customizeBuild(MutableProjectDescription description) {
    MavenBuild build = new MavenBuild();
    SimpleBuildCustomizer customizer = new SimpleBuildCustomizer(description);
    customizer.customize(build);
    return build;
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/code/groovy/GroovyMavenBuildCustomizerTests.java
Tests:
    "@Test
@Test
void groovyMavenPluginIsConfigured() {
    MavenBuild build = new MavenBuild();
    new GroovyMavenBuildCustomizer().customize(build);
    assertThat(build.plugins().values()).singleElement().satisfies((groovyPlugin) -> {
        assertThat(groovyPlugin.getGroupId()).isEqualTo("org.codehaus.gmavenplus");
        assertThat(groovyPlugin.getArtifactId()).isEqualTo("gmavenplus-plugin");
        assertThat(groovyPlugin.getVersionReference()).isEqualTo(VersionReference.ofValue("1.13.1"));
        Configuration configuration = groovyPlugin.getConfiguration();
        assertThat(configuration).isNull();
        assertThat(groovyPlugin.getExecutions()).hasSize(1);
        Execution execution = groovyPlugin.getExecutions().get(0);
        assertThat(execution.getId()).isNull();
        assertThat(execution.getGoals()).containsExactly("addSources", "addTestSources", "generateStubs", "compile", "generateTestStubs", "compileTests", "removeStubs", "removeTestStubs");
        assertThat(execution.getPhase()).isNull();
        assertThat(execution.getConfiguration()).isNull();
    });
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/GradleConfigurationBuildCustomizerTests.java
Tests:
    "@Test
@Test
void providedRuntimeConfigurationIsAddedWithNonWarProject() {
    GradleBuild build = new GradleBuild();
    build.dependencies().add("lib", "com.example", "lib", DependencyScope.COMPILE);
    build.dependencies().add("servlet", "jakarta.servlet", "jakarta.servlet-api", DependencyScope.PROVIDED_RUNTIME);
    customize(build);
    assertThat(build.configurations().names()).containsOnly("providedRuntime");
}
"
    "@Test
@Test
void providedRuntimeConfigurationIsNotAddedWithWarProject() {
    GradleBuild build = new GradleBuild();
    build.plugins().add("war");
    build.dependencies().add("lib", "com.example", "lib", DependencyScope.COMPILE);
    build.dependencies().add("servlet", "jakarta.servlet", "jakarta.servlet-api", DependencyScope.PROVIDED_RUNTIME);
    customize(build);
    assertThat(build.configurations().customizations()).isEmpty();
}
"
    "@Test
@Test
void providedRuntimeConfigurationIsNotAddedWithNonMatchingDependency() {
    GradleBuild build = new GradleBuild();
    build.dependencies().add("lib", "com.example", "lib", DependencyScope.COMPILE);
    build.dependencies().add("another", "com.example", "another", DependencyScope.RUNTIME);
    customize(build);
    assertThat(build.configurations().customizations()).isEmpty();
}
"
    "@Test
private void customize(GradleBuild build) {
    new GradleConfigurationBuildCustomizer().customize(build);
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/DependencyManagementBuildCustomizerTests.java
Tests:
    "@Test
private void customizeBuild(Build build, InitializrMetadata metadata) {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setPlatformVersion(Version.parse("2.4.0"));
    new DependencyManagementBuildCustomizer(description, metadata).customize(build);
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/DevelopmentOnlyDependencyGradleBuildCustomizerTests.java
Tests:
    "@Test
@Test
void shouldAddDevelopmentOnlyConfiguration() {
    GradleBuild build = new GradleBuild();
    build.dependencies().add("devtools", DEVTOOLS_DEPENDENCY);
    new DevelopmentOnlyDependencyGradleBuildCustomizer("devtools").customize(build);
    Dependency devtools = build.dependencies().get("devtools");
    assertThat(devtools).isInstanceOf(GradleDependency.class);
    assertThat(((GradleDependency) devtools).getConfiguration()).isEqualTo("developmentOnly");
}
"
    "@Test
@Test
void shouldNotFailOnDuplicateDependencies() {
    GradleBuild build = new GradleBuild();
    build.dependencies().add("devtools", DEVTOOLS_DEPENDENCY);
    build.dependencies().add("devtools", DEVTOOLS_DEPENDENCY);
    build.dependencies().add("web", WEB_DEPENDENCY);
    new DevelopmentOnlyDependencyGradleBuildCustomizer("devtools").customize(build);
    Dependency devtools = build.dependencies().get("devtools");
    assertThat(devtools).isInstanceOf(GradleDependency.class);
    assertThat(((GradleDependency) devtools).getConfiguration()).isEqualTo("developmentOnly");
}
"
    "@Test
@Test
void shouldIgnoreOtherDependencies() {
    GradleBuild build = new GradleBuild();
    build.dependencies().add("devtools", DEVTOOLS_DEPENDENCY);
    build.dependencies().add("web", WEB_DEPENDENCY);
    new DevelopmentOnlyDependencyGradleBuildCustomizer("devtools").customize(build);
    Dependency devtools = build.dependencies().get("devtools");
    assertThat(devtools).isInstanceOf(GradleDependency.class);
    assertThat(((GradleDependency) devtools).getConfiguration()).isEqualTo("developmentOnly");
    Dependency web = build.dependencies().get("web");
    assertThat(web).isNotInstanceOf(GradleDependency.class);
}
"
    "@Test
@Test
void shouldNotChangeDependencies() {
    GradleBuild build = new GradleBuild();
    build.dependencies().add("web", WEB_DEPENDENCY);
    new DevelopmentOnlyDependencyGradleBuildCustomizer("devtools").customize(build);
    assertThat(build.dependencies().ids()).containsOnly("web");
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/maven/OptionalDependencyMavenBuildCustomizerTests.java
Tests:
    "@Test
@Test
void shouldAddOptionalScope() {
    MavenBuild build = new MavenBuild();
    build.dependencies().add("devtools", DEVTOOLS_DEPENDENCY);
    new OptionalDependencyMavenBuildCustomizer("devtools").customize(build);
    Dependency devtools = build.dependencies().get("devtools");
    assertThat(devtools).isInstanceOf(MavenDependency.class);
    assertThat(((MavenDependency) devtools).isOptional()).isTrue();
}
"
    "@Test
@Test
void shouldNotFailOnDuplicateDependencies() {
    MavenBuild build = new MavenBuild();
    build.dependencies().add("devtools", DEVTOOLS_DEPENDENCY);
    build.dependencies().add("devtools", DEVTOOLS_DEPENDENCY);
    new OptionalDependencyMavenBuildCustomizer("devtools").customize(build);
    Dependency devtools = build.dependencies().get("devtools");
    assertThat(devtools).isInstanceOf(MavenDependency.class);
    assertThat(((MavenDependency) devtools).isOptional()).isTrue();
}
"
    "@Test
@Test
void shouldIgnoreOtherDependencies() {
    MavenBuild build = new MavenBuild();
    build.dependencies().add("devtools", DEVTOOLS_DEPENDENCY);
    build.dependencies().add("web", WEB_DEPENDENCY);
    new OptionalDependencyMavenBuildCustomizer("devtools").customize(build);
    Dependency devtools = build.dependencies().get("devtools");
    assertThat(devtools).isInstanceOf(MavenDependency.class);
    assertThat(((MavenDependency) devtools).isOptional()).isTrue();
    Dependency web = build.dependencies().get("web");
    assertThat(web).isNotInstanceOf(MavenDependency.class);
}
"
    "@Test
@Test
void shouldNotChangeDependencies() {
    MavenBuild build = new MavenBuild();
    build.dependencies().add("web", WEB_DEPENDENCY);
    new OptionalDependencyMavenBuildCustomizer("devtools").customize(build);
    assertThat(build.dependencies().ids()).containsOnly("web");
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/code/kotlin/KotlinJacksonBuildCustomizerTests.java
Tests:
    "@Test
private MavenBuild getCustomizedBuild(Dependency dependency, MutableProjectDescription description) {
    InitializrMetadata metadata = InitializrMetadataTestBuilder.withDefaults().addDependencyGroup("test", dependency).build();
    KotlinJacksonBuildCustomizer customizer = new KotlinJacksonBuildCustomizer(metadata, description);
    MavenBuild build = new MavenBuild(new MetadataBuildItemResolver(metadata, Version.parse("2.0.0.RELEASE")));
    build.dependencies().add("foo");
    customizer.customize(build);
    return build;
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/SpringBootVersionRepositoriesBuildCustomizerTests.java
Tests:
    "@Test
@Test
void addMavenCentralWhenUsingRelease() {
    MavenBuild build = new MavenBuild();
    new SpringBootVersionRepositoriesBuildCustomizer(Version.parse("2.1.0.RELEASE")).customize(build);
    assertThat(build.repositories().items()).containsExactly(MavenRepository.MAVEN_CENTRAL);
}
"
    "@Test
@Test
void addMavenCentralWhenUsingSemVerRelease() {
    MavenBuild build = new MavenBuild();
    new SpringBootVersionRepositoriesBuildCustomizer(Version.parse("2.1.0")).customize(build);
    assertThat(build.repositories().items()).containsExactly(MavenRepository.MAVEN_CENTRAL);
}
"
    "@Test
@Test
void addMavenCentralAndMilestonesWhenUsingMilestone() {
    MavenBuild build = new MavenBuild();
    new SpringBootVersionRepositoriesBuildCustomizer(Version.parse("2.1.0.M1")).customize(build);
    assertThat(build.repositories().items()).containsExactly(MavenRepository.MAVEN_CENTRAL, SpringBootVersionRepositoriesBuildCustomizer.SPRING_MILESTONES);
}
"
    "@Test
@Test
void addMavenCentralAndMilestonesWhenUsingSemVerMilestone() {
    MavenBuild build = new MavenBuild();
    new SpringBootVersionRepositoriesBuildCustomizer(Version.parse("2.1.0-M1")).customize(build);
    assertThat(build.repositories().items()).containsExactly(MavenRepository.MAVEN_CENTRAL, SpringBootVersionRepositoriesBuildCustomizer.SPRING_MILESTONES);
}
"
    "@Test
@Test
void addMavenCentralAndMilestonesWhenUsingReleaseCandidate() {
    MavenBuild build = new MavenBuild();
    new SpringBootVersionRepositoriesBuildCustomizer(Version.parse("2.1.0.RC1")).customize(build);
    assertThat(build.repositories().items()).containsExactly(MavenRepository.MAVEN_CENTRAL, SpringBootVersionRepositoriesBuildCustomizer.SPRING_MILESTONES);
}
"
    "@Test
@Test
void addMavenCentralAndMilestonesWhenUsingSemVerReleaseCandidate() {
    MavenBuild build = new MavenBuild();
    new SpringBootVersionRepositoriesBuildCustomizer(Version.parse("2.1.0-RC1")).customize(build);
    assertThat(build.repositories().items()).containsExactly(MavenRepository.MAVEN_CENTRAL, SpringBootVersionRepositoriesBuildCustomizer.SPRING_MILESTONES);
}
"
    "@Test
@Test
void addMavenCentralAndNonReleaseWhenUsingSnapshot() {
    MavenBuild build = new MavenBuild();
    new SpringBootVersionRepositoriesBuildCustomizer(Version.parse("2.1.0.BUILD-SNAPSHOT")).customize(build);
    assertThat(build.repositories().items()).containsExactly(MavenRepository.MAVEN_CENTRAL, SpringBootVersionRepositoriesBuildCustomizer.SPRING_MILESTONES, SpringBootVersionRepositoriesBuildCustomizer.SPRING_SNAPSHOTS);
}
"
    "@Test
@Test
void firstSnapshotReleaseShouldAddMilestoneRepository() {
    MavenBuild build = new MavenBuild();
    new SpringBootVersionRepositoriesBuildCustomizer(Version.parse("2.1.0-SNAPSHOT")).customize(build);
    assertThat(build.repositories().items()).containsExactly(MavenRepository.MAVEN_CENTRAL, SpringBootVersionRepositoriesBuildCustomizer.SPRING_MILESTONES, SpringBootVersionRepositoriesBuildCustomizer.SPRING_SNAPSHOTS);
}
"
    "@Test
@Test
void maintenanceReleasesShouldNotAddMilestoneRepository() {
    MavenBuild build = new MavenBuild();
    new SpringBootVersionRepositoriesBuildCustomizer(Version.parse("2.1.1-SNAPSHOT")).customize(build);
    assertThat(build.repositories().items()).containsExactly(MavenRepository.MAVEN_CENTRAL, SpringBootVersionRepositoriesBuildCustomizer.SPRING_SNAPSHOTS);
}
"Scenario 1: Test Customization of MavenBuild with Non-Empty settings
  Details:
    TestName: testCustomizeBuildWithNonEmptySettings
    Description: This test validates whether the settings of MavenBuild is populated correctly upon invoking the customize method.
  Execution:
    Arrange: Create an instance of the MavenBuild with non-empty settings and pass it to the customize method.
    Act: Invoke the customize method.
    Assert: Check that the build settings have been correctly populated and altered as expected by the customize method.
  Validation:
    The proper setting/altering of build settings is crucial for the proper functioning of the application. It defines how the Maven build process would occur. Hence we need to make sure if it's been set correctly.

Scenario 2: Test Customization of MavenBuild with Empty settings
  Details:
    TestName: testCustomizeBuildWithEmptySettings
    Description: This test checks whether the customize method can correctly handle when the MavenBuild instance has empty settings.
  Execution:
    Arrange: Create an instance of the MavenBuild with empty settings and pass it to the customize method.
    Act: Invoke the customize method.
    Assert: Check that the build settings remain unaltered.
  Validation:
    The application should be able to gracefully handle cases where certain build settings are not provided.

Scenario 3: Test Customization of MavenBuild with invalid metadata
  Details:
    TestName: testCustomizeBuildWithInvalidMetadata
    Description: The test verifies that the customize method can handle cases where the MavenBuild instance has invalid metadata.
  Execution:
    Arrange: Create an instance of the MavenBuild with invalid metadata and pass it to the customize method.
    Act: Invoke the customize method.
    Assert: Check if the correct exceptions have been thrown.
  Validation:
    The application should raise exceptions if it encounters invalid metadata during the customization process. This is to ensure the build process doesn't proceed with incorrect metadata information.

Scenario 4: Test if customize method adds correct plugins to MavenBuild
  Details:
    TestName: testCustomizeBuildWithPlugins
    Description: This test checks whether the customize method correctly adds the necessary plugins to the MavenBuild.
  Execution:
    Arrange: Create a MavenBuild instance and pass it to the customize method.
    Act: Invoke the customize method.
    Assert: Verify that the required plugins ("org.springframework.boot", "spring-boot-maven-plugin") have been added to the MavenBuild.
  Validation:
    It is crucial for the build process to include the necessary plugins. This step ensures that the customize method successfully handles this.

Scenario 5: Test if customize method configures properties and settings for a build
  Details:
    TestName: testCustomizeBuildPropertiesAndSettings
    Description: This test verifies if the customize method correctly configures properties and settings for the MavenBuild.
  Execution:
    Arrange: Create a MavenBuild instance and pass it to the customize method.
    Act: Invoke the customize method.
    Assert: Validate that the properties("java.version", "project.build.sourceEncoding", "project.reporting.outputEncoding") and settings have been correctly set.
  Validation:
    The properties of the MavenBuild should be correctly set to desired values during customization. This ensures that the build process proceeds with the right configurations.

Scenario 6: Test if customize method handles addition of BillOfMaterials to build
  Details:
    TestName: testCustomizeBillOfMaterialsAddition
    Description: This test verifies if the customize method correctly handles the addition of BillOfMaterials to the MavenBuild.
  Execution:
    Arrange: Create a MavenBuild instance that does not have the BillOfMaterials and pass it to the customize method.
    Act: Invoke the customize method.
    Assert: Validate that BillOfMaterials has been successfully added to the build.
  Validation:
    BillOfMaterials is an essential part of the MavenBuild, hence its correct addition needs to be validated.

Scenario 7: Test if customize method handles ParentPom resolution correctly
  Details:
    TestName: testCustomizeParentPomResolution
    Description: This test verifies the correctness of ParentPom resolution by the customize method.
  Execution:
    Arrange: Create a MavenBuild instance and pass it to the customize method.
    Act: Invoke the customize method.
    Assert: Validate the groupId, artifactId and version of the ParentPom.
  Validation:
    The ParentPom forms a crucial part of the MavenBuild data. Hence, its correct resolution and population in the build process is essential.

Scenario 8: Test for exception handling in the customize method
  Details:
    TestName: testCustomizeExceptionHandling
    Description: This test checks if the customize method correctly handles exceptions that might be thrown during customization.
  Execution:
    Arrange: Create a MavenBuild instance with data designed to trigger exceptions during customization and pass it to the customize method.
    Act: Invoke the customize method.
    Assert: Check if the correct exceptions are thrown during the execution.
  Validation:
    Proper exception handling ensures the robustness and reliability of the code. The test checks if exceptions are correctly identified and managed during customization.
*/

// ********RoostGPT********

package io.spring.initializr.generator.spring.build.maven;

import io.spring.initializr.generator.buildsystem.maven.MavenSettings;
import io.spring.initializr.generator.language.LanguageDescription;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.support.MetadataBuildItemMapper;
import io.spring.initializr.metadata.support.MissingParentPomException;
import io.spring.initializr.metadata.support.PomValidationException;
import io.spring.initializr.generator.spring.build.maven.DefaultMavenBuildCustomizer;
import io.spring.initializr.generator.project.ProjectDescription;
import org.junit.jupiter.api.*;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;
import org.junit.jupiter.api.extension.ExtendWith;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;
import io.spring.initializr.generator.buildsystem.BillOfMaterials;
import io.spring.initializr.generator.buildsystem.maven.MavenBuild;
import io.spring.initializr.generator.spring.build.BuildCustomizer;
import io.spring.initializr.generator.version.VersionProperty;
import io.spring.initializr.metadata.InitializrConfiguration.Env.Maven;
import io.spring.initializr.metadata.InitializrConfiguration.Env.Maven.ParentPom;

@ExtendWith(MockitoExtension.class)
class DefaultMavenBuildCustomizerCustomizeTest {

	@Mock
	private InitializrMetadata metadata;

	@Mock
	private MavenSettings mavenSettings;

	@Test
	@Tag("valid")
	void testCustomizeBuildWithNonEmptySettings() {
		ProjectDescription projectDescription = new ProjectDescription();
		projectDescription.setName("Sample Project");
		projectDescription.setDescription("Sample project description");
		when(metadata.getConfiguration().getEnv().getMaven()).thenReturn(mavenSettings);
		DefaultMavenBuildCustomizer customizer = new DefaultMavenBuildCustomizer(projectDescription, metadata);
		MavenBuild build = new MavenBuild();
		customizer.customize(build);
		assertEquals(build.settings().get(0), "Sample Project");
		assertEquals(build.settings().get(1), "Sample project description");
	}

	@Test
	@Tag("invalid")
	void testCustomizeBuildWithEmptySettings() {
		ProjectDescription projectDescription = new ProjectDescription();
		when(metadata.getConfiguration().getEnv().getMaven()).thenReturn(null);
		DefaultMavenBuildCustomizer customizer = new DefaultMavenBuildCustomizer(projectDescription, metadata);
		MavenBuild build = new MavenBuild();
		customizer.customize(build);
		assertTrue(build.settings().isEmpty());
	}

	@Test
	@Tag("boundary")
	void testCustomizeBuildPropertiesAndSettings() {
		ProjectDescription projectDescription = new ProjectDescription();
		projectDescription.setLanguage(new LanguageDescription("Java", "16"));
		when(metadata.getConfiguration().getEnv().getMaven()).thenReturn(mavenSettings);
		DefaultMavenBuildCustomizer customizer = new DefaultMavenBuildCustomizer(projectDescription, metadata);
		MavenBuild build = new MavenBuild();
		customizer.customize(build);
		assertEquals(build.properties().get("java.version"), "16");
	}

	@Test
	@Tag("integration")
	void testCustomizeParentPomResolution() {
		ProjectDescription projectDescription = new ProjectDescription();
		when(metadata.getConfiguration().getEnv().getMaven().resolveParentPom(Mockito.anyString()))
			.thenThrow(new MissingParentPomException("Missing Parent Pom"));
		DefaultMavenBuildCustomizer customizer = new DefaultMavenBuildCustomizer(projectDescription, metadata);
		MavenBuild build = new MavenBuild();
		assertThrows(MissingParentPomException.class, () -> customizer.customize(build));
	}

	@Test
	@Tag("boundary")
	void testCustomizeExceptionHandling() {
		ProjectDescription projectDescription = new ProjectDescription();
		when(metadata.createSpringBootBom(Mockito.anyString(), Mockito.anyString()))
			.thenThrow(new PomValidationException("Invalid POM"));
		DefaultMavenBuildCustomizer customizer = new DefaultMavenBuildCustomizer(projectDescription, metadata);
		MavenBuild build = new MavenBuild();
		assertThrows(PomValidationException.class, () -> customizer.customize(build));
	}

}