/*
 * Copyright 2012-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=compareTo_56aba6d64f
ROOST_METHOD_SIG_HASH=compareTo_a426e303a2

Scenario 1: Test case where both VersionProperties have the same 'property' value
Details:
  TestName: comparePropertiesWithEqualValues
  Description: This test checks the compareTo method when the property values of both 'VersionProperty' objects are the same.
Execution:
  Arrange: Create two VersionProperty objects with the same 'property' value.
  Act: Invoke compareTo method on one object passing the other object as argument.
  Assert: Assert that the returned value is 0.
Validation:
  Since both properties are identical, the expectation is that the compareTo method will return 0. Thus, the method should return zero if both properties are equal.

Scenario 2: Test case where 'property' of first VersionProperty is smaller than the other
Details:
  TestName: comparePropertyFirstSmallerThanOther
  Description: This test checks the compareTo method when the 'property' value of the first 'VersionProperty' object is smaller when compared lexicographically to the other.
Execution:
  Arrange: Create two VersionProperty objects with different 'property' values such that the first one's property is lexicographically smaller.
  Act: Invoke compareTo method on the first object passing the second one as argument.
  Assert: Assert that the returned value is less than 0.
Validation:
  The method should return a negative integer if the first property value is less than the second one. Thus, the expected result should be a negative integer.

Scenario 3: Test case where 'property' of first VersionProperty is larger than the other
Details:
  TestName: comparePropertyFirstLargerThanOther
  Description: This test checks the compareTo method when the 'property' value of the first 'VersionProperty' object is larger when compared lexicographically to the other.
Execution:
  Arrange: Create two VersionProperty objects with different 'property' values where the first one's property is lexicographically larger.
  Act: Invoke compareTo method on the first object passing the second one as argument.
  Assert: Assert that the returned value is greater than 0.
Validation:
  The method should return a positive integer if the first property value is greater than the second one. Thus, the expected result should be a positive integer.

Scenario 4: Test case where object compared with is null
Details:
  TestName: comparePropertyWithNull
  Description: This test checks the compareTo method when null is passed as argument.
Execution:
  Arrange: Create a VersionProperty object and set an arbitrary 'property' value.
  Act: Invoke compareTo method on the object passing null as argument.
  Assert: Catch NullPointerException.
Validation:
  The method should throw a NullPointerException if the passed parameter is null.

*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import org.springframework.util.StringUtils;

public class VersionPropertyCompareToTest {

	@Test
	@Tag("valid")
	public void comparePropertiesWithEqualValues() {
		VersionProperty versionProperty1 = VersionProperty.of("someproperty", true);
		VersionProperty versionProperty2 = VersionProperty.of("someproperty", true);
		int comparisonResult = versionProperty1.compareTo(versionProperty2);
		assertEquals(0, comparisonResult, "Expected comparison of equal properties to be 0");
	}

	@Test
	@Tag("valid")
	public void comparePropertyFirstSmallerThanOther() {
		VersionProperty versionProperty1 = VersionProperty.of("abc", true);
		VersionProperty versionProperty2 = VersionProperty.of("def", true);
		int comparisonResult = versionProperty1.compareTo(versionProperty2);
		assertEquals(-1, comparisonResult,
				"Expected comparison result when first property is smaller to be less than 0");
	}

	@Test
	@Tag("valid")
	public void comparePropertyFirstLargerThanOther() {
		VersionProperty versionProperty1 = VersionProperty.of("def", true);
		VersionProperty versionProperty2 = VersionProperty.of("abc", true);
		int comparisonResult = versionProperty1.compareTo(versionProperty2);
		assertEquals(1, comparisonResult,
				"Expected comparison result when first property is larger to be greater than 0");
	}

	@Test
	@Tag("invalid")
	public void comparePropertyWithNull() {
		VersionProperty versionProperty = VersionProperty.of("abc", true);
		assertThrows(NullPointerException.class, () -> versionProperty.compareTo(null),
				"Expected NullPointerException when input property is null");
	}

}