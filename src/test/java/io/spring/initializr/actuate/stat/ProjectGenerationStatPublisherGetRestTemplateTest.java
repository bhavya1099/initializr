/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getRestTemplate_66befa9cd5
ROOST_METHOD_SIG_HASH=getRestTemplate_8109e4908e

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1743683483/source/initializr/initializr-actuator/src/test/java/io/spring/initializr/actuate/stat/ProjectGenerationStatPublisherTests.java
Tests:
    "@Test
private void configureService(StatsProperties properties) {
    ProjectRequestDocumentFactory documentFactory = new ProjectRequestDocumentFactory();
    this.retryTemplate = new RetryTemplate();
    this.statPublisher = new ProjectGenerationStatPublisher(documentFactory, properties, new RestTemplateBuilder(), this.retryTemplate);
    this.mockServer = MockRestServiceServer.createServer(this.statPublisher.getRestTemplate());
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1743683483/source/initializr/initializr-actuator/src/test/java/io/spring/initializr/actuate/stat/MainControllerStatsIntegrationTests.java
Tests:
    "@Test
@Test
void requestIpIsSetWhenHeaderIsPresent() throws Exception {
    RequestEntity<?> request = RequestEntity.get(new URI(createUrl("/starter.zip"))).header("X-FORWARDED-FOR", "10.0.0.123").build();
    getRestTemplate().exchange(request, String.class);
    assertThat(this.statsMockController.stats).as("No stat got generated").hasSize(1);
    StatsMockController.Content content = this.statsMockController.stats.get(0);
    JsonNode json = parseJson(content.json);
    assertThat(json.get("client").get("ip").textValue()).as("Wrong requestIp").isEqualTo("10.0.0.123");
}
"
    "@Test
@Test
void requestIpv4IsNotSetWhenHeaderHasGarbage() throws Exception {
    RequestEntity<?> request = RequestEntity.get(new URI(createUrl("/starter.zip"))).header("x-forwarded-for", "foo-bar").build();
    getRestTemplate().exchange(request, String.class);
    assertThat(this.statsMockController.stats).as("No stat got generated").hasSize(1);
    StatsMockController.Content content = this.statsMockController.stats.get(0);
    JsonNode json = parseJson(content.json);
    assertThat(json.has("requestIpv4")).as("requestIpv4 property should not be set if value is not a valid IPv4").isFalse();
}
"
    "@Test
@Test
void requestCountryIsNotSetWhenHeaderIsSetToXX() throws Exception {
    RequestEntity<?> request = RequestEntity.get(new URI(createUrl("/starter.zip"))).header("cf-ipcountry", "XX").build();
    getRestTemplate().exchange(request, String.class);
    assertThat(this.statsMockController.stats).as("No stat got generated").hasSize(1);
    StatsMockController.Content content = this.statsMockController.stats.get(0);
    JsonNode json = parseJson(content.json);
    assertThat(json.has("requestCountry")).as("requestCountry property should not be set if value is set to xx").isFalse();
}
""""
  Scenario 1: Verify getRestTemplate method returns the existing rest template instance

  Details:
    TestName: getRestTemplateReturnsExistingInstance
    Description: This test is meant to check if getRestTemplate() method is returning the existing instance of the RestTemplate. The scenario is focused on validating the standard behavior under normal operation.

  Execution:
    Arrange: An instance of ProjectGenerationStatPublisher should be created with the required dependencies.
    Act: Invoke the getRestTemplate() method.
    Assert: The returned RestTemplate instance should match with the instance used while creating ProjectGenerationStatPublisher instance.

  Validation:
    This assertion aims to verify that the getRestTemplate method is returning the correct existing instance. It confirms that internal state of the ProjectGenerationStatPublisher is not modified and the method returns correct restTemplate instance.

  Scenario 2: Check if getRestTemplate method handles the null case effectively

  Details:
    TestName: getRestTemplateHandlesNull
    Description: This test is designed to verify if the getRestTemplate method can handle the scenario when resttemplate instance is null. The purpose of this scenario is to ensure method's behavior in edge cases.

  Execution:
    Arrange: An instance of ProjectGenerationStatPublisher should be created with a null RestTemplate.
    Act: Invoke the getRestTemplate() method.
    Assert: The returned RestTemplate instance should be null.

  Validation:
    This test confirms that the getRestTemplate method can handle null cases effectively without throwing any exceptions. It checks the error handling and edge case behavior of the method.
""",
*/

// ********RoostGPT********

package io.spring.initializr.actuate.stat;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.retry.support.RetryTemplate;
import org.springframework.web.client.RestTemplate;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.net.URI;
import java.net.URISyntaxException;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.spring.initializr.actuate.stat.StatsProperties.Elastic;
import io.spring.initializr.web.project.ProjectRequestEvent;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.context.event.EventListener;
import org.springframework.http.MediaType;
import org.springframework.http.RequestEntity;
import org.springframework.scheduling.annotation.Async;
import org.springframework.util.StringUtils;
import org.springframework.web.util.UriComponentsBuilder;

class ProjectGenerationStatPublisherGetRestTemplateTest {

	@Test
	@Tag("valid")
	void getRestTemplateReturnsExistingInstance() {
		// Arrange
		RestTemplateBuilder restTemplateBuilder = new RestTemplateBuilder();
		RetryTemplate retryTemplate = new RetryTemplate();
		RestTemplate restTemplate = restTemplateBuilder.build();
		ProjectGenerationStatPublisher publisher = new ProjectGenerationStatPublisher(
				Mockito.mock(ProjectRequestDocumentFactory.class), new StatsProperties(), restTemplateBuilder,
				retryTemplate);

		// Act
		RestTemplate result = publisher.getRestTemplate();

		// Assert
		assertSame(restTemplate, result);
	}

	@Test
	@Tag("invalid")
	void getRestTemplateHandlesNull() {
		// Arrange
		RestTemplateBuilder restTemplateBuilder = new RestTemplateBuilder();
		RetryTemplate retryTemplate = new RetryTemplate();
		ProjectGenerationStatPublisher publisher = new ProjectGenerationStatPublisher(
				Mockito.mock(ProjectRequestDocumentFactory.class), new StatsProperties(), restTemplateBuilder,
				retryTemplate);

		// Act
		RestTemplate result = publisher.getRestTemplate();

		// Assert
		assertNull(result);
	}

}