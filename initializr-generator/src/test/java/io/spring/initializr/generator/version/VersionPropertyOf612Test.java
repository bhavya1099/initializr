/*
 * Copyright 2012-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=of_50b32872c8
ROOST_METHOD_SIG_HASH=of_a579c6713a

"""
Scenario 1: Test the 'of' method with valid input string
TestName: testOfMethodWithValidInput
Description: This test validates the 'of' method by passing a valid input string.
Execution:
  Arrange: Instantiate String 'property' with a valid format, i.e., a string that contains lowercase letters, digits, '.', and '-'.
  Act: Invoke 'VersionProperty.of("property")'.
  Assert: Assert that the returned 'VersionProperty' instance is not null and its 'isInternal' field’s value is 'true'.
Validation:
  This test checks that the 'of' method correctly converts the input string into a 'VersionProperty' instance. The test is significant because it demonstrates the basic functionality of the 'of' method in the program.

Scenario 2: Test the 'of' method with null input
TestName: testOfMethodWithNullInput
Description: This test validates the 'of' method by passing a null input string.
Execution:
  Arrange: Instantiate String 'property' as null.
  Act: Invoke 'VersionProperty.of("property")'.
  Assert: Expect NullPointerException to be thrown.
Validation:
  This test verifies that 'of' function handles null input appropriately and throws a NullPointerException, confirming the function's robustness.

Scenario 3: Test the 'of' method with unsupported character
TestName: testOfMethodWithUnsupportedCharacter
Description: This test validates the 'of' method by passing unsupported characters, i.e., uppercase letters or characters other than '-', '.', digits and lowercase letters.
Execution:
  Arrange: Instantiate String 'property' with unsupported characters.
  Act: Invoke 'VersionProperty.of("property")'.
  Assert: Expect IllegalArgumentException to be thrown.
Validation:
  This test ensures that the 'of' method validates the format of 'property' and rejects incompatible characters for a version property, maintaining data integrity.

Scenario 4: Test the 'of' method with empty input
TestName: testOfMethodWithEmptyInput
Description: This test validates the 'of' method when passed an empty string.
Execution:
  Arrange: Instantiate an empty String 'property'.
  Act: Invoke 'VersionProperty.of("property")'.
  Assert: Assert that the returned 'VersionProperty' instance is not null and its 'isInternal' field’s value is 'true'.
Validation:
  This test confirms the behavior of the 'of' method when handling empty strings and ensures that the method can adequately handle such cases.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import org.springframework.util.StringUtils;

public class VersionPropertyOf612Test {

	@Test
	@Tag("valid")
	public void testOfMethodWithValidInput() {
		String property = "version-property";
		VersionProperty versionProperty = VersionProperty.of(property);

		assertNotNull(versionProperty, "VersionProperty object should not be null");
		assertTrue(versionProperty.isInternal(), "isInternal field should be true");
	}

	@Test
	@Tag("invalid")
	public void testOfMethodWithNullInput() {
		String property = null;
		assertThrows(NullPointerException.class, () -> {
			VersionProperty.of(property);
		}, "NullPointerException should be thrown for null input");
	}

	@Test
	@Tag("invalid")
	public void testOfMethodWithUnsupportedCharacter() {
		String property = "Version_Property$";
		assertThrows(IllegalArgumentException.class, () -> {
			VersionProperty.of(property);
		}, "IllegalArgumentException should be thrown for input having unsupported characters");
	}

	@Test
	@Tag("boundary")
	public void testOfMethodWithEmptyInput() {
		String property = "";
		VersionProperty versionProperty = VersionProperty.of(property);

		assertNotNull(versionProperty, "VersionProperty object should not be null");
		assertTrue(versionProperty.isInternal(), "isInternal field should be true");
	}

}