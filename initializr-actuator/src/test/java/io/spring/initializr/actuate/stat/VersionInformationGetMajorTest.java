/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getMajor_05d7cdc55f
ROOST_METHOD_SIG_HASH=getMajor_273edadfa7

"""

Scenario 1: Validate the return of the major version

Details:
  TestName: shouldReturnMajorVersion
  Description: This test checks if the getMajor() method returns the expected major version set using setVersion() method of ProjectRequestDocument class.
Execution:
  Arrange: Create an instance of ProjectRequestDocument and set its version with a new VersionInformation object, setting the major data.
  Act: Invoke the getMajor() method of the VersionInformation object.
  Assert: Use the assertEquals function to compare the returned value with the expected major.
Validation:
  This assertion checks if the getMajor returns the exact major value that was set using setVersion method. This test is important to ensure that the version information of the project is correctly set and retrieved in its major attribute.

Scenario 2: Null major version test

Details:
  TestName: shouldReturnNullIfMajorVersionIsEmpty
  Description: This test checks if the getMajor() method returns null when no major version is set.
Execution:
  Arrange: Create an instance of ProjectRequestDocument without setting its version.
  Act: Invoke the getMajor() method of the VersionInformation object.
  Assert: Use the assertNull function to check if the returned value is null.
Validation:
  This assertion ensures that the getMajor function handles null cases gracefully and returns null when no major version is set. This test is crucial to verify the stability of the getMajor function in case of projects without a major version defined.

Scenario 3: Validate getMajor consistency

Details:
  TestName: shouldReturnSameMajorVersionInConsistentCalls
  Description: This test aims to verify that the getMajor() method returns the same major version on consistent calls.
Execution:
  Arrange: set the version to a new instance of VersionInformation with the major attribute set.
  Act: Invoke getMajor() method multiple times.
  Assert: Use the assertEquals function to verify that each invocation to getMajor() returns the same value.
Validation:
  Confirming that the getMajor() function returns the same value on multiple calls assures that the function has no side effects and is consistent when reading the major attribute. This test is crucial for the reliability of the getMajor function, as inconsistency in its response might lead to far-reaching impact on other components interacting with the ProjectRequestDocument class.
""",41bcf7c9-abca-4c14-b901-563110779a43
*/

// ********RoostGPT********

package io.spring.initializr.actuate.stat;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.StringJoiner;
import io.spring.initializr.generator.version.Version;
import io.spring.initializr.web.support.Agent;
import org.springframework.util.ObjectUtils;
import org.springframework.util.StringUtils;

public class VersionInformationGetMajorTest {

	@Tag("valid")
	@Test
	public void shouldReturnMajorVersion() {

		// Arrange
		ProjectRequestDocument document = new ProjectRequestDocument();
		ProjectRequestDocument.VersionInformation versionInformation = document.new VersionInformation(
				new Version("2.3.4"));
		document.setVersion(versionInformation);

		// Act
		String result = versionInformation.getMajor();

		// Assert
		assertEquals("2", result);
	}

	@Tag("invalid")
	@Test
	public void shouldReturnNullIfMajorVersionIsEmpty() {

		// Arrange
		ProjectRequestDocument document = new ProjectRequestDocument();
		// Act
		String result = document.getVersion().getMajor();
		// Assert
		assertNull(result);
	}

	@Tag("valid")
	@Test
	public void shouldReturnSameMajorVersionInConsistentCalls() {

		// Arrange
		ProjectRequestDocument document = new ProjectRequestDocument();
		ProjectRequestDocument.VersionInformation versionInformation = document.new VersionInformation(
				new Version("2.3.4"));
		document.setVersion(versionInformation);
		// Act
		String firstCall = versionInformation.getMajor();
		String secondCall = versionInformation.getMajor();
		// Assert
		assertEquals(firstCall, secondCall);
	}

}