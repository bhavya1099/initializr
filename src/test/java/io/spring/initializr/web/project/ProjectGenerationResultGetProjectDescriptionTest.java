/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getProjectDescription_dd61991cca
ROOST_METHOD_SIG_HASH=getProjectDescription_ff46d5a2c6

"""
Scenario 1: Validate whether the getProjectDescription returns the null description, when the description has not been set

Details:
  TestName: validateNullDescriptionReturn
  Description: The test is intended to verify whether the getProjectDescription method correctly returns null when the description hasn't been set yet.
  Execution:
    Arrange: Instantiate a new ProjectGenerationResult object without setting the description.
    Act: Invoke the getProjectDescription method on the created object.
    Assert: Use JUnit assertions to assert that the returned description is null.
  Validation:
    The assertion validates that the method correctly returns null in the absence of a set description. This is significant as it ensures the method's functionality in its edge-case scenario of having no set description.

Scenario 2: Validate whether the getProjectDescription receives accurately the description that was set

Details:
  TestName: validateAccurateDescriptionReturn
  Description: The test checks whether the getProjectDescription method accurately returns the description that was set.
  Execution:
    Arrange: Instantiate a new ProjectGenerationResult object and set the description.
    Act: Invoke the getProjectDescription method on the created object.
    Assert: Use JUnit assertions to check that the returned description matches the set description.
  Validation:
    The assertion validates that the method accurately returns the description that was set. This is crucial as it checks the correctness of the method in its regular use case scenario.

Scenario 3: Validate whether the getProjectDescription can handle concurrent calls

Details:
  TestName: validateConcurrentCalls
  Description: This test checks whether the getProjectDescription method can handle multiple concurrent calls while returning the correct description each time.
  Execution:
    Arrange: Instantiate a new ProjectGenerationResult object, set the description, and initiate multiple concurrent threads.
    Act: Invoke the getProjectDescription method from each thread.
    Assert: Use JUnit assertions to check that the returned description in each thread matches the set description.
  Validation:
    The assertion validates that the method can handle multiple concurrent calls without causing any race condition or data inconsistency. This is important to ensure method's robustness and thread-safety.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.project;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertEquals;
import java.nio.file.Path;
import io.spring.initializr.generator.project.ProjectDescription;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.*;

public class ProjectGenerationResultGetProjectDescriptionTest {

	@Test
	@Tag("boundary")
	public void validateNullDescriptionReturn() {
		ProjectGenerationResult result = new ProjectGenerationResult(null, Path.of("/test/directory"));
		ProjectDescription description = result.getProjectDescription();
		assertNull(description, "Description should be null");
	}

	@Test
	@Tag("valid")
	public void validateAccurateDescriptionReturn() {
		ProjectDescription projDescription = new ProjectDescription();
		ProjectGenerationResult result = new ProjectGenerationResult(projDescription, Path.of("/test/directory"));
		ProjectDescription description = result.getProjectDescription();
		assertEquals(projDescription, description, "Returned description should match the set description");
	}

	@Test
	@Tag("integration")
	public void validateConcurrentCalls() {
		ProjectDescription projDescription = new ProjectDescription();
		ProjectGenerationResult result = new ProjectGenerationResult(projDescription, Path.of("/test/directory"));
		Runnable task = () -> {
			ProjectDescription description = result.getProjectDescription();
			assertEquals(projDescription, description,
					"Returned description should match the set description even with concurrent calls");
		};
		Thread thread1 = new Thread(task);
		Thread thread2 = new Thread(task);

		thread1.start();
		thread2.start();
	}

}