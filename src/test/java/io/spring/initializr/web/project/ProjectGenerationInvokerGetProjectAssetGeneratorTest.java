/*
 * Copyright 2012-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getProjectAssetGenerator_2b7eb3a312
ROOST_METHOD_SIG_HASH=getProjectAssetGenerator_4d07575527

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-web/src/test/java/io/spring/initializr/web/project/ProjectGenerationInvokerTests.java
Tests:
    "@Test
@Test
void invokeProjectStructureGenerationWithCustomAssetGenerator(@TempDir Path directory) {
    WebProjectRequest webRequest = new WebProjectRequest();
    webRequest.initialize(metadata);
    webRequest.setGroupId("org.acme.test");
    webRequest.setType("maven-project");
    ProjectGenerationResult result = new ProjectGenerationInvoker<ProjectRequest>(this.context, this.eventPublisher, new DefaultProjectRequestToDescriptionConverter()) {

        @Override
        protected ProjectAssetGenerator<Path> getProjectAssetGenerator(ProjectDescription description) {
            assertThat(description.getBuildSystem()).isInstanceOf(MavenBuildSystem.class);
            assertThat(description.getGroupId()).isEqualTo("org.acme.test");
            return (context) -> directory;
        }
    }.invokeProjectStructureGeneration(webRequest);
    assertThat(result.getRootDirectory()).isSameAs(directory);
    assertThat(result.getRootDirectory()).isEmptyDirectory();
    verifyProjectSuccessfulEventFor(webRequest);
}
""""
  Scenario 1: Test getProjectAssetGenerator method with valid ProjectDescription

  Details:
    TestName: testGetProjectAssetGeneratorWithValidDescription
    Description: The function getProjectAssetGenerator is expected to return the instance of ProjectAssetGenerator. This test aims to verify the same by passing a valid 'description' object of ProjectDescription.
  Execution:
    Arrange: A valid instance of 'description' (type ProjectDescription) is created.
    Act: The getProjectAssetGenerator method is called with the valid 'description'.
    Assert: Assert that the returned value matches the private field 'projectAssetGenerator' in the given class.
  Validation:
    If the correct generator is returned, it indicates that the get method works correctly and would allow other functionalities relying on the generator to work as expected in the actual application.

 Scenario 2: Test getProjectAssetGenerator method with null ProjectDescription

  Details:
    TestName: testGetProjectAssetGeneratorWithNullDescription
    Description: The function getProjectAssetGenerator is expected to return the instance of ProjectAssetGenerator. This test aims to verify the same by passing a null 'description'.
  Execution:
    Arrange: 'description' is set to null.
    Act: The getProjectAssetGenerator method is called with null 'description'.
    Assert: Assert that the returned value matches the private field 'projectAssetGenerator' in the given class.
  Validation:
    If the correct generator is returned, it confirms that the get method works correctly even if null value is passed for 'description'. This will be important in case of optional 'description' in the actual application.

Scenario 3: Test getProjectAssetGenerator method when ProjectAssetGenerator has different object

  Details:
    TestName: testGetProjectAssetGeneratorWhenProjectAssetGeneratorHasDifferentObject
    Description: This test aims to check the behaviour of getProjectAssetGenerator method when the 'projectAssetGenerator' has different object than the default. The test will ensure that getProjectAssetGenerator gives the correct object as contained in 'projectAssetGenerator'
  Execution:
    Arrange: The 'projectAssetGenerator' is assigned a different object than the default one.
    Act: The getProjectAssetGenerator method is called.
    Assert: Assert that the returned object matches the newly assigned ProjectAssetGenerator object.
  Validation:
    If the correct generator object is returned it indicates that the getProjectAssetGenerator function is successful in getting the correct ProjectAssetGenerator object.

Scenario 4: Test getProjectAssetGenerator method when ProjectAssetGenerator is null

  Details:
    TestName: testGetProjectAssetGeneratorWhenProjectAssetGeneratorIsNull
    Description: This test aims to check the function getProjectAssetGenerator when the ProjectAssetGenerator object is null.
  Execution:
    Arrange: The ProjectAssetGenerator object is set to null.
    Act: The getProjectAssetGenerator method is called.
    Assert: Assert the returned object is null.
  Validation:
    If the test returns null, it verifies that getProjectAssetGenerator function can handle null ProjectAssetGenerator objects without breaking the function.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.project;

import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationEventPublisher;
import io.spring.initializr.generator.project.ProjectAssetGenerator;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import org.junit.jupiter.api.*;
import java.io.IOException;
import java.io.StringWriter;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import io.spring.initializr.generator.buildsystem.BuildItemResolver;
import io.spring.initializr.generator.buildsystem.BuildWriter;
import io.spring.initializr.generator.project.DefaultProjectAssetGenerator;
import io.spring.initializr.generator.project.ProjectDescription;
import io.spring.initializr.generator.project.ProjectGenerationContext;
import io.spring.initializr.generator.project.ProjectGenerationException;
import io.spring.initializr.generator.project.ProjectGenerator;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.metadata.support.MetadataBuildItemResolver;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.util.FileSystemUtils;

public class ProjectGenerationInvokerGetProjectAssetGeneratorTest {

	@InjectMocks
	private ProjectGenerationInvoker<String> projectGenerationInvokerUnderTest;

	@Mock
	private ApplicationContext mockParentApplicationContext;

	@Mock
	private ApplicationEventPublisher mockEventPublisher;

	@Mock
	private ProjectRequestToDescriptionConverter<String> mockRequestConverter;

	@Mock
	private ProjectAssetGenerator<Path> mockProjectAssetGenerator;

	@BeforeEach
	void setUp() {
		MockitoAnnotations.openMocks(this);
		projectGenerationInvokerUnderTest = new ProjectGenerationInvoker<>(mockParentApplicationContext,
				mockEventPublisher, mockRequestConverter);
		projectGenerationInvokerUnderTest.projectAssetGenerator = mockProjectAssetGenerator;
	}

	@Test
	@Tag("Valid")
	public void testGetProjectAssetGeneratorWithValidDescription() {
		ProjectDescription description = new ProjectDescription();
		ProjectAssetGenerator<Path> result = projectGenerationInvokerUnderTest.getProjectAssetGenerator(description);
		assertEquals(mockProjectAssetGenerator, result);
	}

	@Test
	@Tag("Invalid")
	public void testGetProjectAssetGeneratorWithNullDescription() {
		ProjectDescription description = null;
		ProjectAssetGenerator<Path> result = projectGenerationInvokerUnderTest.getProjectAssetGenerator(description);
		assertEquals(mockProjectAssetGenerator, result);
	}

	@Test
	@Tag("Valid")
	public void testGetProjectAssetGeneratorWhenProjectAssetGeneratorHasDifferentObject() {
		ProjectAssetGenerator<Path> diffProjectGenerator = mock(ProjectAssetGenerator.class);
		projectGenerationInvokerUnderTest.projectAssetGenerator = diffProjectGenerator;
		ProjectAssetGenerator<Path> result = projectGenerationInvokerUnderTest
			.getProjectAssetGenerator(new ProjectDescription());
		assertEquals(diffProjectGenerator, result);
	}

	@Test
	@Tag("Boundary")
	public void testGetProjectAssetGeneratorWhenProjectAssetGeneratorIsNull() {
		projectGenerationInvokerUnderTest.projectAssetGenerator = null;
		ProjectAssetGenerator<Path> result = projectGenerationInvokerUnderTest
			.getProjectAssetGenerator(new ProjectDescription());
		assertEquals(null, result);
	}

}