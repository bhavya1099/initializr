/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=serviceCapabilitiesHal_e1be8cb43c
ROOST_METHOD_SIG_HASH=serviceCapabilitiesHal_e1be8cb43c

"""
Scenario 1: Validate serviceCapabilityHal() with HAL_JSON_CONTENT_TYPE

Details:
  TestName: validateServiceCapacityHalWithHalJson
  Description: The test is designed to validate the response of the serviceCapabilitiesHal() method when serviced with HAL_JSON_CONTENT_TYPE. The method is expected to respond with HAL_JSON_CONTENT_TYPE content and fetch metadata from the MetadataProvider.

Execution:
  Arrange: Mock the MetadataProvider to return a predefined metadata with custom parameters.
  Act: Call the serviceCapabilitiesHal() method.
  Assert: Assert that the returned ResponseEntity's content type is HAL_JSON_CONTENT_TYPE and the body contains the predefined metadata information.

Validation:
  The assertion verifies that the serviceCapabilitiesHal() method responds with the correct content type and body containing metadata. The HAL_JSON_CONTENT_TYPE and metadata content validate the service's ability to produce the correct output.

Scenario 2: Validate serviceCapabilityHal() error handling for metadata provider failure

Details:
  TestName: validateServiceCapacityHalMetadataProviderFailure
  Description: This test aims to validate the error handling of serviceCapabilitiesHal() method when MetadataProvider fails to provide metadata.

Execution:
  Arrange: Mock the MetadataProvider to throw a RuntimeException when called
  Act: Call the serviceCapabilitiesHal() method.
  Assert: Assert that a RuntimeException is thrown.

Validation:
  The assertion verifies that the serviceCapabilitiesHal() method properly handles failures during metadata provision. This aligns with the expected program behavior where an error in metadata provision leads to a runtime exception.

Scenario 3: Validate serviceCapabilityHal() error type when URL is not valid

Details:
  TestName: validateServiceCapacityHalUrlError
  Description: This test is meant to validate the error thrown by the serviceCapabilitiesHal() method when the provided URL is not valid.

Execution:
  Arrange: Mock a scenario where the URL provided to the method is null or incorrect.
  Act: Call the serviceCapabilitiesHal() method with the incorrect URL.
  Assert: Assert that the method throws an IllegalArgumentException or similar error pointing to incorrect URL.

Validation:
  The assertion verifies that the serviceCapabilitiesHal() method can correctly handle incorrect URL error by throwing an IllegalArgumentException or similar error. This is crucial in ensuring the robustness of the application to invalid parameter inputs.
"""

*/

// ********RoostGPT********

package io.spring.initializr.web.controller;

import io.spring.initializr.generator.version.Version;
import io.spring.initializr.metadata.DependencyMetadata;
import io.spring.initializr.metadata.DependencyMetadataProvider;
import io.spring.initializr.metadata.InitializrConfiguration.Platform;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.web.mapper.DependencyMetadataJsonMapper;
import io.spring.initializr.web.mapper.DependencyMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataJsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV22JsonMapper;
import io.spring.initializr.metadata.InvalidInitializrMetadataException;
import io.spring.initializr.web.project.InvalidProjectRequestException;
import jakarta.servlet.http.HttpServletResponse;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.mockito.Mockito;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
import org.junit.jupiter.api.*;
import io.spring.initializr.web.mapper.InitializrMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV2JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataVersion;
import org.springframework.http.CacheControl;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

public class ProjectMetadataControllerServiceCapabilitiesHalTest {

	private InitializrMetadataProvider metadataProvider;

	private DependencyMetadataProvider dependencyMetadataProvider;

	private ProjectMetadataController controller;

	@BeforeEach
	public void setup() {
		metadataProvider = Mockito.mock(InitializrMetadataProvider.class);
		dependencyMetadataProvider = Mockito.mock(DependencyMetadataProvider.class);
		controller = new ProjectMetadataController(metadataProvider, dependencyMetadataProvider);
	}

	@Test
	@Tag("valid")
	public void validateServiceCapacityHalWithHalJson() {
		var metadata = new InitializrMetadata();
		when(metadataProvider.get()).thenReturn(metadata);
		ResponseEntity<String> response = controller.serviceCapabilitiesHal();
		assertAll(() -> assertEquals(MediaType.valueOf(InitializrMetadataVersion.V2_1.getMediaType()),
				response.getHeaders().getContentType()), () -> assertNotNull(response.getBody()));
	}

	@Test
	@Tag("invalid")
	public void validateServiceCapacityHalMetadataProviderFailure() {
		when(metadataProvider.get()).thenThrow(RuntimeException.class);
		assertThrows(RuntimeException.class, () -> controller.serviceCapabilitiesHal());
	}

	@Test
	@Tag("invalid")
	public void validateServiceCapacityHalUrlError() {
		// Assuming that a method to set the application URL is available
		controller.setAppUrl(null);
		assertThrows(IllegalArgumentException.class, () -> controller.serviceCapabilitiesHal());
	}

}