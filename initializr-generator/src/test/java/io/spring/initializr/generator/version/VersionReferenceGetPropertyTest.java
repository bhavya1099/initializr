/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getProperty_41b2f38cdd
ROOST_METHOD_SIG_HASH=getProperty_bb77fd629a

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d5958c2d-2a99-46e6-ba3d-f7c9d8576735/source/initializr/initializr-generator/src/test/java/io/spring/initializr/generator/version/VersionReferenceTests.java
Tests:
    "@Test
@Test
void ofPropertyWithVersionProperty() {
    VersionProperty property = VersionProperty.of("test.version", true);
    VersionReference reference = VersionReference.ofProperty(property);
    assertThat(reference.isProperty()).isTrue();
    assertThat(reference.getProperty()).isEqualTo(property);
    assertThat(reference.getValue()).isNull();
    assertThat(reference).hasToString("${test.version}");
}
"
    "@Test
@Test
void ofPropertyWithInternalProperty() {
    VersionReference reference = VersionReference.ofProperty("test.version");
    assertThat(reference.isProperty()).isTrue();
    assertThat(reference.getProperty().toStandardFormat()).isEqualTo("test.version");
    assertThat(reference.getValue()).isNull();
    assertThat(reference).hasToString("${test.version}");
}
"
    "@Test
@Test
void ofPropertyWithValue() {
    VersionReference reference = VersionReference.ofValue("1.2.3.RELEASE");
    assertThat(reference.isProperty()).isFalse();
    assertThat(reference.getProperty()).isNull();
    assertThat(reference.getValue()).isEqualTo("1.2.3.RELEASE");
    assertThat(reference).hasToString("1.2.3.RELEASE");
}
""""
  Scenario 1: Test to ensure getProperty method returns the correct property when the VersionReference object is created using ofPropertyFactory method.

  Details:
    TestName: getCorrectPropertyOnOfPropertyCreation.
    Description: This test aims to verify that the getProperty method successfully retrieves the correct VersionProperty that was supplied during VersionReference object creation using the ofProperty factory method.
  Execution:
    Arrange: Create a dummy VersionProperty and VersionReference object using ofProperty method with the dummy property.
    Act: Invoke ‘getProperty’ method on the VersionReference object.
    Assert: Compare the returned value with the dummy property.
  Validation:
    The test ensures that the getProperty method functions as expected by returning the same property that was supplied during the object's creation.
    Verifying this behavior is significant in maintaining correct data retrieval which is integral to application functionality.

  Scenario 2: Test when VersionReference is defined using a value, getProperty should return null.

  Details:
    TestName: getPropertyReturnsNullOnValueCreation.
    Description: This test is designed to ensure that when a VersionReference object is created using a value instead of a property, invoking the getProperty method returns null.
  Execution:
    Arrange: Create a VersionReference object using the static ofValue method.
    Act: Invoke the 'getProperty' method on the created VersionReference object.
    Assert: assert that null is returned.
  Validation:
    This test validates the functionality of the getProperty method when the VersionReference object is initiated with a value rather than a property.
    Asserting this behavior is critical as it confirms the correct handling of cases where a property might not be available, thus aiding in preventing unnecessary exceptions or errors.

  Scenario 3: Test to confirm getProperty method returns null when VersionReference object is null.

  Details:
    TestName: getPropertyReturnsNullWhenReferenceObjectIsNull.
    Description: This test is to check if the getProperty method returns null when invoked on a null VersionReference object.
  Execution:
    Arrange: Declare a null VersionReference object.
    Act: Invoke 'getProperty' method on the null object.
    Assert: assert that null is returned.
  Validation:
    This test validates that the getProperty method handles a null VersionReference object without issues, returning a null value to reflect the object's state.
    Validating this allows us to confirm robust error handling for edge cases in the application, thus preventing unexpected application crashes.
""",
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import java.util.Objects;

public class VersionReferenceGetPropertyTest {

	@Test
	@Tag("valid")
	public void getCorrectPropertyOnOfPropertyCreation() {
		// Arrange
		VersionProperty versionProperty = VersionProperty.of("1.0.0", false);
		VersionReference versionRef = VersionReference.ofProperty(versionProperty);
		// Act
		VersionProperty retrievedProperty = versionRef.getProperty();
		// Assert
		assertEquals(versionProperty, retrievedProperty, "getProperty does not return the correct property.");
	}

	@Test
	@Tag("boundary")
	public void getPropertyReturnsNullOnValueCreation() {
		// Arrange
		VersionReference versionRef = VersionReference.ofValue("1.0.0");
		// Act
		VersionProperty retrievedProperty = versionRef.getProperty();
		// Assert
		assertNull(retrievedProperty,
				"getProperty does not return null when VersionReference was created using value.");
	}

	@Test
	@Tag("invalid")
	public void getPropertyReturnsNullWhenReferenceObjectIsNull() {
		// Arrange
		VersionReference versionRef = null;
		// Act and assert
		assertThrows(NullPointerException.class, () -> {
			VersionProperty retrievedProperty = versionRef.getProperty();
		}, "getProperty does not throw NullPointerException when invoked on null object.");
	}

}