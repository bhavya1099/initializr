/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=customize_aea5a22fc4
ROOST_METHOD_SIG_HASH=customize_deb7e13fa6

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746075742/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/GradleConfigurationBuildCustomizerTests.java
Tests:
    "@Test
private void customize(GradleBuild build) {
    new GradleConfigurationBuildCustomizer().customize(build);
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746075742/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/GradleAnnotationProcessorScopeBuildCustomizerTests.java
Tests:
    "@Test
private void customize(GradleBuild build) {
    new GradleAnnotationProcessorScopeBuildCustomizer().customize(build);
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746075742/source/initializr/initializr-web/src/test/java/io/spring/initializr/web/project/MetadataProjectDescriptionCustomizerTests.java
Tests:
    "@Test
MutableProjectDescription customize(MutableProjectDescription description) {
    new MetadataProjectDescriptionCustomizer(this.metadata).customize(description);
    return description;
}
""""
  Scenario 1: Validate the addition of a unique development only dependency to the build

  Details:
    TestName: testAddUniqueDevelopmentOnlyDependency.
    Description: This test aims to check the correct addition of a unique dependency to the Gradle build. It tests the scenario where Dependency is retrieved from the existing gradle build dependencies using the given id and is not null.

  Execution:
    Arrange: A GradleBuild object and a Dependency id should be set. The Dependency object should be created using the given id and should be non-null.
    Act: Invoke the customize method on the DevelopmentOnlyDependencyGradleBuildCustomizer with the GradleBuild object.
    Assert: Assert that the development only dependency has been added to the Gradle build dependencies.

  Validation:
    This test validates if the dependency with the given id is correctly configured for development only build and added to the build dependencies. Successful execution of test affirms the proper functionality of the customize method for normal operation.

  Scenario 2: Validate the handling when no dependency found for given id

  Details:
    TestName: testHandleNoDependencyForGivenId.
    Description: This test aims to check the handling of the scenario where there is no dependency corresponding to the given id in the build.

  Execution:
    Arrange: A GradleBuild object and an invalid/non-existing Dependency id should be set. The Dependency object retrieved using the given id should thus be null.
    Act: Invoke the customize method on the DevelopmentOnlyDependencyGradleBuildCustomizer with the GradleBuild object.
    Assert: Assert that no additional dependency has been added to the Gradle build dependencies.

  Validation:
    This test validates if the customize method can handle a scenario when id does not correspond to an existing dependency. Successful execution of this test would signify its resilience to such edge case.

  Scenario 3: Validate the customization when given development only dependency already exists

  Details:
    TestName: testCustomizationWhenDependencyExists.
    Description: This test aims to verify the behavior of the customize method when a development only dependency with the given id already exists in the build dependencies.

  Execution:
    Arrange: A GradleBuild object and an id of an existing development only dependency should be set.
    Act: Invoke the customize method on the DevelopmentOnlyDependencyGradleBuildCustomizer with the GradleBuild object.
    Assert: Assert that the existing development only dependency in the build dependencies remains unaffected.

  Validation:
    This test checks whether the customize method can gracefully handle the situation when a development only dependency with the given id already exists. The successful execution would signify the precision of the method in handling such scenarios.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.spring.build.gradle;

import io.spring.initializr.generator.buildsystem.Dependency;
import io.spring.initializr.generator.buildsystem.gradle.GradleBuild;
import io.spring.initializr.generator.buildsystem.gradle.GradleDependency;
import io.spring.initializr.generator.spring.build.BuildCustomizer;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.junit.jupiter.api.*;

public class DevelopmentOnlyDependencyGradleBuildCustomizerCustomizeTest {

	@Test
	@Tag("valid")
	public void testAddUniqueDevelopmentOnlyDependency() {
		// Arrange
		String dependencyId = "testDependency";
		GradleBuild gradleBuild = new GradleBuild();
		gradleBuild.dependencies()
			.add(dependencyId,
					GradleDependency.withCoordinates("groupId", "artifactId").scope(Dependency.SCOPE_COMPILE));
		DevelopmentOnlyDependencyGradleBuildCustomizer customizer = new DevelopmentOnlyDependencyGradleBuildCustomizer(
				dependencyId);
		// Act
		customizer.customize(gradleBuild);
		// Assert
		Assertions.assertTrue(gradleBuild.dependencies().has(dependencyId, "developmentOnly"));
	}

	@Test
	@Tag("invalid")
	public void testHandleNoDependencyForGivenId() {
		// Arrange
		String dependencyId = "testDependency";
		GradleBuild gradleBuild = new GradleBuild();
		DevelopmentOnlyDependencyGradleBuildCustomizer customizer = new DevelopmentOnlyDependencyGradleBuildCustomizer(
				dependencyId);
		// Act
		customizer.customize(gradleBuild);
		// Assert
		Assertions.assertFalse(gradleBuild.dependencies().has(dependencyId, "developmentOnly"));
	}

	@Test
	@Tag("valid")
	public void testCustomizationWhenDependencyExists() {
		// Arrange
		String dependencyId = "testDependency";
		GradleBuild gradleBuild = new GradleBuild();
		gradleBuild.dependencies()
			.add(dependencyId,
					GradleDependency.withCoordinates("groupId", "artifactId")
						.scope(Dependency.SCOPE_COMPILE)
						.configuration("developmentOnly"));
		DevelopmentOnlyDependencyGradleBuildCustomizer customizer = new DevelopmentOnlyDependencyGradleBuildCustomizer(
				dependencyId);
		// Act
		customizer.customize(gradleBuild);
		// Assert
		Assertions.assertTrue(gradleBuild.dependencies().has(dependencyId, "developmentOnly"));
	}

}