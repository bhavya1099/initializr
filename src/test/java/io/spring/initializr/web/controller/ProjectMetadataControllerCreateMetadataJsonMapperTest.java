/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=createMetadataJsonMapper_e410ddcb67
ROOST_METHOD_SIG_HASH=createMetadataJsonMapper_d32646c50a

"""
  Scenario 1: Test for Metadata Version V2

  Details:
    TestName: testCreateMetadataJsonMapperForV2.
    Description: This test is meant to check the creation of the InitializrMetadataV2JsonMapper for metadata version V2.
  Execution:
    Arrange: Provide Input as InitializrMetadataVersion.V2.
    Act: Invoke createMetadataJsonMapper with InitializrMetadataVersion.V2.
    Assert: Use JUnit assertions to check if the returned instance is an instance of the class InitializrMetadataV2JsonMapper.
  Validation:
    This test validates that for Input as V2, the method is correctly instantiating and returning InitializrMetadataV2JsonMapper.
    This test is important as it confirms the proper handling of version-specific metadata mappers.

  Scenario 2: Test for Metadata Version V2_1

  Details:
    TestName: testCreateMetadataJsonMapperForV21.
    Description: This test is meant to check the creation of the InitializrMetadataV21JsonMapper for metadata version V2_1.
  Execution:
    Arrange: Provide Input as InitializrMetadataVersion.V2_1.
    Act: Invoke createMetadataJsonMapper with InitializrMetadataVersion.V2_1.
    Assert: Use JUnit assertions to check if the returned instance is an instance of the class InitializrMetadataV21JsonMapper.
  Validation:
    This test validates that for Input as V2_1, the method correctly instantiates and returns InitializrMetadataV21JsonMapper.
    This test ensures the handling of newer versions of metadata mappers.

  Scenario 3: Test for Default Metadata Version

  Details:
    TestName: testCreateMetadataJsonMapperForDefault.
    Description: The aim of this test is to check the creation of InitializrMetadataV22JsonMapper for any metadata version other than V2 and V2_1.
  Execution:
    Arrange: Provide Input as some version other than InitializrMetadataVersion.V2 and InitializrMetadataVersion.V2_1.
    Act: Invoke createMetadataJsonMapper with provided version.
    Assert: Use JUnit assertions to check if the returned instance is an instance of the class InitializrMetadataV22JsonMapper.
  Validation:
    This test validates that for any input other than V2 and V2_1, the method is correctly instantiating and returning InitializrMetadataV22JsonMapper.
    This is important as it tests the cases where the version provided isn't specifically handled.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.controller;

import static org.junit.jupiter.api.Assertions.assertTrue;
import io.spring.initializr.metadata.InitializrMetadataVersion;
import io.spring.initializr.web.mapper.InitializrMetadataJsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV22JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV2JsonMapper;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import io.spring.initializr.generator.version.Version;
import io.spring.initializr.metadata.DependencyMetadata;
import org.junit.jupiter.api.BeforeEach;
import org.mockito.Mockito;
import org.junit.jupiter.api.*;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import io.spring.initializr.metadata.DependencyMetadataProvider;
import io.spring.initializr.metadata.InitializrConfiguration.Platform;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.metadata.InvalidInitializrMetadataException;
import io.spring.initializr.web.mapper.DependencyMetadataJsonMapper;
import io.spring.initializr.web.mapper.DependencyMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataVersion;
import io.spring.initializr.web.project.InvalidProjectRequestException;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.http.CacheControl;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

public class ProjectMetadataControllerCreateMetadataJsonMapperTest {

	private ProjectMetadataController controller;

	private InitializrMetadataVersion version;

	@BeforeEach
	public void setup() {
		InitializrMetadataProvider metadataProvider = Mockito.mock(InitializrMetadataProvider.class);
		DependencyMetadataProvider dependencyMetadataProvider = Mockito.mock(DependencyMetadataProvider.class);
		controller = new ProjectMetadataController(metadataProvider, dependencyMetadataProvider);
	}

	@Test
	@Tag("valid")
	public void testCreateMetadataJsonMapperForV2() {
		version = InitializrMetadataVersion.V2;
		InitializrMetadataJsonMapper mapper = controller.createMetadataJsonMapper(version);
		assertTrue(mapper instanceof InitializrMetadataV2JsonMapper,
				"The returned mapper should be an instance of InitializrMetadataV2JsonMapper");
	}

	@Test
	@Tag("valid")
	public void testCreateMetadataJsonMapperForV21() {
		version = InitializrMetadataVersion.V2_1;
		InitializrMetadataJsonMapper mapper = controller.createMetadataJsonMapper(version);
		assertTrue(mapper instanceof InitializrMetadataV21JsonMapper,
				"The returned mapper should be an instance of InitializrMetadataV21JsonMapper");
	}

	@Test
	@Tag("valid")
	public void testCreateMetadataJsonMapperForDefault() {
		version = InitializrMetadataVersion.V2_2;
		InitializrMetadataJsonMapper mapper = controller.createMetadataJsonMapper(version);
		assertTrue(mapper instanceof InitializrMetadataV22JsonMapper,
				"The returned mapper should be an instance of InitializrMetadataV22JsonMapper");
	}

}