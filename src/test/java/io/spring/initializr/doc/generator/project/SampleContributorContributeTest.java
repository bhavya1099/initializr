/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=contribute_69ce185994
ROOST_METHOD_SIG_HASH=contribute_a94e4219ee

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746435544/source/initializr/initializr-web/src/test/java/io/spring/initializr/web/controller/custom/CustomProjectContributor.java
Tests:
    "@Test
@Override
public void contribute(Path projectRoot) throws IOException {
    if (this.description instanceof CustomProjectDescription && ((CustomProjectDescription) this.description).isCustomFlag()) {
        Files.createFile(projectRoot.resolve("custom.txt"));
    }
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746435544/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/SettingsGradleProjectContributorTests.java
Tests:
    "@Test
private TextAssert assertSettings(SettingsGradleProjectContributor contributor) throws IOException {
    Path projectDir = Files.createTempDirectory(this.directory, "project-");
    contributor.contribute(projectDir);
    return new TextAssert(projectDir.resolve("test.gradle"));
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746435544/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/container/docker/compose/ComposeProjectContributorTests.java
Tests:
    "@Test
@Test
void composeFileIsContributedInProjectStructure(@TempDir Path projectDir) throws IOException {
    ComposeFile compose = new ComposeFile();
    compose.services().add("test", (service) -> service.image("my-image:1.2.3"));
    new ComposeProjectContributor(compose, IndentingWriterFactory.withDefaultSettings()).contribute(projectDir);
    Path composeFile = projectDir.resolve("compose.yaml");
    assertThat(composeFile).isRegularFile();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746435544/source/initializr/initializr-actuator/src/test/java/io/spring/initializr/actuate/info/BomRangesInfoContributorTests.java
Tests:
    "@Test
private static Info getInfo(InitializrMetadata metadata) {
    Info.Builder builder = new Info.Builder();
    new BomRangesInfoContributor(new SimpleInitializrMetadataProvider(metadata)).contribute(builder);
    return builder.build();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746435544/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/documentation/HelpDocumentProjectContributorTests.java
Tests:
    "@Test
@Test
void helpDocumentEmptyDoesNotCreateFile() throws IOException {
    HelpDocument document = new HelpDocument(this.templateRenderer);
    assertThat(document.isEmpty()).isTrue();
    Path projectDir = Files.createTempDirectory(this.directory, "project-");
    new HelpDocumentProjectContributor(document).contribute(projectDir);
    Path helpDocument = projectDir.resolve("HELP.md");
    assertThat(helpDocument).doesNotExist();
}
"
    "@Test
private ListAssert<String> assertHelpDocument(HelpDocument document) throws IOException {
    Path projectDir = Files.createTempDirectory(this.directory, "project-");
    new HelpDocumentProjectContributor(document).contribute(projectDir);
    return new TextAssert(projectDir.resolve("HELP.md")).lines();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746435544/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/properties/ApplicationPropertiesContributorTests.java
Tests:
    "@Test
@Test
void applicationConfigurationWithDefaultSettings() throws IOException {
    new ApplicationPropertiesContributor(new ApplicationProperties()).contribute(this.directory);
    assertThat(new ProjectStructure(this.directory)).textFile("src/main/resources/application.properties").isEmpty();
}
"
    "@Test
@Test
void shouldAddStringProperty() throws IOException {
    ApplicationProperties properties = new ApplicationProperties();
    properties.add("spring.application.name", "test");
    ApplicationPropertiesContributor contributor = new ApplicationPropertiesContributor(properties);
    contributor.contribute(this.directory);
    assertThat(new ProjectStructure(this.directory)).textFile("src/main/resources/application.properties").lines().contains("spring.application.name=test");
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746435544/source/initializr/initializr-actuator/src/test/java/io/spring/initializr/actuate/info/DependencyRangesInfoContributorTests.java
Tests:
    "@Test
private static Info getInfo(InitializrMetadata metadata) {
    Info.Builder builder = new Info.Builder();
    new DependencyRangesInfoContributor(new SimpleInitializrMetadataProvider(metadata)).contribute(builder);
    return builder.build();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746435544/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/maven/MavenBuildProjectContributorTests.java
Tests:
    "@Test
@Test
void mavenBuildIsContributedInProjectStructure(@TempDir Path projectDir) throws IOException {
    MavenBuild build = new MavenBuild();
    new MavenBuildProjectContributor(build, IndentingWriterFactory.withDefaultSettings()).contribute(projectDir);
    Path pomFile = projectDir.resolve("pom.xml");
    assertThat(pomFile).isRegularFile();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746435544/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/GradleWrapperContributorTests.java
Tests:
    "@Test
@ParameterizedTest(name = "Gradle {0}")
@ValueSource(strings = "8")
void gradleWrapperSetExecutableFlagOnScripts(String gradleVersion) throws IOException {
    Path projectDir = contribute(gradleVersion);
    assertThat(projectDir.resolve("gradlew")).isRegularFile().isExecutable();
    assertThat(projectDir.resolve("gradlew.bat")).isRegularFile().isExecutable();
    assertThat(projectDir.resolve("gradle/wrapper/gradle-wrapper.jar")).isRegularFile().satisfies(isNotExecutable());
    assertThat(projectDir.resolve("gradle/wrapper/gradle-wrapper.properties")).isRegularFile().satisfies(isNotExecutable());
}
"
    "@Test
Path contribute(String gradleVersion) throws IOException {
    Path projectDir = Files.createTempDirectory(this.directory, "project-");
    new GradleWrapperContributor(gradleVersion).contribute(projectDir);
    return projectDir;
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746435544/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/configuration/WebFoldersContributorTests.java
Tests:
    "@Test
@Test
void webFoldersCreatedWithWebDependency() throws IOException {
    Dependency simple = Dependency.withId("simple", "com.example", "simple", null, Dependency.SCOPE_COMPILE);
    Dependency web = Dependency.withId("web", "com.example", "web", null, Dependency.SCOPE_COMPILE);
    web.setFacets(Collections.singletonList("web"));
    InitializrMetadata metadata = InitializrMetadataTestBuilder.withDefaults().addDependencyGroup("test", simple, web).build();
    Build build = createBuild(metadata);
    build.dependencies().add("simple");
    build.dependencies().add("web");
    Path projectDir = contribute(build, metadata);
    assertThat(projectDir.resolve("src/main/resources/templates")).isDirectory();
    assertThat(projectDir.resolve("src/main/resources/static")).isDirectory();
}
"
    "@Test
@Test
void webFoldersNotCreatedWithoutWebDependency() throws IOException {
    Dependency simple = Dependency.withId("simple", "com.example", "simple", null, Dependency.SCOPE_COMPILE);
    Dependency web = Dependency.withId("web", "com.example", "web", null, Dependency.SCOPE_COMPILE);
    web.setFacets(Collections.singletonList("web"));
    InitializrMetadata metadata = InitializrMetadataTestBuilder.withDefaults().addDependencyGroup("test", simple, web).build();
    Build build = createBuild(metadata);
    build.dependencies().add("simple");
    Path projectDir = contribute(build, metadata);
    assertThat(projectDir.resolve("src/main/resources/templates")).doesNotExist();
    assertThat(projectDir.resolve("src/main/resources/static")).doesNotExist();
}
"
    "@Test
private Path contribute(Build build, InitializrMetadata metadata) throws IOException {
    MutableProjectDescription projectDescription = new MutableProjectDescription();
    projectDescription.setPlatformVersion(Version.parse("1.0.0"));
    new WebFoldersContributor(build, metadata, projectDescription).contribute(this.projectDir);
    return this.projectDir;
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746435544/source/initializr/initializr-generator/src/test/java/io/spring/initializr/generator/project/contributor/MultipleResourcesProjectContributorTests.java
Tests:
    "@Test
@Test
void contribute(@TempDir Path directory) throws IOException {
    new MultipleResourcesProjectContributor("classpath:/data/multi").contribute(directory);
    assertThat(directory.resolve("one.properties")).exists().isRegularFile();
    assertThat(directory.resolve("two.xml")).exists().isRegularFile();
}
"
    "@Test
@Test
void contributeWithTrailingSlash(@TempDir Path directory) throws IOException {
    new MultipleResourcesProjectContributor("classpath:/data/multi/").contribute(directory);
    assertThat(directory.resolve("one.properties")).exists().isRegularFile();
    assertThat(directory.resolve("two.xml")).exists().isRegularFile();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746435544/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/maven/MavenWrapperContributorTests.java
Tests:
    "@Test
@ParameterizedTest(name = "Maven {0}")
@ValueSource(strings = "3")
void mavenWrapperSetExecutableFlagOnScripts(String mavenVersion) throws IOException {
    Path projectDir = contribute(mavenVersion);
    assertThat(projectDir.resolve("mvnw")).isRegularFile().isExecutable();
    assertThat(projectDir.resolve("mvnw.cmd")).isRegularFile().isExecutable();
    assertThat(projectDir.resolve(".mvn/wrapper/maven-wrapper.properties")).isRegularFile().satisfies(isNotExecutable());
}
"
    "@Test
Path contribute(String mavenVersion) throws IOException {
    Path projectDir = Files.createTempDirectory(this.directory, "project-");
    new MavenWrapperContributor(mavenVersion).contribute(projectDir);
    return projectDir;
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746435544/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/scm/git/GitProjectGenerationConfigurationTests.java
Tests:
    "@Test
@Test
void gitIgnoreIsContributedToProject(@TempDir Path directory) {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setBuildSystem(new GradleBuildSystem());
    Path projectDirectory = this.projectTester.withDirectory(directory).generate(description, (context) -> {
        GitIgnoreContributor contributor = context.getBean(GitIgnoreContributor.class);
        contributor.contribute(directory);
        return directory;
    });
    assertThat(projectDirectory.resolve(".gitignore")).isRegularFile();
}
"
    "@Test
@Test
void gitAttributesIsContributedToProject(@TempDir Path directory) {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setBuildSystem(new GradleBuildSystem());
    Path projectDirectory = this.projectTester.withDirectory(directory).generate(description, (context) -> {
        GitAttributesContributor contributor = context.getBean(GitAttributesContributor.class);
        contributor.contribute(directory);
        return directory;
    });
    assertThat(projectDirectory.resolve(".gitattributes")).isRegularFile();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746435544/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/GradleBuildProjectContributorTests.java
Tests:
    "@Test
@Test
void groovyDslGradleBuildIsContributedInProjectStructure(@TempDir Path projectDir) throws IOException {
    GradleBuild build = new GradleBuild();
    groovyDslGradleBuildProjectContributor(build, IndentingWriterFactory.withDefaultSettings()).contribute(projectDir);
    Path buildGradle = projectDir.resolve("build.gradle");
    assertThat(buildGradle).isRegularFile();
}
"
    "@Test
@Test
void kotlinDslGradleBuildIsContributedInProjectStructure(@TempDir Path projectDir) throws IOException {
    GradleBuild build = new GradleBuild();
    kotlinDslGradleBuildProjectContributor(build, IndentingWriterFactory.withDefaultSettings()).contribute(projectDir);
    Path buildGradleKts = projectDir.resolve("build.gradle.kts");
    assertThat(buildGradleKts).isRegularFile();
}
""""
Scenario 1: Application tries to create a new file at a valid project root path

Details:
  TestName: testCreateFileAtValidPath
  Description: The test checks if the contribute method is able to create a new file named "hello.txt" at a valid project root path.
Execution:
  Arrange: Provide a valid Path object as projectRoot.
  Act: Invoke contribute by passing the Path object.
  Assert: Using Files.exsists method, Assert that a file named "hello.txt" now exists in the projectRoot project directory.
Validation:
  This assertion checks if a new file named "hello.txt" is successfully created at the valid project root directory. This functionality is important as the created file could be used for storing project specific data.

Scenario 2: Application tries to create a new file at an invalid project root path

Details:
  TestName: testCreateFileAtInValidPath
  Description: The test checks if the contribute method throws an IOException when trying to create a new file named "hello.txt" at an invalid project root path.
Execution:
  Arrange: Provide an invalid Path object as projectRoot.
  Act: Invoke contribute by passing the Path object.
  Assert: Assert that an IOException is thrown.
Validation:
  This assertion checks if an IOException is thrown when trying to create a new file at an invalid project root path. This behavior is expected as an invalid path cannot be resolved into a real path and system resources cannot be created/accessed from it.

Scenario 3: Application tries to create a new file at a path pointing to an existing file

Details:
  TestName: testCreateFileAtExistingFilePath
  Description: The test checks if the contribute method successfully overwrites an existing file named "hello.txt" at a project root path when trying to create a new file at the same path.
Execution:
  Arrange: Provide a Path object pointing to an existing "hello.txt" file at projectRoot.
  Act: Invoke contribute by passing the Path object.
  Assert: Assert that the original "hello.txt" file is overwritten by the new file.
Validation:
  This assertion checks if the contribute method properly handles the condition where an existing file needs to be overwritten. This functionality is important as it ensures that the latest file from the contribute operation is preserved, even if a file of the same name previously existed at the project root path.
  """
*/

// ********RoostGPT********

package io.spring.initializr.doc.generator.project;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.io.TempDir;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.*;
import java.io.PrintWriter;
import io.spring.initializr.generator.project.contributor.ProjectContributor;

public class SampleContributorContributeTest {

	@TempDir
	Path sharedTempDir;

	@Test
	@Tag("valid")
	public void testCreateFileAtValidPath() throws IOException {
		SampleContributor contributor = new SampleContributor();

		contributor.contribute(sharedTempDir);

		assertTrue(Files.exists(sharedTempDir.resolve("hello.txt")));
	}

	@Test
	@Tag("invalid")
	public void testCreateFileAtInValidPath() {
		SampleContributor contributor = new SampleContributor();

		assertThrows(IOException.class, () -> contributor.contribute(sharedTempDir.resolve("invalid/path")));
	}

	@Test
	@Tag("valid")
	public void testCreateFileAtExistingFilePath() throws IOException {
		SampleContributor contributor = new SampleContributor();
		Path file = Files.createFile(sharedTempDir.resolve("hello.txt"));

		contributor.contribute(sharedTempDir);
		assertTrue(Files.exists(file));
	}

}