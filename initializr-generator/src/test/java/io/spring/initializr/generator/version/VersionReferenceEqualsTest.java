/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=equals_26d745efe8
ROOST_METHOD_SIG_HASH=equals_ded257778a

"""
  Scenario 1: Test equals for objects that are exactly the same

  Details:
    TestName: testEqualsForIdenticalObjects
    Description: This test verifies that the equals method returns true when comparing an object with itself.
  Execution:
    Arrange: Create a VersionReference instance named "same".
    Act: Compare "same" instance to itself using the equals method.
    Assert: Assert that the result is 'true'.
  Validation:
    The objects are identical, hence the invocation of equals should return true. This test ensures that the equals method checks object identity properly.

  Scenario 2: Test equals for objects that have the same property and value

  Details:
    TestName: testEqualsForSamePropAndValue
    Description: This test checks that the equals method returns true when the property and value of two different VersionReference objects are the same.
  Execution:
    Arrange: Create two different VersionReference instances named "one" and "two" with the same property and value.
    Act: Compare "one" with "two" using the equals method.
    Assert: Assert that the result is 'true'.
  Validation:
    The objects have the same property and value, hence their comparison should result true. This test ensures that the equals method considers object properties and values for its comparison.

  Scenario 3: Test equals for objects with different properties

  Details:
    TestName: testEqualsForDifferentProperties
    Description: This test checks that the equals method returns false when the property of two different VersionReference objects are not the same.
  Execution:
    Arrange: Create two different VersionReference instances named "one" and "two" with different properties but the same value.
    Act: Compare "one" with "two" using the equals method.
    Assert: Assert that the result is 'false'.
  Validation:
    The objects have different properties but the same value. As a result, their comparison should result false. This test checks the ability of the equals method to correctly differentiate objects based on their properties.

  Scenario 4: Test equals for objects with different values

  Details:
    TestName: testEqualsForDifferentValues
    Description: This test verifies that the equals method returns false when the value of two different VersionReference objects are not the same.
  Execution:
    Arrange: Create two different VersionReference instances named "one" and "two" with the same property but different values.
    Act: Compare "one" with "two" using the equals method.
    Assert: Assert that the result is 'false'.
  Validation:
    The objects have the same property but different values, hence their comparison should result false. This test proves the capacity of the equals method to properly differentiate objects based on their values.

  Scenario 5: Test equals with a null object

  Details:
    TestName: testEqualsWithNull
    Description: This test checks that the equals method returns false when the object passed as a parameter is null.
  Execution:
    Arrange: Create a VersionReference instance named "object".
    Act: Compare "object" with null using the equals method.
    Assert: Assert that the result is 'false'.
  Validation:
    A non-null object should not be equal to null. This scenario confirms that the equals method correctly handles null arguments.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import java.util.Objects;
import org.junit.jupiter.api.*;

public class VersionReferenceEqualsTest {

	@Test
	@Tag("valid")
	public void testEqualsForIdenticalObjects() {
		VersionReference same = VersionReference.ofProperty(VersionProperty.of("${same-property}"));
		Assertions.assertTrue(same.equals(same));
	}

	@Test
	@Tag("valid")
	public void testEqualsForSamePropAndValue() {
		VersionReference one = VersionReference.ofProperty(VersionProperty.of("${same-property}"));
		VersionReference two = VersionReference.ofProperty(VersionProperty.of("${same-property}"));
		Assertions.assertTrue(one.equals(two));
	}

	@Test
	@Tag("invalid")
	public void testEqualsForDifferentProperties() {
		VersionReference one = VersionReference.ofProperty(VersionProperty.of("${one-property}"));
		VersionReference two = VersionReference.ofProperty(VersionProperty.of("${two-property}"));
		Assertions.assertFalse(one.equals(two));
	}

	@Test
	@Tag("invalid")
	public void testEqualsForDifferentValues() {
		VersionReference one = VersionReference.ofValue("one-value");
		VersionReference two = VersionReference.ofValue("two-value");
		Assertions.assertFalse(one.equals(two));
	}

	@Test
	@Tag("invalid")
	public void testEqualsWithNull() {
		VersionReference object = VersionReference.ofProperty(VersionProperty.of("${property}"));
		Assertions.assertFalse(object.equals(null));
	}

}