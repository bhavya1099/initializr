/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=isProperty_e59c4f9154
ROOST_METHOD_SIG_HASH=isProperty_ab8bc6fad4

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d5958c2d-2a99-46e6-ba3d-f7c9d8576735/source/initializr/initializr-generator/src/test/java/io/spring/initializr/generator/version/VersionReferenceTests.java
Tests:
    "@Test
@Test
void ofPropertyWithVersionProperty() {
    VersionProperty property = VersionProperty.of("test.version", true);
    VersionReference reference = VersionReference.ofProperty(property);
    assertThat(reference.isProperty()).isTrue();
    assertThat(reference.getProperty()).isEqualTo(property);
    assertThat(reference.getValue()).isNull();
    assertThat(reference).hasToString("${test.version}");
}
"
    "@Test
@Test
void ofPropertyWithInternalProperty() {
    VersionReference reference = VersionReference.ofProperty("test.version");
    assertThat(reference.isProperty()).isTrue();
    assertThat(reference.getProperty().toStandardFormat()).isEqualTo("test.version");
    assertThat(reference.getValue()).isNull();
    assertThat(reference).hasToString("${test.version}");
}
"
    "@Test
@Test
void ofPropertyWithValue() {
    VersionReference reference = VersionReference.ofValue("1.2.3.RELEASE");
    assertThat(reference.isProperty()).isFalse();
    assertThat(reference.getProperty()).isNull();
    assertThat(reference.getValue()).isEqualTo("1.2.3.RELEASE");
    assertThat(reference).hasToString("1.2.3.RELEASE");
}
"Scenario 1: Test for Null Property
  Details:
    TestName: testIsPropertyNull.
    Description: The test is to check the behavior of the isProperty() method when the property is null.
  Execution:
    Arrange: Create a VersionReference instance with a null property and any value.
    Act: Invoke the isProperty() method.
    Assert: Assert that the method returns false.
  Validation:
    Since the property is null, isProperty() method is expected to return false indicating that the version reference does not have a property. This test verifies the isProperty() method's behavior when the object's property field is null.

Scenario 2: Test for Non-Null Property
  Details:
    TestName: testIsPropertyNotNull.
    Description: The test is to check the behavior of the isProperty() method when the property is not null.
  Execution:
    Arrange: Create a VersionReference instance with a non-null property and a null value.
    Act: Invoke the isProperty() method.
    Assert: Assert that the method returns true.
  Validation:
    As the property is not null in this case, the isProperty() method should return true, implying that the version reference has a property. This test verifies the correct behavior of the object's property field when it's not null.

Scenario 3: Test for property and value both Null
  Details:
    TestName: testIsPropertyAndValueNull.
    Description: The test is to check the behaviour of the isProperty() method when both the property and value are null.
  Execution:
    Arrange: Create a VersionReference instance with null property and null value.
    Act: Invoke the isProperty() method.
    Assert: Assert that the method returns false.
  Validation:
    Since both property and value are null, isProperty() must return false indicating that the version reference has neither property nor value. This test verifies the correct behavior of the isProperty() method when both the object's property field and value field are null.,
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.*;
import java.util.Objects;

public class VersionReferenceIsPropertyTest {

	@Test
	@Tag("invalid")
	public void testIsPropertyNull() {
		// Arrange
		VersionReference versionReference = VersionReference.ofValue("1.0.0");

		// Act
		boolean result = versionReference.isProperty();

		// Assert
		assertFalse(result, "IsProperty should return false when property is null");
	}

	@Test
	@Tag("valid")
	public void testIsPropertyNotNull() {
		// Arrange
		VersionProperty versionProperty = VersionProperty.of("spring-boot", false);
		VersionReference versionReference = VersionReference.ofProperty(versionProperty);

		// Act
		boolean result = versionReference.isProperty();

		// Assert
		assertTrue(result, "IsProperty should return true when property is not null");
	}

	@Test
	@Tag("boundary")
	public void testIsPropertyAndValueNull() {
		// Arrange
		VersionReference versionReference = VersionReference.ofValue(null);

		// Act
		boolean result = versionReference.isProperty();

		// Assert
		assertFalse(result, "IsProperty should return false when property is null, even when value is also null");
	}

}