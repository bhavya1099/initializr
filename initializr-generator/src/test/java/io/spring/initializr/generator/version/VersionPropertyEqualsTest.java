/*
 * Copyright 2012-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=equals_29289503be
ROOST_METHOD_SIG_HASH=equals_ded257778a

Scenario 1: Validate equals when Object is same as Current instance
  Details:
    TestName: validateEqualsForSameInstance
    Description: This test is to check if the equals function correctly identifies and returns true when the object passed is the same instance as the current object
  Execution:
    Arrange: Initialize an instance of the VersionProperty class.
    Act: Invoke the equals method with the same instance as parameter.
    Assert: Use JUnit assertions to check if the result is true.
  Validation:
    The equals method should return true when the parameter is the same as the current object instance. This helps to ensure the method correctly identifies identical instances.

Scenario 2: Validate equals function when Object is null
  Details:
    TestName: validateEqualsForNullObject
    Description: This test checks if the equals function returns false when a null object is passed.
  Execution:
    Arrange: Initialize an instance of the VersionProperty class.
    Act: Invoke equals method with null as parameter.
    Assert: Use JUnit assertions to check if the result is false.
  Validation:
    The equals method should return false when the parameter is null object. This confirms the method checks for null before comparison.

Scenario 3: Validate equals function when internal property varies
  Details:
    TestName: validateEqualsForDifferentInternalFlag
    Description: This test checks if the equals function adequately factors the internal property while comparing two different VersionProperty objects.
  Execution:
    Arrange: Initialize two instances of VersionProperty class with same property values but varying internal flags.
    Act: Invoke equals method of one instance with the other instance as parameter.
    Assert: Use JUnit assertions to check if the result is false.
  Validation:
    The equals method should return false when the internal property of two VersionProperty objects do not match, even if all the other properties match. This test confirms the total comparison logic of the equals method.

Scenario 4: Validate equals function when property String varies
  Details:
    TestName: validateEqualsForDifferentProperty
    Description: This test checks if the equals function adequately factors the property while comparing two different VersionProperty objects.
  Execution:
    Arrange: Initialize two instances of VersionProperty class with same internal flags but varying property values.
    Act: Invoke equals method of one instance with the other instance as parameter.
    Assert: Use JUnit assertions to check if the result is false.
  Validation:
    The equals method should return false when the property of two VersionProperty objects do not match, even if all the other properties match. This is vital to ensure the uniqueness of the VersionProperty instances.

Scenario 5: Validate equals function when all properties match
  Details:
    TestName: validateEqualsForMatchingProperties
    Description: This test is to check if equals function returns true when all properties are the same for two different VersionProperty objects.
  Execution:
    Arrange: Initialize two instances of VersionProperty class with similar property values and internal flags.
    Act: Invoke equals method of one instance with the other instance as parameter.
    Assert: Use JUnit assertions to check if the result is true.
  Validation:
    The equals method should return true when all properties of two VersionProperty objects match. This validates the correct functionality of the equals method in assessing the equivalence of two objects.,
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import org.springframework.util.StringUtils;

public class VersionPropertyEqualsTest {

	@Test
	@Tag("valid")
	public void validateEqualsForSameInstance() {
		VersionProperty versionProperty1 = VersionProperty.of("test", true);
		assertTrue(versionProperty1.equals(versionProperty1));
	}

	@Test
	@Tag("invalid")
	public void validateEqualsForNullObject() {
		VersionProperty versionProperty1 = VersionProperty.of("test", true);
		assertFalse(versionProperty1.equals(null));
	}

	@Test
	@Tag("invalid")
	public void validateEqualsForDifferentInternalFlag() {
		VersionProperty versionProperty1 = VersionProperty.of("test", true);
		VersionProperty versionProperty2 = VersionProperty.of("test", false);
		assertFalse(versionProperty1.equals(versionProperty2));
	}

	@Test
	@Tag("invalid")
	public void validateEqualsForDifferentProperty() {
		VersionProperty versionProperty1 = VersionProperty.of("test1", true);
		VersionProperty versionProperty2 = VersionProperty.of("test2", true);
		assertFalse(versionProperty1.equals(versionProperty2));
	}

	@Test
	@Tag("valid")
	public void validateEqualsForMatchingProperties() {
		VersionProperty versionProperty1 = VersionProperty.of("test", true);
		VersionProperty versionProperty2 = VersionProperty.of("test", true);
		assertTrue(versionProperty1.equals(versionProperty2));
	}

}