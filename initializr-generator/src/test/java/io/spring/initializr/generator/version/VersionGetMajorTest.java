/*
 * Copyright 2012-2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getMajor_f163c8fddc
ROOST_METHOD_SIG_HASH=getMajor_e8441138e8

Scenario 1: Verify Get Major with Non-Null Value

Details:
  TestName: getMajorWithNonNullValue.
  Description: This test scenario checks that the 'getMajor' function works as expected in the case when the 'major' field of the Version class is not null.
Execution:
  Arrange: Create an instance of the Version class with a 'major' field having non-null value.
  Act: Invoke the 'getMajor' method on the created instance.
  Assert: Check that the value returned by the method matches the value of the 'major' field used while creating the instance.
Validation:
  The 'getMajor' function is supposed to return the value of the 'major' field of the Version class instance. In this case, as the field was not null when the object was created, the method is supposed to return the exact same value. This scenario validates the correctness of the 'getMajor' method.

Scenario 2: Verify Get Major with Null Value

Details:
  TestName: getMajorWithNullValue.
  Description: This test scenario validates that the 'getMajor' function returns null if the 'major' field of the Version class is null.
Execution:
  Arrange: Create an instance of the Version class with a 'major' field set as null.
  Act: Invoke the 'getMajor' method on the created instance.
  Assert: Check that the returned value from the method is null.
Validation:
  The 'getMajor' function is supposed to return the value of the 'major' field. In this case, as the field was set to null while creating the instance of the Version class, the method must return null. This scenario validates that the 'getMajor' method handles null values correctly.

Scenario 3: Verify Get Major after Some Operations

Details:
  TestName: getMajorAfterSomeOperations.
  Description: This test scenario checks that the 'getMajor' function returns the right value after some operations on the Version object.
Execution:
  Arrange: Create an instance of the Version class with a non-null 'major' value, and then, perform some changes on other, non-related fields of the Version object, like 'minor', 'patch' or 'format'.
  Act: Invoke the 'getMajor' method on the modified instance.
  Assert: Validate that the returned value from the method matches with initial 'major' value (used while creating the instance).
Validation:
  The 'getMajor' function should always return the correct 'major' value of the Version instance, regardless of any other changes made to the instance. This test scenario verifies this consistency of the 'getMajor' method.

These are the three primary scenarios that could be considered for testing the 'getMajor' method from the 'Version' class. Any additional scenarios would likely involve complex combinations of these scenarios or increasingly "far off" edge cases, which could be quite unlikely during real use.
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.function.Function;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;

public class VersionGetMajorTest {

	@Test
	@Tag("valid")
	public void getMajorWithNonNullValue() {
		Version version = new Version(10, null, null, null);
		Integer expectedMajor = 10;
		Assertions.assertEquals(expectedMajor, version.getMajor(), "Major versions do not match");
	}

	@Test
	@Tag("invalid")
	public void getMajorWithNullValue() {
		Version version = new Version(null, null, null, null);
		Assertions.assertNull(version.getMajor(), "Major version is not null");
	}

	@Test
	@Tag("valid")
	public void getMajorAfterSomeOperations() {
		Version version = new Version(5, null, null, null);
		version.format(Format.V1);
		Integer expectedMajor = 5;
		Assertions.assertEquals(expectedMajor, version.getMajor(), "Major versions do not match after some operations");
	}

}