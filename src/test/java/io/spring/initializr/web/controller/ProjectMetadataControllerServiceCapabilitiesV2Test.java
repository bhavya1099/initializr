/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=serviceCapabilitiesV2_3743e6cc05
ROOST_METHOD_SIG_HASH=serviceCapabilitiesV2_3743e6cc05

"""
Scenario 1: Test to check if the serviceCapabilitiesV2 method responds with the correct output
Details:
  TestName: shouldReturnCorrectServiceCapabilitiesForV2
  Description: The test is designed to verify if the serviceCapabilitiesV2 method responds with the correct service capabilities for V2.
Execution:
  Arrange: Mock the InitializrMetadataProvider dependancy to return some dummy metadata and set it to dependencyMetadataProvider field of the class.
  Act: Invoke the serviceCapabilitiesV2 method.
  Assert: Validate if the response entity has a HTTP status of 200 (i.e., ResponseEntity.getStatusCode() == HttpStatus.OK) and MIME type of "application/vnd.initializr.v2+json".
Validation:
  This test confirms that when the serviceCapabilitiesV2 is invoked, it correctly fetches the service capabilities data for V2 and encapsulates it in a ResponseEntity.

Scenario 2: Test to check if the serviceCapabilitiesV2 caches the correct content for a certain period.
Details:
  TestName: shouldCacheCorrectlyServiceCapabilitiesForV2
  Description: The test is designed to validate if appropriate cache control is applied for a duration of 2 hours to the content returned by the serviceCapabilitiesV2 method.
Execution:
  Arrange: Mock the InitializrMetadataProvider dependancy to return some dummy metadata; and mock CacheControl to return a max-age of 2 hours.
  Act: Invoke the serviceCapabilitiesV2 method.
  Assert: Validate if CacheControl is set to 2 hours (CacheControl.getMaxAge() == 2 hours).
Validation:
  This test verifies that correct cache control directive is returned in the response headers promoting server efficiency and lowering network costs.

Scenario 3: Test to verify error handling when invalid metadata is received.
Details:
  TestName: shouldThrowInvalidMetadataException
  Description: The test is designed to verify if the InvalidInitializrMetadataException is thrown when the serviceCapabilitiesV2 method receives invalid metadata.
Execution:
  Arrange: Override the mechanism mocking InitializrMetadataProvider, to return invalid metadata.
  Act: Invoke the serviceCapabilitiesV2 method.
  Assert: Validate if the exception of type InvalidInitializrMetadataException is thrown.
Validation:
  This test confirms that the serviceCapabilitiesV2 method correctly handles the scenario when it receives invalid metadata by throwing the appropriate exception.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.controller;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import org.mockito.Mockito;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.CacheControl;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.BDDMockito.given;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.*;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import io.spring.initializr.generator.version.Version;
import io.spring.initializr.metadata.DependencyMetadata;
import io.spring.initializr.metadata.DependencyMetadataProvider;
import io.spring.initializr.metadata.InitializrConfiguration.Platform;
import io.spring.initializr.metadata.InvalidInitializrMetadataException;
import io.spring.initializr.web.mapper.DependencyMetadataJsonMapper;
import io.spring.initializr.web.mapper.DependencyMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataJsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV22JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV2JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataVersion;
import io.spring.initializr.web.project.InvalidProjectRequestException;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

public class ProjectMetadataControllerServiceCapabilitiesV2Test {

	private ProjectMetadataController controller;

	private InitializrMetadataProvider initializrMetadataProvider;

	@BeforeEach
	void setup() {
		initializrMetadataProvider = Mockito.mock(InitializrMetadataProvider.class);
		given(initializrMetadataProvider.get()).willReturn(Mockito.mock(InitializrMetadata.class));
		controller = new ProjectMetadataController(initializrMetadataProvider,
				Mockito.mock(DependencyMetadataProvider.class));
	}

	@Test
	@Tag("Valid")
	public void shouldReturnCorrectServiceCapabilitiesForV2() {
		ResponseEntity<String> entity = controller.serviceCapabilitiesV2();
		assertEquals(entity.getStatusCode(), HttpStatus.OK);
		assertEquals(entity.getHeaders().getContentType(),
				MediaType.parseMediaType("application/vnd.initializr.v2+json"));
	}

	@Test
	@Tag("Boundary")
	public void shouldCacheCorrectlyServiceCapabilitiesForV2() {
		ResponseEntity<String> entity = controller.serviceCapabilitiesV2();
		CacheControl cacheControl = CacheControl.noCache().cachePublic();
		assertEquals(entity.getHeaders().getCacheControl(), cacheControl.getHeaderValue());
	}

	@Test
	@Tag("Invalid")
	public void shouldThrowInvalidMetadataException() {
		given(initializrMetadataProvider.get()).willThrow(new InvalidInitializrMetadataException("Invalid metadata"));
		assertThrows(InvalidInitializrMetadataException.class, () -> controller.serviceCapabilitiesV2());
	}

}