/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=serviceCapabilitiesText_dfb5702f29
ROOST_METHOD_SIG_HASH=serviceCapabilitiesText_33f658da89

"""
  Scenario 1: Test when User Agent is null

  Details:
    TestName: testWhenUserAgentIsNull
    Description: This test scenario checks the behavior of the method when the user agent is not specified.
  Execution:
    Arrange: Nullify the user-agent parameter.
    Act: Invoke the method serviceCapabilitiesText with the null user agent.
    Assert: Check if the return ResponseEntity's body matches with generic capabilities and eTag property matches its content's unique ID.
  Validation:
    The assertion verifies that the method handles null user agent by returning generic capabilities. This ensures the method's robustness against null inputs.

  Scenario 2: Test when User Agent is CURL

  Details:
    TestName: testWhenUserAgentIsCurl
    Description: This test checks whether the method generates CURL related capabilities when user agent is identified as CURL.
  Execution:
    Arrange: Set the user-agent parameter as CURL.
    Act: Invoke the method serviceCapabilitiesText with the CURL user agent.
    Assert: Check if the return ResponseEntity's body matches with CURL capabilities and eTag property matches its content's unique ID.
  Validation:
    The assertion checks that the method correctly generates CURL capabilities when the user agent is CURL. This is crucial for achieving accurate agent-specific capabilities.

  Scenario 3: Test when User Agent is HTTPIE

  Details:
    TestName: testWhenUserAgentIsHttpie
    Description: This test scenario verifies that the method generates HTTPIE related capabilities when the user agent is identified as HTTPIE.
  Execution:
    Arrange: Set the user agent parameter to HTTPIE.
    Act: Invoke the method serviceCapabilitiesText with the HTTPIE user agent.
    Assert: Check if the return ResponseEntity's body matches with HTTPIE capabilities and eTag property matches its content's unique ID.
  Validation:
    The validation step confirms that the method correctly generates HTTPIE capabilities when the user agent is HTTPIE. The expected result aligns with the business requirement of providing agent-specific capabilities.

  Scenario 4: Test when User Agent is SPRING_BOOT_CLI

  Details:
    TestName: testWhenUserAgentIsSpringBootCli
    Description: This test scenario checks if the method generates SPRING_BOOT_CLI related capabilities when the user agent is identified as SPRING_BOOT_CLI.
  Execution:
    Arrange: Set the user-agent parameter as SPRING_BOOT_CLI.
    Act: Invoke the method serviceCapabilitiesText with the SPRING_BOOT_CLI user agent.
    Assert: Check if the return ResponseEntity's body matches with SPRING_BOOT_CLI capabilities and eTag property matches its content's unique ID.
  Validation:
    The validation verifies that SPRING_BOOT_CLI capabilities are generated when the user agent is identified as SPRING_BOOT_CLI, which aligns with the software's intended functionality.

  Scenario 5: Test when User Agent is unknown

  Details:
    TestName: testWhenUserAgentIsUnknown
    Description: This test scenario verifies the scenario when the user agent is unknown or not categorized under CURL, HTTPIE, and SPRING_BOOT_CLI.
  Execution:
    Arrange: Set the user-agent parameter as an unknown user agent.
    Act: Invoke the method serviceCapabilitiesText with the unknown user agent.
    Assert: Check if the return ResponseEntity's body matches with generic capabilities and eTag property matches its content's unique ID.
  Validation:
    The assertion validates that the method returns generic capabilities when the user agent is unknown, signaling the method's ability to handle unexpected inputs.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.controller;

import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.generator.io.template.TemplateRenderer;
import io.spring.initializr.web.support.Agent;
import io.spring.initializr.web.support.Agent.AgentId;
import io.spring.initializr.web.support.CommandLineHelpGenerator;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.http.ResponseEntity;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.when;
import org.junit.jupiter.api.*;
import java.io.IOException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity.BodyBuilder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;

class CommandLineMetadataControllerServiceCapabilitiesTextTest {

	@Mock
	private InitializrMetadataProvider metadataProvider;

	@Mock
	private TemplateRenderer templateRenderer;

	@Test
	@Tag("valid")
	void testWhenUserAgentIsNull() {
		CommandLineMetadataController controller = new CommandLineMetadataController(metadataProvider,
				templateRenderer);
		ResponseEntity<String> responseEntity = controller.serviceCapabilitiesText(null);
		assertNotNull(responseEntity);
		assertEquals("genericCapabilities", responseEntity.getBody());
	}

	@Test
	@Tag("valid")
	void testWhenUserAgentIsCurl() {
		CommandLineMetadataController controller = new CommandLineMetadataController(metadataProvider,
				templateRenderer);
		ResponseEntity<String> responseEntity = controller.serviceCapabilitiesText("CURL");
		assertNotNull(responseEntity);
		assertEquals("CurlCapabilities", responseEntity.getBody());
	}

	@Test
	@Tag("valid")
	void testWhenUserAgentIsHttpie() {
		CommandLineMetadataController controller = new CommandLineMetadataController(metadataProvider,
				templateRenderer);
		ResponseEntity<String> responseEntity = controller.serviceCapabilitiesText("HTTPIE");
		assertNotNull(responseEntity);
		assertEquals("HttpieCapabilities", responseEntity.getBody());
	}

	@Test
	@Tag("valid")
	void testWhenUserAgentIsSpringBootCli() {
		CommandLineMetadataController controller = new CommandLineMetadataController(metadataProvider,
				templateRenderer);
		ResponseEntity<String> responseEntity = controller.serviceCapabilitiesText("SPRING_BOOT_CLI");
		assertNotNull(responseEntity);
		assertEquals("SpringBootCliCapabilities", responseEntity.getBody());
	}

	@Test
	@Tag("valid")
	void testWhenUserAgentIsUnknown() {
		CommandLineMetadataController controller = new CommandLineMetadataController(metadataProvider,
				templateRenderer);
		ResponseEntity<String> responseEntity = controller.serviceCapabilitiesText("UNKNOWN");
		assertNotNull(responseEntity);
		assertEquals("genericCapabilities", responseEntity.getBody());
	}

}