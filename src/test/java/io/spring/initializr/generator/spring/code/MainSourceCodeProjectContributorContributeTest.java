/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=contribute_28e818ddc0
ROOST_METHOD_SIG_HASH=contribute_a94e4219ee

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/container/docker/compose/ComposeProjectContributorTests.java
Tests:
    "@Test
@Test
void composeFileIsContributedInProjectStructure(@TempDir Path projectDir) throws IOException {
    ComposeFile compose = new ComposeFile();
    compose.services().add("test", (service) -> service.image("my-image:1.2.3"));
    new ComposeProjectContributor(compose, IndentingWriterFactory.withDefaultSettings()).contribute(projectDir);
    Path composeFile = projectDir.resolve("compose.yaml");
    assertThat(composeFile).isRegularFile();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-actuator/src/test/java/io/spring/initializr/actuate/info/BomRangesInfoContributorTests.java
Tests:
    "@Test
private static Info getInfo(InitializrMetadata metadata) {
    Info.Builder builder = new Info.Builder();
    new BomRangesInfoContributor(new SimpleInitializrMetadataProvider(metadata)).contribute(builder);
    return builder.build();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/maven/MavenBuildProjectContributorTests.java
Tests:
    "@Test
@Test
void mavenBuildIsContributedInProjectStructure(@TempDir Path projectDir) throws IOException {
    MavenBuild build = new MavenBuild();
    new MavenBuildProjectContributor(build, IndentingWriterFactory.withDefaultSettings()).contribute(projectDir);
    Path pomFile = projectDir.resolve("pom.xml");
    assertThat(pomFile).isRegularFile();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/scm/git/GitProjectGenerationConfigurationTests.java
Tests:
    "@Test
@Test
void gitIgnoreIsContributedToProject(@TempDir Path directory) {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setBuildSystem(new GradleBuildSystem());
    Path projectDirectory = this.projectTester.withDirectory(directory).generate(description, (context) -> {
        GitIgnoreContributor contributor = context.getBean(GitIgnoreContributor.class);
        contributor.contribute(directory);
        return directory;
    });
    assertThat(projectDirectory.resolve(".gitignore")).isRegularFile();
}
"
    "@Test
@Test
void gitAttributesIsContributedToProject(@TempDir Path directory) {
    MutableProjectDescription description = new MutableProjectDescription();
    description.setBuildSystem(new GradleBuildSystem());
    Path projectDirectory = this.projectTester.withDirectory(directory).generate(description, (context) -> {
        GitAttributesContributor contributor = context.getBean(GitAttributesContributor.class);
        contributor.contribute(directory);
        return directory;
    });
    assertThat(projectDirectory.resolve(".gitattributes")).isRegularFile();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/properties/ApplicationPropertiesContributorTests.java
Tests:
    "@Test
@Test
void applicationConfigurationWithDefaultSettings() throws IOException {
    new ApplicationPropertiesContributor(new ApplicationProperties()).contribute(this.directory);
    assertThat(new ProjectStructure(this.directory)).textFile("src/main/resources/application.properties").isEmpty();
}
"
    "@Test
@Test
void shouldAddStringProperty() throws IOException {
    ApplicationProperties properties = new ApplicationProperties();
    properties.add("spring.application.name", "test");
    ApplicationPropertiesContributor contributor = new ApplicationPropertiesContributor(properties);
    contributor.contribute(this.directory);
    assertThat(new ProjectStructure(this.directory)).textFile("src/main/resources/application.properties").lines().contains("spring.application.name=test");
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/GradleWrapperContributorTests.java
Tests:
    "@Test
@ParameterizedTest(name = "Gradle {0}")
@ValueSource(strings = "8")
void gradleWrapperSetExecutableFlagOnScripts(String gradleVersion) throws IOException {
    Path projectDir = contribute(gradleVersion);
    assertThat(projectDir.resolve("gradlew")).isRegularFile().isExecutable();
    assertThat(projectDir.resolve("gradlew.bat")).isRegularFile().isExecutable();
    assertThat(projectDir.resolve("gradle/wrapper/gradle-wrapper.jar")).isRegularFile().satisfies(isNotExecutable());
    assertThat(projectDir.resolve("gradle/wrapper/gradle-wrapper.properties")).isRegularFile().satisfies(isNotExecutable());
}
"
    "@Test
Path contribute(String gradleVersion) throws IOException {
    Path projectDir = Files.createTempDirectory(this.directory, "project-");
    new GradleWrapperContributor(gradleVersion).contribute(projectDir);
    return projectDir;
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/maven/MavenWrapperContributorTests.java
Tests:
    "@Test
@ParameterizedTest(name = "Maven {0}")
@ValueSource(strings = "3")
void mavenWrapperSetExecutableFlagOnScripts(String mavenVersion) throws IOException {
    Path projectDir = contribute(mavenVersion);
    assertThat(projectDir.resolve("mvnw")).isRegularFile().isExecutable();
    assertThat(projectDir.resolve("mvnw.cmd")).isRegularFile().isExecutable();
    assertThat(projectDir.resolve(".mvn/wrapper/maven-wrapper.properties")).isRegularFile().satisfies(isNotExecutable());
}
"
    "@Test
Path contribute(String mavenVersion) throws IOException {
    Path projectDir = Files.createTempDirectory(this.directory, "project-");
    new MavenWrapperContributor(mavenVersion).contribute(projectDir);
    return projectDir;
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/GradleBuildProjectContributorTests.java
Tests:
    "@Test
@Test
void groovyDslGradleBuildIsContributedInProjectStructure(@TempDir Path projectDir) throws IOException {
    GradleBuild build = new GradleBuild();
    groovyDslGradleBuildProjectContributor(build, IndentingWriterFactory.withDefaultSettings()).contribute(projectDir);
    Path buildGradle = projectDir.resolve("build.gradle");
    assertThat(buildGradle).isRegularFile();
}
"
    "@Test
@Test
void kotlinDslGradleBuildIsContributedInProjectStructure(@TempDir Path projectDir) throws IOException {
    GradleBuild build = new GradleBuild();
    kotlinDslGradleBuildProjectContributor(build, IndentingWriterFactory.withDefaultSettings()).contribute(projectDir);
    Path buildGradleKts = projectDir.resolve("build.gradle.kts");
    assertThat(buildGradleKts).isRegularFile();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator/src/test/java/io/spring/initializr/generator/project/contributor/MultipleResourcesProjectContributorTests.java
Tests:
    "@Test
@Test
void contribute(@TempDir Path directory) throws IOException {
    new MultipleResourcesProjectContributor("classpath:/data/multi").contribute(directory);
    assertThat(directory.resolve("one.properties")).exists().isRegularFile();
    assertThat(directory.resolve("two.xml")).exists().isRegularFile();
}
"
    "@Test
@Test
void contributeWithTrailingSlash(@TempDir Path directory) throws IOException {
    new MultipleResourcesProjectContributor("classpath:/data/multi/").contribute(directory);
    assertThat(directory.resolve("one.properties")).exists().isRegularFile();
    assertThat(directory.resolve("two.xml")).exists().isRegularFile();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/SettingsGradleProjectContributorTests.java
Tests:
    "@Test
private TextAssert assertSettings(SettingsGradleProjectContributor contributor) throws IOException {
    Path projectDir = Files.createTempDirectory(this.directory, "project-");
    contributor.contribute(projectDir);
    return new TextAssert(projectDir.resolve("test.gradle"));
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/configuration/WebFoldersContributorTests.java
Tests:
    "@Test
@Test
void webFoldersCreatedWithWebDependency() throws IOException {
    Dependency simple = Dependency.withId("simple", "com.example", "simple", null, Dependency.SCOPE_COMPILE);
    Dependency web = Dependency.withId("web", "com.example", "web", null, Dependency.SCOPE_COMPILE);
    web.setFacets(Collections.singletonList("web"));
    InitializrMetadata metadata = InitializrMetadataTestBuilder.withDefaults().addDependencyGroup("test", simple, web).build();
    Build build = createBuild(metadata);
    build.dependencies().add("simple");
    build.dependencies().add("web");
    Path projectDir = contribute(build, metadata);
    assertThat(projectDir.resolve("src/main/resources/templates")).isDirectory();
    assertThat(projectDir.resolve("src/main/resources/static")).isDirectory();
}
"
    "@Test
@Test
void webFoldersNotCreatedWithoutWebDependency() throws IOException {
    Dependency simple = Dependency.withId("simple", "com.example", "simple", null, Dependency.SCOPE_COMPILE);
    Dependency web = Dependency.withId("web", "com.example", "web", null, Dependency.SCOPE_COMPILE);
    web.setFacets(Collections.singletonList("web"));
    InitializrMetadata metadata = InitializrMetadataTestBuilder.withDefaults().addDependencyGroup("test", simple, web).build();
    Build build = createBuild(metadata);
    build.dependencies().add("simple");
    Path projectDir = contribute(build, metadata);
    assertThat(projectDir.resolve("src/main/resources/templates")).doesNotExist();
    assertThat(projectDir.resolve("src/main/resources/static")).doesNotExist();
}
"
    "@Test
private Path contribute(Build build, InitializrMetadata metadata) throws IOException {
    MutableProjectDescription projectDescription = new MutableProjectDescription();
    projectDescription.setPlatformVersion(Version.parse("1.0.0"));
    new WebFoldersContributor(build, metadata, projectDescription).contribute(this.projectDir);
    return this.projectDir;
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-actuator/src/test/java/io/spring/initializr/actuate/info/DependencyRangesInfoContributorTests.java
Tests:
    "@Test
private static Info getInfo(InitializrMetadata metadata) {
    Info.Builder builder = new Info.Builder();
    new DependencyRangesInfoContributor(new SimpleInitializrMetadataProvider(metadata)).contribute(builder);
    return builder.build();
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-web/src/test/java/io/spring/initializr/web/controller/custom/CustomProjectContributor.java
Tests:
    "@Test
@Override
public void contribute(Path projectRoot) throws IOException {
    if (this.description instanceof CustomProjectDescription && ((CustomProjectDescription) this.description).isCustomFlag()) {
        Files.createFile(projectRoot.resolve("custom.txt"));
    }
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/documentation/HelpDocumentProjectContributorTests.java
Tests:
    "@Test
@Test
void helpDocumentEmptyDoesNotCreateFile() throws IOException {
    HelpDocument document = new HelpDocument(this.templateRenderer);
    assertThat(document.isEmpty()).isTrue();
    Path projectDir = Files.createTempDirectory(this.directory, "project-");
    new HelpDocumentProjectContributor(document).contribute(projectDir);
    Path helpDocument = projectDir.resolve("HELP.md");
    assertThat(helpDocument).doesNotExist();
}
"
    "@Test
private ListAssert<String> assertHelpDocument(HelpDocument document) throws IOException {
    Path projectDir = Files.createTempDirectory(this.directory, "project-");
    new HelpDocumentProjectContributor(document).contribute(projectDir);
    return new TextAssert(projectDir.resolve("HELP.md")).lines();
}
"Scenario 1: Testing the contribute method with valid inputs

Details:
  TestName: contributeWithValidInputs()
  Description: This test is intended to verify the contribute method with appropriate input values. If everything is executing as expected then no exception should be thrown.
Execution:
  Arrange: Mock classes like ProjectDescription, SourceFactory, etc. should be created and filled with valid data. Also, mocks for methods like getApplicationName, createCompilationUnit, etc. should return relevant values when they are triggered.
  Act: Execute the contribute method of MainSourceCodeProjectContributor with a valid projectRoot path.
  Assert: No exception should be thrown and projectRoot path should be correctly modified according to source code writing.
Validation:
  This assertion investigates whether the contribute method of the MainSourceCodeProjectContributor can perform correctly without throwing exceptions when supplied with valid inputs. The output will be a correctly formed project structure. It's critical because every project contribution requires a structural format that works.

Scenario 2: Testing the contribute method with invalid Path input

Details:
  TestName: contributeWithInvalidPath()
  Description: This test is to check the contribute method when projectRoot path does not exist. It should trigger an IOException.
Execution:
  Arrange: Set up mock classes and their methods just like in the first scenario.
  Act: Execute the contribute method with a non-existent or invalid project root path.
  Assert: An IOException should be thrown
Validation:
  This test validates the robustness of the contribute method when presented with an invalid file path. The exception is anticipated because the function is designed to notify the user if the path provided does not exist, allowing them to correct it.

Scenario 3: Testing contribute method in case of sourceFactory returns null

Details:
  TestName: contributeWithNoSourceCode()
  Description: This test aims to check the contribute function when sourceFactory returns null, which means no source code to write. It should not perform any operation and return immediately.
Execution:
  Arrange: Set up the sourceFactory to return null when its get() method is triggered.
  Act: Call the contribute method with a valid path.
  Assert: No further execution should occur after getting null source code.
Validation:
  This scenario validates that the contribute method can correctly handle the absence of source code. The method should not perform any operation and terminate immediately upon finding out that there is no source code to write. This is crucial for avoiding NullPointerExceptions during the further process.

Please consider these as a starting point and generate other validation scenarios like "contribute method with invalid source code", "contribute method when writing operation fails", "contribute method with illegal applicationName", and so on. Remember to include proper explanatory comments wherever necessary.
*/

// ********RoostGPT********

package io.spring.initializr.generator.spring.code;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.mockito.Mockito;
import java.io.IOException;
import java.nio.file.Path;
import java.util.function.Supplier;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.*;
import java.util.List;
import java.util.stream.Collectors;
import io.spring.initializr.generator.language.CompilationUnit;
import io.spring.initializr.generator.language.SourceCode;
import io.spring.initializr.generator.language.SourceCodeWriter;
import io.spring.initializr.generator.language.TypeDeclaration;
import io.spring.initializr.generator.project.ProjectDescription;
import io.spring.initializr.generator.project.contributor.ProjectContributor;
import io.spring.initializr.generator.spring.util.LambdaSafe;
import org.springframework.beans.factory.ObjectProvider;

public class MainSourceCodeProjectContributorContributeTest {

	private ProjectDescription description;

	private Supplier<SourceCode> sourceFactory;

	private SourceCodeWriter<SourceCode> sourceWriter;

	private MainSourceCodeProjectContributor mainContributor;

	@BeforeEach
	void setup() {
		description = Mockito.mock(ProjectDescription.class);
		sourceFactory = Mockito.mock(Supplier.class);
		sourceWriter = Mockito.mock(SourceCodeWriter.class);
		mainContributor = new MainSourceCodeProjectContributor(description, sourceFactory, sourceWriter, null, null,
				null);
	}

	@Test
	@Tag("valid")
	void contributeWithValidInputs() {
		SourceCode sourceCode = new SourceCode();
		Mockito.when(description.getApplicationName()).thenReturn("App1");
		Mockito.when(description.getPackageName()).thenReturn("com.test");
		Mockito.when(sourceFactory.get()).thenReturn(sourceCode);

		assertDoesNotThrow(() -> mainContributor.contribute(Path.of("src/main/java")));
	}

	@Test
	@Tag("invalid")
	void contributeWithInvalidPath() {
		SourceCode sourceCode = new SourceCode();
		Mockito.when(description.getApplicationName()).thenReturn("App1");
		Mockito.when(description.getPackageName()).thenReturn("com.test");
		Mockito.when(sourceFactory.get()).thenReturn(sourceCode);
		assertThrows(IOException.class, () -> mainContributor.contribute(Path.of("nonexistent/path")));
	}

	@Test
	@Tag("boundary")
	void contributeWithNoSourceCode() {
		Mockito.when(sourceFactory.get()).thenReturn(null);
		assertDoesNotThrow(() -> mainContributor.contribute(Path.of("src/main/java")));
	}

}