/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=springTgz_05998713f7
ROOST_METHOD_SIG_HASH=springTgz_05998713f7

"""
  Scenario 1: Test for successful redirection to the distribution URL
  Details:
    TestName: testRedirectionToDistributionUrl
    Description: The test is meant to check the functionality of the springTgz() method by testing if it successfully redirects to the distribution URL.
  Execution:
    Arrange: Mock the metadataProvider and set its return value to a predefined object with the specific URL.
    Act: Invoke the springTgz method.
    Assert: Verify that the method returns a 'redirect:' string concatenated with the previously mocked URL.
  Validation:
    We aim to verify that the method generates a correct redirection URL. The expected result is the URL needed for the redirect, and given the mocked data, it should match exactly. This ensures that proper redirection is performed according to the provided distribution URL.

  Scenario 2: Test when metadataProvider contains no URL
  Details:
    TestName: testWhenMetadataProviderContainsNoUrl
    Description: This test is to validate springTgz() method behaviour when the metadataProvider doesn't return a URL for the tar.gz distribution.
  Execution:
    Arrange: Mock the metadataProvider and set its return value as null or an empty string.
    Act: Invoke the springTgz() method.
    Assert: Assert that the returned string is simply 'redirect:' with no additional URL.
  Validation:
    This test scenario is necessary to make sure the method behaves as expected when there is no URL present in the metadataProvider. If the redirected URL is blank, it indicates that the method is robust against the absence of necessary data.

  Scenario 3: Test invocation of the method with different endpoints
  Details:
    TestName: testMethodInvocationWithDifferentPaths
    Description: This test is meant to confirm that even if the method is invoked with different endpoints ('/spring.tar.gz', '/spring.tgz'), it still works correctly.
  Execution:
    Arrange: Mock the metadataProvider and set its return value to a predefined URL.
    Act: Invoke the springTgz() method, first with '/spring.tar.gz' and then with '/spring.tgz'.
    Assert: Assert that in both cases, the returned redirect URL is the same and matches the expected URL.
  Validation:
    This scenario validates the method's resilience against different endpoints. As the function should work with either '/spring.tar.gz' or '/spring.tgz', ensuring this consistency guarantees correct function response under varying conditions.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.controller;

import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

public class SpringCliDistributionControllerSpringTgzTest {

	private static final String TEST_URL = "http://test.url";

	@Test
	@Tag("valid")
	public void testRedirectionToDistributionUrl() {
		InitializrMetadataProvider metadataProvider = Mockito.mock(InitializrMetadataProvider.class);
		Mockito.when(metadataProvider.get().createCliDistributionURl("tar.gz")).thenReturn(TEST_URL);
		SpringCliDistributionController controller = new SpringCliDistributionController(metadataProvider);
		String result = controller.springTgz();
		assertEquals("redirect:" + TEST_URL, result);
	}

	@Test
	@Tag("invalid")
	public void testWhenMetadataProviderContainsNoUrl() {
		InitializrMetadataProvider metadataProvider = Mockito.mock(InitializrMetadataProvider.class);
		Mockito.when(metadataProvider.get().createCliDistributionURl("tar.gz")).thenReturn(null);
		SpringCliDistributionController controller = new SpringCliDistributionController(metadataProvider);
		String result = controller.springTgz();
		assertEquals("redirect:", result);
	}

	@Test
	@Tag("integration")
	public void testMethodInvocationWithDifferentPaths() {
		InitializrMetadataProvider metadataProvider = Mockito.mock(InitializrMetadataProvider.class);
		Mockito.when(metadataProvider.get().createCliDistributionURl("tar.gz")).thenReturn(TEST_URL);
		SpringCliDistributionController controller1 = new SpringCliDistributionController(metadataProvider);
		SpringCliDistributionController controller2 = new SpringCliDistributionController(metadataProvider);
		String result1 = controller1.springTgz();
		String result2 = controller2.springTgz();
		assertEquals("redirect:" + TEST_URL, result1);
		assertEquals("redirect:" + TEST_URL, result2);
	}

}