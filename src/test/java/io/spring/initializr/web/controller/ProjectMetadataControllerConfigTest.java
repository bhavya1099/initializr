/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=config_9959740393
ROOST_METHOD_SIG_HASH=config_becbf164d9

"""
Scenario 1: Testing the retrieval of initial project metadata.

Details:
  TestName: testConfigRetrieval
  Description: This test ensures that the config method of our controller correctly returns the initial project metadata in its proper state.

Execution:
  Arrange: Mock the 'metadataProvider' to return a set instance of 'InitializrMetadata'.
  Act: Invoke the 'config' method.
  Assert: Assert that the returned object is the instance set in the mock.

Validation:
  The assertion verifies that the config method correctly returns the data retrieved from the metadata provider. We expect the same instance as it confirms that the controller method accurately returns the data from the metadata provider. This test is significant to ensure consistent and accurate retrieval of initial project metadata.

Scenario 2: Testing the proper functioning of config method against null metadata

Details:
  TestName: testConfigRetrievalWhenNull
  Description: This test ensures that the config method of our controller handles null return values from 'metadataProvider' without breaking.

Execution:
  Arrange: Mock the 'metadataProvider' to return null.
  Act: Invoke the 'config' method.
  Assert: Assert that the returned value is null.

Validation:
  The test verifies that the config method properly handles null values and successfully returns a null object upon receiving null metadata. This scenario is significant as it ensures the robustness of the controller in terms of potential null returns from dependencies.

Scenario 3: Testing the exception handling capability of the config method

Details:
  TestName: testConfigRetrievalWhenMetadataProviderThrowsException
  Description: This test ensures that if the 'metadataProvider' throws an exception, the config method can correctly handle this error case.

Execution:
  Arrange: Set the mock 'metadataProvider' to throw an exception when its get method is invoked.
  Act: Invoke the 'config' method.
  Assert: Catch any exceptions thrown and ensure they are of the expected type.

Validation:
  It validates our config method's capacity to handle situations when the metadata provider cannot fetch metadata correctly and results in exceptions. This test ensures that our controller class can trap such exceptions without breaking the application.
*/

// ********RoostGPT********

package io.spring.initializr.web.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.times;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.junit.jupiter.api.*;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import io.spring.initializr.generator.version.Version;
import io.spring.initializr.metadata.DependencyMetadata;
import io.spring.initializr.metadata.DependencyMetadataProvider;
import io.spring.initializr.metadata.InitializrConfiguration.Platform;
import io.spring.initializr.metadata.InvalidInitializrMetadataException;
import io.spring.initializr.web.mapper.DependencyMetadataJsonMapper;
import io.spring.initializr.web.mapper.DependencyMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataJsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV22JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV2JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataVersion;
import io.spring.initializr.web.project.InvalidProjectRequestException;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.http.CacheControl;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

class ProjectMetadataControllerConfigTest {

	@Mock
	InitializrMetadataProvider metadataProvider;

	@Test
	@Tag("valid")
	public void testConfigRetrieval() {
		InitializrMetadata metadata = new InitializrMetadata();
		when(metadataProvider.get()).thenReturn(metadata);
		ProjectMetadataController controller = new ProjectMetadataController(metadataProvider, null);
		assertEquals(metadata, controller.config());
		verify(metadataProvider, times(1)).get();
	}

	@Test
	@Tag("valid")
	public void testConfigRetrievalWhenNull() {
		when(metadataProvider.get()).thenReturn(null);
		ProjectMetadataController controller = new ProjectMetadataController(metadataProvider, null);
		assertEquals(null, controller.config());
		verify(metadataProvider, times(1)).get();
	}

	@Test
	@Tag("invalid")
	public void testConfigRetrievalWhenMetadataProviderThrowsException() {
		when(metadataProvider.get()).thenThrow(new RuntimeException());
		assertThrows(RuntimeException.class, () -> {
			ProjectMetadataController controller = new ProjectMetadataController(metadataProvider, null);
			controller.config();
		});
	}

}