/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=determineCacheControlFor_9483f8f769
ROOST_METHOD_SIG_HASH=determineCacheControlFor_f23ff5dce3

"""
  Scenario 1: Test for Correct CacheControl Return

  Details:
    TestName: verifyIfCorrectCacheControlReturned
    Description: This test ensures that the method 'determineCacheControlFor' returns CacheControl with correct max age (2 hours).
  Execution:
    Arrange: Create an instance of InitializrMetadata being used as parameter for 'determineCacheControlFor' method.
    Act: Pass created InitializrMetadata object to 'determineCacheControlFor' method
    Assert: Compare the returned CacheControl object with expected CacheControl of max. age 2 hours.
  Validation:
    The assertion verifies that CacheControl is set correctly with max. age as 2 hours. If the method provides correct CacheControl, it ensures proper and efficient caching for the client.

  Scenario 2: Test for Correct TimeUnit Return

  Details:
    TestName: verifyIfCorrectTimeUnitReturned
    Description: This test ensures that the method 'determineCacheControlFor' returns CacheControl with correct TimeUnit (HOURS).
  Execution:
    Arrange: Create an instance of InitializrMetadata being used as parameter for 'determineCacheControlFor' method.
    Act: Pass created InitializrMetadata object to 'determineCacheControlFor' method
    Assert: Compare the TimeUnit of the returned CacheControl object with expected TimeUnit (HOURS).
  Validation:
    The assertion verifies that TimeUnit is set correctly as HOURS. If the method provides correct TimeUnit, it guarantees detailed handling of cache.

  Scenario 3: Test for method's Null Input Handling

  Details:
    TestName: verifyMethodOnNullInput
    Description: This test verifies the behavior of the method 'determineCacheControlFor' when passed a null argument.
  Execution:
    Arrange: No arrangement needed as we are passing null as parameter.
    Act: Pass null to the 'determineCacheControlFor' method.
    Assert: Check if the method returns CacheControl with max. age 2 hours as expected.
  Validation:
    This test validates method's ability to handle null input properly and still provide expected default CacheControl. It ensures graceful handling of null arguments.
"""

*/

// ********RoostGPT********

package io.spring.initializr.web.controller;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.springframework.http.CacheControl;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InMemoryInitializrMetadataProvider;
import java.util.concurrent.TimeUnit;
import org.junit.jupiter.api.*;
import java.io.IOException;
import io.spring.initializr.generator.version.Version;
import io.spring.initializr.metadata.DependencyMetadata;
import io.spring.initializr.metadata.DependencyMetadataProvider;
import io.spring.initializr.metadata.InitializrConfiguration.Platform;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.metadata.InvalidInitializrMetadataException;
import io.spring.initializr.web.mapper.DependencyMetadataJsonMapper;
import io.spring.initializr.web.mapper.DependencyMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataJsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV22JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV2JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataVersion;
import io.spring.initializr.web.project.InvalidProjectRequestException;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

public class ProjectMetadataControllerDetermineCacheControlForTest {

	private ProjectMetadataController controller;

	@BeforeEach
	public void setup() {
		InitializrMetadata metadata = InitializrMetadata.withDefaults();
		InMemoryInitializrMetadataProvider provider = new InMemoryInitializrMetadataProvider(metadata);
		this.controller = new ProjectMetadataController(provider, null);
	}

	@Test
	@Tag("valid")
	public void verifyIfCorrectCacheControlReturned() {
		CacheControl cacheControl = controller.determineCacheControlFor(InitializrMetadata.withDefaults());
		Assertions.assertEquals(2, cacheControl.getCacheSeconds());
	}

	@Test
	@Tag("valid")
	public void verifyIfCorrectTimeUnitReturned() {
		CacheControl cacheControl = controller.determineCacheControlFor(InitializrMetadata.withDefaults());
		Assertions.assertEquals(TimeUnit.HOURS.toSeconds(2), cacheControl.getCacheSeconds());
	}

	@Test
	@Tag("boundary")
	public void verifyMethodOnNullInput() {
		CacheControl cacheControl = controller.determineCacheControlFor(null);
		Assertions.assertEquals(TimeUnit.HOURS.toSeconds(2), cacheControl.getCacheSeconds());
	}

}