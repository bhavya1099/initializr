/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=isHigherInclusive_cae7032b02
ROOST_METHOD_SIG_HASH=isHigherInclusive_1b4088c3f0

"""
Scenario 1: Validate if the higherVersion is inclusive
TestName: validateHigherVersionIsInclusive
Description: This test checks that the higherVersion is inclusive.
Execution:
  Arrange: Create a VersionRange object with higherInclusive set to true.
  Act: Call the isHigherInclusive() method.
  Assert: Assert that the returned value is true.
Validation:
  The assertion verifies that the higherVersion is inclusive for the created version range. If it is true, then it confirms that the higherVersion is inclusive.

Scenario 2: Validate when higherVersion is not inclusive
TestName: validateHigherVersionIsNonInclusive
Description: This test checks the behavior in the scenario where higherVersion is not inclusive.
Execution:
  Arrange: Create a VersionRange object with higherInclusive set to false.
  Act: Call the isHigherInclusive() method.
  Assert: Assert that the returned value is false.
Validation:
  The assertion verifies that the higherVersion is not inclusive for the created version range. If it is false, it confirms that the higherVersion is non-inclusive. This is critical as different operations might be applicable for inclusive and non-inclusive version ranges.

Scenario 3: Check if isHigherInclusive is consistent
TestName: checkIsHigherInclusiveConsistency
Description: This test validates that the method isHigherInclusive consistently returns the same value for a given VersionRange object.
Execution:
  Arrange: Create a VersionRange object with an arbitrary higherInclusive value.
  Act: Call the isHigherInclusive() method multiple times.
  Assert: Assert that the returned values are the same for each call.
Validation:
  The assertion verifies that the method isHigherInclusive is consistent and returns the same value for repeated calls. This test highlights the reliability of the getter method.

Scenario 4: Validate when higherVersion is null
TestName: validateHigherVersionNullity
Description: This test checks the return when the higherVersion is null since the isHigherInclusive cannot be true or false when the higherVersion is null.
Execution:
  Arrange: Create a VersionRange object without setting higherVersion.
  Act: Call the isHigherInclusive() method.
  Assert: Assert that the returned value is false.
Validation:
  The assertion verifies that when higherVersion is null, the isHigherInclusive method returns false. This will dictate how to handle situations where the higherVersion is not set.
""",
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Assertions;
import static org.mockito.Mockito.*;
import org.junit.jupiter.api.*;
import io.spring.initializr.generator.version.Version.Format;
import org.springframework.util.Assert;

public class VersionRangeIsHigherInclusiveTest {

	private Version lowerVersion, higherVersion;

	@BeforeEach
	public void setUp() {
		lowerVersion = mock(Version.class);
		higherVersion = mock(Version.class);
	}

	@Test
	@Tag("valid")
	public void validateHigherVersionIsInclusive() {
		VersionRange versionRange = new VersionRange(lowerVersion, true, higherVersion, true);
		Assertions.assertTrue(versionRange.isHigherInclusive());
	}

	@Test
	@Tag("invalid")
	public void validateHigherVersionIsNonInclusive() {
		VersionRange versionRange = new VersionRange(lowerVersion, true, higherVersion, false);
		Assertions.assertFalse(versionRange.isHigherInclusive());
	}

	@Test
	@Tag("valid")
	public void checkIsHigherInclusiveConsistency() {
		VersionRange versionRange = new VersionRange(lowerVersion, true, higherVersion, true);
		Assertions.assertEquals(versionRange.isHigherInclusive(), versionRange.isHigherInclusive());
	}

	@Test
	@Tag("boundary")
	public void validateHigherVersionNullity() {
		VersionRange versionRange = new VersionRange(lowerVersion);
		Assertions.assertFalse(versionRange.isHigherInclusive());
	}

}