/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=createProjectGenerator_ede895daf0
ROOST_METHOD_SIG_HASH=createProjectGenerator_5191a2029f

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-docs/src/test/java/io/spring/initializr/doc/generator/project/ProjectGeneratorSetupExampleTests.java
Tests:
    "@Test
@Test
void generateSimpleProjectStructure(@TempDir Path tempDir) {
    StaticApplicationContext context = new StaticApplicationContext();
    context.registerBean(InitializrMetadata.class, () -> InitializrMetadataTestBuilder.withDefaults().build());
    context.registerBean(IndentingWriterFactory.class, IndentingWriterFactory::withDefaultSettings);
    context.registerBean(MustacheTemplateRenderer.class, () -> new MustacheTemplateRenderer("classpath:/templates"));
    context.refresh();
    DefaultProjectAssetGenerator assetGenerator = new DefaultProjectAssetGenerator((description) -> tempDir);
    ProjectGenerator projectGenerator = new ProjectGeneratorSetupExample().createProjectGenerator(context);
    Path directory = projectGenerator.generate(createProjectDescription(), assetGenerator);
    assertThat(directory).isSameAs(tempDir);
    Path helloFile = directory.resolve("hello.txt");
    assertThat(helloFile).exists().isRegularFile().hasContent("Test");
}
""""
Scenario 1: Valid ApplicationContext Passed to the Method

Details:
  TestName: shouldCreateProjectGeneratorWhenValidAppContextPassed
  Description: This test is meant to check if the createProjectGenerator method successfully creates a ProjectGenerator when a valid ApplicationContext is passed as a parameter.
Execution:
  Arrange: Create a valid ApplicationContext.
  Act: Invoke the createProjectGenerator method with the valid ApplicationContext.
  Assert: Assert that the returned object is an instance of ProjectGenerator and ensure that the Application context of the generated project is set as the parent.
Validation:
  The assertion aims to verify that the method correctly creates a ProjectGenerator when provided with valid ApplicationContext. In the context of the application, this test verifies the successful initialization of the project.

Scenario 2: Null ApplicationContext Passed to the Method

Details:
  TestName: shouldThrowExceptionWhenNullAppContextPassed
  Description: This test is meant to check if the createProjectGenerator method throws a NullPointerException when null is passed as the ApplicationContext parameter.
Execution:
  Arrange: No setup required.
  Act: Invoke the createProjectGenerator method with null as the parameter.
  Assert: Assert that a NullPointerException is thrown.
Validation:
  The assertion aims to verify that the method correctly throws an exception when provided with a null parameter. This test protects the application from moving forward with invalid or insufficient data.

Scenario 3: Registering Bean in Created ProjectGenerator

Details:
  TestName: shouldRegisterBeanInCreatedProjectGenerator
  Description: This test is meant to check if the created ProjectGenerator correctly registers the SampleContributor bean.
Execution:
  Arrange: Create a valid ApplicationContext.
  Act: Invoke the createProjectGenerator method with the valid ApplicationContext and retrieve the created ProjectGenerator.
  Assert: Assert that the generated ProjectGenerator has the SampleContributor bean registered.
Validation:
  The assertion verifies that the generated ProjectGenerator properly registers the SampleContributor bean. This represents an important feature of setting up a project generator where specific beans are meant to be set up and be ready for consumption throughout the project lifetime.
"""
*/

// ********RoostGPT********

package io.spring.initializr.doc.generator.project;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import io.spring.initializr.generator.project.ProjectGenerator;
import io.spring.initializr.generator.test.contributor.SampleContributor;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

class ProjectGeneratorSetupExampleCreateProjectGeneratorTest {

	@Test
	@Tag("valid")
	public void shouldCreateProjectGeneratorWhenValidAppContextPassed() {
		ApplicationContext appContext = new AnnotationConfigApplicationContext();
		ProjectGeneratorSetupExample example = new ProjectGeneratorSetupExample();

		ProjectGenerator result = example.createProjectGenerator(appContext);
		assertSame(appContext, result.getConfigurableApplicationContext().getParent());
		assertTrue(result.getConfigurableApplicationContext().getBeanFactory().containsBean("sampleContributor"));
	}

	@Test
	@Tag("invalid")
	public void shouldThrowExceptionWhenNullAppContextPassed() {
		ProjectGeneratorSetupExample example = new ProjectGeneratorSetupExample();

		assertThrows(NullPointerException.class, () -> example.createProjectGenerator(null));
	}

	@Test
	@Tag("integration")
	public void shouldRegisterBeanInCreatedProjectGenerator() {
		ApplicationContext appContext = new AnnotationConfigApplicationContext();
		ProjectGeneratorSetupExample example = new ProjectGeneratorSetupExample();

		ProjectGenerator result = example.createProjectGenerator(appContext);
		assertEquals(SampleContributor.class,
				result.getConfigurableApplicationContext().getBean("sampleContributor").getClass());
	}

}