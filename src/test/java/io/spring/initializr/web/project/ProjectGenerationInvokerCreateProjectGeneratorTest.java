/*
 * Copyright 2012-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=createProjectGenerator_a47c7b7d31
ROOST_METHOD_SIG_HASH=createProjectGenerator_a7f17e7a2b

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-docs/src/test/java/io/spring/initializr/doc/generator/project/ProjectGeneratorSetupExampleTests.java
Tests:
    "@Test
@Test
void generateSimpleProjectStructure(@TempDir Path tempDir) {
    StaticApplicationContext context = new StaticApplicationContext();
    context.registerBean(InitializrMetadata.class, () -> InitializrMetadataTestBuilder.withDefaults().build());
    context.registerBean(IndentingWriterFactory.class, IndentingWriterFactory::withDefaultSettings);
    context.registerBean(MustacheTemplateRenderer.class, () -> new MustacheTemplateRenderer("classpath:/templates"));
    context.refresh();
    DefaultProjectAssetGenerator assetGenerator = new DefaultProjectAssetGenerator((description) -> tempDir);
    ProjectGenerator projectGenerator = new ProjectGeneratorSetupExample().createProjectGenerator(context);
    Path directory = projectGenerator.generate(createProjectDescription(), assetGenerator);
    assertThat(directory).isSameAs(tempDir);
    Path helloFile = directory.resolve("hello.txt");
    assertThat(helloFile).exists().isRegularFile().hasContent("Test");
}
""""
Scenario 1: Create Project Generator with recommended metadata properties

Details:
  TestName: createProjectGeneratorWithValidMetadata
  Description: This test validates the correct creation of ProjectGenerator instance when we provide a valid InitializeMetadata object.

Execution:
  Arrange: Create InitializeMetadata object with default properties.
  Act: Invoke the createProjectGenerator method with valid metadata.
  Assert: Assert if the returned ProjectGenerator instance is not null and its properties match with the provided metadata.

Validation:
  This test ensures that the ProjectGenerator can be created successfully with valid metadata and its properties match with the provided metadata. This scenario is essential as it tests the core functionality of the createProjectGenerator method.


Scenario 2: Create Project Generator with null metadata

Details:
  TestName: createProjectGeneratorWithNullMetadata
  Description: This test aims to validate the error handling scenario where null metadata is passed to the createProjectGenerator method.

Execution:
  Arrange: No arrangement needed as we are passing null.
  Act: Invoke the createProjectGenerator method with null metadata.
  Assert: Assert if IllegalArgumentException or NullPointerException is thrown.

Validation:
  This test scenario validates if the system throws an exception when null metadata is passed to the createProjectGenerator method. This is important to ensure that the system gracefully handles invalid inputs and prevents null pointer exceptions.


Scenario 3: Context customization as per the metadata

Details:
  TestName: contextCustomizationAccordingToMetadata
  Description: This test verifies if the generated ProjectGenerator customizes the ProjectGenerationContext as per the associated metadata.

Execution:
  Arrange: Create InitializeMetadata object with specific properties and create ProjectGenerator using this metadata.
  Act: Generate a sample ProjectGenerationContext and pass it to ProjectGenerator's function representing customizing logic.
  Assert: Assert if the ProjectGenerationContext is customized as per the metadata.

Validation:
  This test checks if the ProjectGenerator created by the createProjectGenerator method customize the ProjectGenerationContext as per metadata. This functionality is essential for correctly generating a project structure according to user requirements.


Scenario 4: Usage of created ProjectGenerator in project structure generation

Details:
  TestName: projectStructureGenerationWithCreatedProjectGenerator
  Description: This test aims to validate the successful operation of the invokeProjectStructureGeneration method when using a created ProjectGenerator.

Execution:
  Arrange: Create a ProjectGenerator by invoking createProjectGenerator method with a proper InitializeMetadata object, and a ProjectDescription object with necessary build specifications.
  Act: Invoke the project structure generation process using invokeProjectStructureGeneration method.
  Assert: Assert if a project structure is correctly generated and matches the provided ProjectDescription.

Validation:
  This checks the successful usage of created ProjectGenerator in generating a project structure. This is vital for ensuring that the ProjectGenerator returned by createProjectGenerator plays its role in the overall project generation process.


Please note that the mentioned test scenarios are abstract and the exact implementation can depend upon the specific requirements of your application and the internals of the ProjectGenerator and InitializeMetadata classes.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.project;

import io.spring.initializr.generator.buildsystem.BuildItemResolver;
import io.spring.initializr.generator.project.ProjectGenerationContext;
import io.spring.initializr.metadata.InitializrMetadata;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationEventPublisher;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.BDDMockito.given;
import org.junit.jupiter.api.*;
import java.io.IOException;
import java.io.StringWriter;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import io.spring.initializr.generator.buildsystem.BuildWriter;
import io.spring.initializr.generator.project.DefaultProjectAssetGenerator;
import io.spring.initializr.generator.project.ProjectAssetGenerator;
import io.spring.initializr.generator.project.ProjectDescription;
import io.spring.initializr.generator.project.ProjectGenerationException;
import io.spring.initializr.generator.project.ProjectGenerator;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.metadata.support.MetadataBuildItemResolver;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.util.FileSystemUtils;

public class ProjectGenerationInvokerCreateProjectGeneratorTest {

	private ApplicationContext parentApplicationContext;

	private ApplicationEventPublisher eventPublisher;

	private ProjectRequestToDescriptionConverter requestConverter;

	private ProjectGenerationInvoker projectGenerationInvoker;

	@BeforeEach
	void setUp() {
		parentApplicationContext = Mockito.mock(ApplicationContext.class);
		eventPublisher = Mockito.mock(ApplicationEventPublisher.class);
		requestConverter = Mockito.mock(ProjectRequestToDescriptionConverter.class);
		projectGenerationInvoker = new ProjectGenerationInvoker(parentApplicationContext, eventPublisher,
				requestConverter);
	}

	@Test
	@Tag("valid")
	public void createProjectGeneratorWithValidMetadata_test() {
		InitializrMetadata metadata = Mockito.mock(InitializrMetadata.class);
		ProjectGenerator generator = projectGenerationInvoker.createProjectGenerator(metadata);
		assertNotNull(generator, "ProjectGenerator should not be null");
		ProjectGenerationContext context = new ProjectGenerationContext();
		generator.invokeWith(context);
		BuildItemResolver resolver = context.getBean(BuildItemResolver.class);
		assertNotNull(resolver, "BuildItemResolver should be customized as per metadata");
	}

	@Test
	@Tag("invalid")
	public void createProjectGeneratorWithNullMetadata_test() {
		assertThrows(IllegalArgumentException.class, () -> projectGenerationInvoker.createProjectGenerator(null),
				"Should throw IllegalArgumentException when metadata is null");
	}

	@Test
	@Tag("integration")
	public void contextCustomizationAccordingToMetadata_test() {
		InitializrMetadata metadata = Mockito.mock(InitializrMetadata.class);
		ProjectGenerator generator = projectGenerationInvoker.createProjectGenerator(metadata);
		assertNotNull(generator, "ProjectGenerator should not be null");
		ProjectGenerationContext context = new ProjectGenerationContext();
		generator.invokeWith(context);
		BuildItemResolver resolver = context.getBean(BuildItemResolver.class);
		assertSame(resolver, metadata, "ProjectGenerationContext should be customized according to metadata");
	}

	@Test
	@Tag("integration")
	public void projectStructureGenerationWithCreatedProjectGenerator_test() {
		InitializrMetadata metadata = Mockito.mock(InitializrMetadata.class);
		given(parentApplicationContext.getBean(InitializrMetadataProvider.class).get()).willReturn(metadata);
		ProjectDescription description = Mockito.mock(ProjectDescription.class);
		given(requestConverter.convert(Mockito.any(), Mockito.eq(metadata))).willReturn(description);
		projectGenerationInvoker.invokeProjectStructureGeneration(Mockito.any());
		Mockito.verify(parentApplicationContext).publishEvent(Mockito.any(ProjectGeneratedEvent.class));
	}

}