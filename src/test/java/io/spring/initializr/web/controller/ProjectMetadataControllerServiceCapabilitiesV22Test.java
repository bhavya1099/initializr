/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=serviceCapabilitiesV22_76bdf67242
ROOST_METHOD_SIG_HASH=serviceCapabilitiesV22_76bdf67242

"""
Scenario 1: Test to validate expected ResponseEntity with correct Metadata Version

Details:
  TestName: validateMetaDataVersionV22.
  Description: This test ensures that the serviceCapabilitiesV22 method responds with the correct metadata version(V2_2) in the ResponseEntity.
Execution:
  Arrange: Mock the InitializrMetadataVersion to return V2_2.
  Act: Call the serviceCapabilitiesV22 method.
  Assert: Check if the returned ResponseEntity<String> contains the expected metadata version(V2_2) in the body/content type.
Validation:
  The assertion validates that the method returns the correct metadata version. This is critical because the metadata version denotes the version of the Initializr service capabilities.

Scenario 2: Test for checking Http status of ResponseEntity

Details:
  TestName: checkHttpStatusResponseEntity.
  Description: This test ensures that the serviceCapabilitiesV22 method responds with HTTP Status 200(OK) when provided with the correct metadata version.
Execution:
  Arrange: Mock the InitializrMetadataVersion to return V2_2.
  Act: Call the serviceCapabilitiesV22 method.
  Assert: Check if the returned ResponseEntity<String> has a HTTP Status Code of 200(OK).
Validation:
  The assertion confirms that the method returns an HTTP Status 200. This is necessary to confirm that the server can correctly handle and responds to the request.


Scenario 3: Test for validating MediaType of ResponseEntity

Details:
  TestName: validateResponseMediaType.
  Description: This test ensures that the serviceCapabilitiesV22 method responds with the MediaType as per InitializrMetadataVersion V2_2.
Execution:
  Arrange: Mock the InitializrMetadataVersion to return V2_2.
  Act: Call the serviceCapabilitiesV22 method.
  Assert: Check if the returned ResponseEntity<String> content type is that of the MediaType associated with InitializrMetadataVersion V2_2.
Validation:
  The assertion validates that the method returns ResponseEntity with the correct MediaType. This is to ensure that clients calling the service can accept and process the response.


Scenario 4: Test for handling unexpected MetadataVersion

Details:
  TestName: testUnexpectedMetaDataVersion.
  Description: This test handles the scenario where an unexpected MetadataVersion is used.
Execution:
  Arrange: Mock the InitializrMetadataVersion to return a version other than V2_2 like V2_1.
  Act: Call the serviceCapabilitiesV22 method.
  Assert: Check if an exception is thrown.
Validation:
  The assertion validates that the method correctly handles wrong meta-data versions and throws an exception. This is critical in situations where a client uses an outdated or unsupported version.

"""
*/

// ********RoostGPT********

package io.spring.initializr.web.controller;

import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.web.controller.ProjectMetadataController;
import io.spring.initializr.web.mapper.InitializrMetadataVersion;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;
import org.junit.jupiter.api.*;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import io.spring.initializr.generator.version.Version;
import io.spring.initializr.metadata.DependencyMetadata;
import io.spring.initializr.metadata.DependencyMetadataProvider;
import io.spring.initializr.metadata.InitializrConfiguration.Platform;
import io.spring.initializr.metadata.InvalidInitializrMetadataException;
import io.spring.initializr.web.mapper.DependencyMetadataJsonMapper;
import io.spring.initializr.web.mapper.DependencyMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataJsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV22JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV2JsonMapper;
import io.spring.initializr.web.project.InvalidProjectRequestException;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.http.CacheControl;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

public class ProjectMetadataControllerServiceCapabilitiesV22Test {

	@Mock
	private InitializrMetadataProvider metadataProvider;

	@Mock
	private InitializrMetadata metadata;

	@InjectMocks
	private ProjectMetadataController controller;

	@BeforeEach
	public void setup() {
		MockitoAnnotations.initMocks(this);
		when(metadataProvider.get()).thenReturn(metadata);
	}

	@Test
	@Tag("valid")
	public void validateMetaDataVersionV22() {
		ResponseEntity<String> responseEntity = controller.serviceCapabilitiesV22();
		assertEquals(InitializrMetadataVersion.V2_2.getMediaType(), responseEntity.getHeaders().getContentType());
	}

	@Test
	@Tag("valid")
	public void checkHttpStatusResponseEntity() {
		ResponseEntity<String> responseEntity = controller.serviceCapabilitiesV22();
		assertEquals(200, responseEntity.getStatusCodeValue());
	}

	@Test
	@Tag("valid")
	public void validateResponseMediaType() {
		ResponseEntity<String> responseEntity = controller.serviceCapabilitiesV22();
		assertEquals(MediaType.valueOf("application/vnd.initializr.v2.2+json"),
				responseEntity.getHeaders().getContentType());
	}

	@Test
	@Tag("invalid")
	public void testUnexpectedMetaDataVersion() {
		assertThrows(Exception.class, () -> {
			try {
				when(metadataProvider.get()).thenReturn(null);
				controller.serviceCapabilitiesV22();
			}
			catch (Exception e) {
				throw new Exception();
			}
		});
	}

}