/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=isProperty_e59c4f9154
ROOST_METHOD_SIG_HASH=isProperty_ab8bc6fad4

Scenario 1: Property Existence Check

Details:
  TestName: validatePropertyExists
  Description: This test checks the 'isProperty' method to verify if the 'property' attribute in the VersionReference object is not null.
Execution:
  Arrange: Create an instance of the VersionReference class using the 'ofProperty' method.
  Act: Call 'isProperty' method on this instance.
  Assert: It should return true, indicating the object has a 'property'.
Validation:
  This asserts the property is not null. This test validates that the 'isProperty()' method works as intended when 'property' is present in the VersionReference object.

Scenario 2: No Property Present Check

Details:
  TestName: validatePropertyNotExists
  Description: This test checks the 'isProperty' method to verify if the 'property' attribute in the VersionReference object is null.
Execution:
  Arrange: Create an instance of the VersionReference class using the 'ofValue' method, which sets 'property' to null.
  Act: Call 'isProperty' method on this instance.
  Assert: The response should be false, indicating the object has no 'property'.
Validation:
  This asserts the absence of property. This test validates that the 'isProperty()' method works correctly when 'property' is not present in the VersionReference object.

Scenario 3: Property Equality Check In different Objects

Details:
  TestName: validatePropertyInEqualityInObjects
  Description: This test checks whether 'isProperty' method can correctly identify different properties in multiple objects.
Execution:
  Arrange: Create two instances of the VersionReference class with different properties.
  Act: Call 'getProperty' method on both instances then call equals method.
  Assert: It should return false.
Validation:
  It verifies that two VersionReferences with different 'properties' are not equal. This test is integral for checking accurate property comparison between objects.

Scenario 4: Property Equality Check In Same Object

Details:
  TestName: validatePropertyEqualityInSameObject
  Description: This test checks whether 'isProperty' method can correctly identify the same properties within the same object.
Execution:
  Arrange: Create an instance of the VersionReference class.
  Act: Call 'getProperty' method twice on the same instance and then call equals method on the results.
  Assert: It should return true.
Validation:
  It verifies that calling getProperty on the same instance yields the same result. This test is vital to assure consistent return values of 'getProperty' method.
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Assertions;
import io.spring.initializr.generator.version.VersionReference;
import io.spring.initializr.generator.version.VersionProperty;
import org.junit.jupiter.api.*;
import java.util.Objects;

public class VersionReferenceIsPropertyTest {

	@Test
	@Tag("valid")
	public void validatePropertyExists() {
		VersionProperty exampleProperty = VersionProperty.of("exampleProperty");
		VersionReference testReference = VersionReference.ofProperty(exampleProperty);
		Assertions.assertTrue(testReference.isProperty());
	}

	@Test
	@Tag("invalid")
	public void validatePropertyNotExists() {
		VersionReference testReference = VersionReference.ofValue("exampleValue");
		Assertions.assertFalse(testReference.isProperty());
	}

	@Test
	@Tag("valid")
	public void validatePropertyInEqualityInObjects() {
		VersionProperty exampleProperty1 = VersionProperty.of("exampleProperty1");
		VersionProperty exampleProperty2 = VersionProperty.of("exampleProperty2");
		VersionReference testReference1 = VersionReference.ofProperty(exampleProperty1);
		VersionReference testReference2 = VersionReference.ofProperty(exampleProperty2);
		Assertions.assertNotEquals(testReference1.getProperty(), testReference2.getProperty());
	}

	@Test
	@Tag("valid")
	public void validatePropertyEqualityInSameObject() {
		VersionProperty exampleProperty = VersionProperty.of("exampleProperty");
		VersionReference testReference = VersionReference.ofProperty(exampleProperty);
		Assertions.assertEquals(testReference.getProperty(), testReference.getProperty());
	}

}