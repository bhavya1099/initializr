/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getProjectRequest_4deadfa269
ROOST_METHOD_SIG_HASH=getProjectRequest_42c43c1c93

Scenario 1: Test for Default Value of ProjectRequest

Details:
  TestName: testDefaultProjectRequestValue
  Description: This test will ensure that the getProjectRequest method is returning the default null value as expected since the ProjectRequest field 'request' is initially null.
Execution:
  Arrange: Create a new instance of the ProjectRequestEvent class.
  Act: Invoke the getProjectRequest method on this instance.
  Assert: Assert that the returned value is null.
Validation:
  The assertion aims to verify that the getProjectRequest method is functioning as expected by returning the default null value. It is important to ensure that the default state of objects is as intended.

Scenario 2: Test Validity of ProjectRequest After Setting Value

Details:
  TestName: testProjectRequestValueAfterSetting
  Description: This test is meant to check if the getProjectRequest method accurately returns a set value of a valid ProjectRequest.
Execution:
  Arrange: Create a new instance of the ProjectRequestEvent class and set some non-null ProjectRequest value.
  Act: Invoke the getProjectRequest method on this instance.
  Assert: Assert that the returned value is equal to the set value.
Validation:
  This assertion verifies if the getProjectRequest is correctly returning the value of the 'request' field. This is crucial, as applications often retrieve values which have been previously set; ensuring its correctness is essential for application behavior.

Scenario 3: Test the Consistency of Repeated getProjectRequest Call

Details:
  TestName: testRepeatedProjectRequestCalls
  Description: This test will ensure that repeated calls to getProjectRequest on the same instance consistently return the same value.
Execution:
  Arrange: Create a new instance of the ProjectRequestEvent class and set a non-null ProjectRequest value.
  Act: Invoke the getProjectRequest method on this instance multiple times.
  Assert: Assert that the returned value is the same for every call.
Validation:
  The assertion is verifying that the getProjectRequest method is stateless. It should always return the same result when invoked on the same object state.

Scenario 4: Test Effect of Metadata Value On getProjectRequest

Details:
  TestName: testMetadataEffectOnGetProjectRequest
  Description: This test is to check if changes in the metadata field would affect the project request value.
Execution:
  Arrange: Create an instance of ProjectRequestEvent. Set different metadata values.
  Act: For each different metadata value, invoke getProjectRequest.
  Assert: Assert that the getProjectRequest value remains the same despite changes in metadata.
Validation:
  This assertion aims to confirm that the getProjectRequest method does not depend on the 'metadata' field which ensures correct isolation of concerns.
*/

// ********RoostGPT********

package io.spring.initializr.web.project;

import io.spring.initializr.metadata.InitializrMetadata;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.*;

public class ProjectRequestEventGetProjectRequestTest {

	@Test
	@Tag("invalid")
	public void testDefaultProjectRequestValue() {
		ProjectRequest request = null;
		InitializrMetadata metadata = new InitializrMetadata();
		ProjectRequestEvent event = new ProjectRequestEvent(request, metadata);

		assertNull(event.getProjectRequest(), "FAIL: Expected project request to be null");
	}

	@Test
	@Tag("valid")
	public void testProjectRequestValueAfterSetting() {
		ProjectRequest request = new ProjectRequest();
		request.setDependencies(new ArrayList<>());
		request.setName("test");

		InitializrMetadata metadata = new InitializrMetadata();
		ProjectRequestEvent event = new ProjectRequestEvent(request, metadata);

		assertEquals(request, event.getProjectRequest(), "FAIL: ProjectRequest value is not as expected");
	}

	@Test
	@Tag("valid")
	public void testRepeatedProjectRequestCalls() {
		ProjectRequest request = new ProjectRequest();
		request.setDependencies(new ArrayList<>());
		request.setName("test");

		InitializrMetadata metadata = new InitializrMetadata();
		ProjectRequestEvent event = new ProjectRequestEvent(request, metadata);

		assertEquals(request, event.getProjectRequest(),
				"FAIL: First call to getProjectRequest() did not match expected output");
		assertEquals(request, event.getProjectRequest(),
				"FAIL: Second call to getProjectRequest() did not match expected output");
	}

	@Test
	@Tag("boundary")
	public void testMetadataEffectOnGetProjectRequest() {
		ProjectRequest request = new ProjectRequest();
		request.setDependencies(new ArrayList<>());
		request.setName("test1");

		InitializrMetadata metadata1 = new InitializrMetadata();
		metadata1.setGroupId("testGroup1");

		ProjectRequestEvent event1 = new ProjectRequestEvent(request, metadata1);

		InitializrMetadata metadata2 = new InitializrMetadata();
		metadata2.setGroupId("testGroup2");

		ProjectRequestEvent event2 = new ProjectRequestEvent(request, metadata2);

		assertEquals(event1.getProjectRequest().getName(), event2.getProjectRequest().getName(),
				"FAIL: The 'getProjectRequest' method is incorrectly affected by Metadata changes");
	}

}