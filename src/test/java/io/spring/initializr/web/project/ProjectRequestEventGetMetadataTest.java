/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getMetadata_1206d36e1f
ROOST_METHOD_SIG_HASH=getMetadata_204504630d

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/java-report-test/d854f7fc-c571-4395-a8d5-7c882b49aed8/source/initializr/initializr-web/src/test/java/io/spring/initializr/web/controller/custom/CustomProjectGenerationController.java
Tests:
    "@Test
@Override
public CustomProjectRequest projectRequest(Map<String, String> headers) {
    CustomProjectRequest request = new CustomProjectRequest();
    request.getParameters().putAll(headers);
    request.initialize(getMetadata());
    return request;
}
""""
  Scenario 1: Test to verify that getMetadata() returns the correct metadata object

  Details:
    TestName: verifyGetMetadataFunctionality.
    Description: This test aims to ensure that the getMetadata() method behaves correctly, i.e. it fetches the correct metadata object that was previously set in the class.
  Execution:
    Arrange: Instantiate a ProjectRequestEvent object; Set an InitializrMetadata object to its metadata variable.
    Act: Invoke the getMetadata() method on the ProjectRequestEvent object.
    Assert: The method should return the same InitializrMetadata object which we set earlier.
  Validation:
    The assertion confirms the method's responsibility to fetch the correct metadata object, the expected result being the InitializrMetadata that we set. This is crucial as we depend on this functionality to provide accurate metadata as requested.


  Scenario 2: Test to verify the getMetadata() method when no metadata is set

  Details:
    TestName: verifyGetMetadataWithoutSettingMetadata.
    Description: This test is meant to check the behavior of the getMetadata() method when a metadata object has not been set in the class.
  Execution:
    Arrange: Instantiate a ProjectRequestEvent object with null value for metadata.
    Act: Call the getMetadata() method on the ProjectRequestEvent object.
    Assert: Compare output of the function with null, it should return null.
  Validation:
    The assertion aims to verify whether the method can successfully handle the scenario where no metadata has been set, hence it should return null. This is essential to handle cases where an Instance of InitializrMetadata is not set explicitly.


  Scenario 3: Test to ensure that getMetadata() does not manipulate the metadata object in the class

  Details:
    TestName: verifyGetMetadataWithoutManipulation.
    Description: This test aims to check the integrity of the returned metadata object, ensuring that getMetadata() does not manipulate the metadata object in any way.
  Execution:
    Arrange: Instantiate a ProjectRequestEvent object;set an InitializrMetadata object to its metadata variable.
    Act: Invoke the getMetadata() method on the ProjectRequestEvent object.
    Assert: The metadata object returned should equal the object that was initialized, asserting that no changes were made to it.
  Validation:
    The assertion's goal is to confirm that the method does not alter the original object hence, it should return the exact InitializrMetadata object that was initialized. The importance of this scenario is to ensure that the integrity of the metadata object remains the same when fetched.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.project;

import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import io.spring.initializr.metadata.InitializrMetadata;
import org.junit.jupiter.api.*;

public class ProjectRequestEventGetMetadataTest {

	@Test
	@Tag("valid")
	public void verifyGetMetadataFunctionality() {
		// Arrange
		InitializrMetadata metadata = new InitializrMetadata();
		ProjectRequestEvent pre = new ProjectRequestEvent(new ProjectRequest(), metadata);
		// Act
		InitializrMetadata result = pre.getMetadata();
		// Assert
		Assertions.assertEquals(metadata, result, "getMetadata should return the correct InitializrMetadata object");
	}

	@Test
	@Tag("invalid")
	public void verifyGetMetadataWithoutSettingMetadata() {
		// Arrange
		ProjectRequestEvent pre = new ProjectRequestEvent(new ProjectRequest(), null);

		// Act
		InitializrMetadata result = pre.getMetadata();
		// Assert
		Assertions.assertNull(result, "getMetadata should return null if no InitializrMetadata has been set");
	}

	@Test
	@Tag("valid")
	public void verifyGetMetadataWithoutManipulation() {
		// Arrange
		InitializrMetadata metadata = new InitializrMetadata();
		ProjectRequestEvent pre = new ProjectRequestEvent(new ProjectRequest(), metadata);
		// Act
		InitializrMetadata result = pre.getMetadata();
		// Assert
		Assertions.assertSame(metadata, result, "getMetadata should not manipulate the InitializrMetadata object");
	}

}