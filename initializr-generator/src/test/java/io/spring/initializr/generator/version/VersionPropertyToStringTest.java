/*
 * Copyright 2012-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=toString_9bde10beb1
ROOST_METHOD_SIG_HASH=toString_bbffdadaa2

"""
  Scenario 1: Verify correct string representation of a VersionProperty object

  Details:
    TestName: testToStringMethod
    Description: Check if the toString method correctly displays the 'property' instance variable of the given 'VersionProperty' object.
  Execution:
    Arrange: Create a VersionProperty object with predifined 'property' value.
    Act: Invoke the toString method on the created object.
    Assert: Check that the returned String exactly matches the 'property' value with which the object was created.
  Validation:
    Validate that the toString method directly displays the 'property' of a VersionProperty, as its purpose is to provide a textual representation of the object.

  Scenario 2: Validate behavior of toString for empty 'property'

  Details:
    TestName: testToStringWithEmptyProperty
    Description: Validate how toString handles an instance with an empty 'property'.
  Execution:
    Arrange: Create a VersionProperty object with an empty 'property'.
    Act: Call the toString method.
    Assert: Check that the returned String is also empty, matching the object's 'property'.
  Validation:
    Validate the robustness of the toString method as it should not crash or throw exceptions for empty properties, instead it should reflect the exact state of the object.

  Scenario 3: Check correct return of toString when object's property contain special characters

  Details:
    TestName: testToStringWithSpecialCharacterProperty
    Description: Check how toString handles an instance with a 'property' containing supported special characters ('.' and '-').
  Execution:
    Arrange: Create a VersionProperty object with a 'property' that includes '.' and '-'.
    Act: Invoke toString.
    Assert: Assert that the returned String correctly displays the special characters.
  Validation:
    Asserting that the toString method accurately represents objects even if the 'property' contains special characters, reinforcing its reliability.

  Scenario 4: Validate that toString method respects the encapsulation principle

  Details:
    TestName: testToStringEncapsulation
    Description: Validate that the toString method only exposes 'property' and doesn't expose any other internal fields of the object.
  Execution:
    Arrange: Create a VersionProperty object with a defined 'property' and 'internal' field.
    Act: Invoke toString.
    Assert: Assert that the returned String only contains the 'property', and does not expose the 'internal' field.
  Validation:
    Demonstrating that the toString method respects the encapsulation principle of object-oriented programming by not revealing any private fields not meant to be shown.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import org.springframework.util.StringUtils;

public class VersionPropertyToStringTest {

	@Test
	@Tag("valid")
	public void testToStringMethod() {
		VersionProperty testVersionProperty = VersionProperty.of("testProperty", true);

		String expected = "testProperty";
		String actual = testVersionProperty.toString();
		assertEquals(expected, actual, "Error: VersionProperty.toString() should return the 'property' of the object");
	}

	@Test
	@Tag("boundary")
	public void testToStringWithEmptyProperty() {
		VersionProperty testVersionProperty = VersionProperty.of("", true);

		String expected = "";
		String actual = testVersionProperty.toString();
		assertEquals(expected, actual, "Error: VersionProperty.toString() should be able to handle empty 'property'");
	}

	@Test
	@Tag("valid")
	public void testToStringWithSpecialCharacterProperty() {
		VersionProperty testVersionProperty = VersionProperty.of("test-property.version", true);

		String expected = "test-property.version";
		String actual = testVersionProperty.toString();
		assertEquals(expected, actual,
				"Error: VersionProperty.toString() should return 'property' even with special characters");
	}

	@Test
	@Tag("valid")
	public void testToStringEncapsulation() {
		VersionProperty testVersionProperty = VersionProperty.of("testProperty", true);
		String containedInternal = Boolean.toString(testVersionProperty.isInternal());
		String actual = testVersionProperty.toString();

		assertEquals(false, actual.contains(containedInternal),
				"Error: VersionProperty.toString() shouldn't expose 'internal' field");
	}

}