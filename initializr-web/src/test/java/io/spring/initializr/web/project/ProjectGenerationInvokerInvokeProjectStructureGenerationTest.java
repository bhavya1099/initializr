/*
 * Copyright 2012-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=invokeProjectStructureGeneration_f6417f3a51
ROOST_METHOD_SIG_HASH=invokeProjectStructureGeneration_87c94e4afc

"""
Scenario 1: Test the successful project structure generation.

Details:
  TestName: testSuccessfulProjectStructureGeneration.
  Description: This test is meant to check the successful execution of the invokeProjectStructureGeneration method. Here, the scenario assumes that all dependencies and supporting objects are properly initialized and valid project structure can be generated.
Execution:
  Arrange: Mock the 'request' object and 'InitializrMetadataProvider', and set proper return values for 'ProjectDescription', 'ProjectGenerator', 'generateProject', 'ProjectGenerationResult'.
  Act: Invoke the 'invokeProjectStructureGeneration' method on the mocked request.
  Assert: Assert that 'invokeProjectStructureGeneration' does not throw any exception and returns 'ProjectGenerationResult' as expected.
Validation:
  This assertion verifies that the project structure generation is successful without any exceptions and returns a ProjectGenerationResult object. It validates the functionality of the method in the standard operation scenario.

Scenario 2: Test the failure of project structure generation.

Details:
  TestName: testFailedProjectStructureGeneration.
  Description: This test is designed to validate the invokeProjectStructureGeneration method when 'ProjectGenerationException' is thrown by underlying methods, to make sure the exception gets propagated.
Execution:
  Arrange: Mock the 'request' object and 'InitializrMetadataProvider', and set 'requestConverter.convert' to throw a 'ProjectGenerationException'.
  Act: Invoke the 'invokeProjectStructureGeneration' method on the mocked request.
  Assert: Assert that 'invokeProjectStructureGeneration' throws a 'ProjectGenerationException'.
Validation:
  This assertion confirms that the method deals correctly with the scenario when it encounters an exception during the project generation. It checks if the method is able to handle the exception and propagate it as expected.

Scenario 3: Test ProjectGenerationResult's root directory.

Details:
  TestName: testProjectGenerationResultRootDirectory.
  Description: The test is intended to check if the method correctly adds the generated project's root directory to the temporary files.
Execution:
  Arrange: Mock the 'request' object and 'InitializrMetadataProvider', and set the necessary responses for 'ProjectDescription', 'ProjectGenerator', 'generateProject' and 'ProjectGenerationResult'.
  Act: Invoke 'invokeProjectStructureGeneration' method on the mocked request.
  Assert: Assert that the root directory of ProjectGenerationResult is added to the temporary files.
Validation:
  This assertion verifies that the method has successfully added the generated project's root directory to the temporary files. This is important for further operation related to these temporary files.

Scenario 4: Test the invocation of 'publishProjectFailedEvent'.

Details:
  TestName: testInvocationOfPublishProjectFailedEvent.
  Description: This test is aimed to verify that the method 'publishProjectFailedEvent' is invoked when 'ProjectGenerationException' is encountered.
Execution:
  Arrange: Mock the 'request' object and 'InitializrMetadataProvider', and set 'requestConverter.convert' to throw a 'ProjectGenerationException'.
  Act: Invoke 'invokeProjectStructureGeneration' on the mocked request.
  Assert: Assert that 'publishProjectFailedEvent' method is invoked.
Validation:
  This assertion checks whether the correct event is published when the project generation fails. It is crucial in order to notify others about the failure and possibly trigger compensating actions.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.project;

import java.nio.file.Path;
import java.util.Map;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.mockito.Mockito;
import io.spring.initializr.generator.project.ProjectGenerationResult;
import org.junit.jupiter.api.*;
import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import io.spring.initializr.generator.buildsystem.BuildItemResolver;
import io.spring.initializr.generator.buildsystem.BuildWriter;
import io.spring.initializr.generator.project.DefaultProjectAssetGenerator;
import io.spring.initializr.generator.project.ProjectAssetGenerator;
import io.spring.initializr.generator.project.ProjectDescription;
import io.spring.initializr.generator.project.ProjectGenerationContext;
import io.spring.initializr.generator.project.ProjectGenerationException;
import io.spring.initializr.generator.project.ProjectGenerator;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.metadata.support.MetadataBuildItemResolver;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.util.FileSystemUtils;

public class ProjectGenerationInvokerInvokeProjectStructureGenerationTest {

	private ProjectGenerationInvoker projectGenerationInvoker;

	private R request;

	private InitializrMetadataProvider initializrMetadataProvider;

	private ProjectDescription description;

	private ProjectGenerator projectGenerator;

	private ProjectGenerationResult projectGenerationResult;

	@BeforeEach
	public void setUp() {
		projectGenerationInvoker = Mockito.mock(ProjectGenerationInvoker.class);
		request = Mockito.mock(request.class);
		initializrMetadataProvider = Mockito.mock(InitializrMetadataProvider.class);
		descriptionMock = Mockito.mock(ProjectDescription.class);
		projectGenerator = Mockito.mock(ProjectGenerator.class);
		projectGenerationResult = Mockito.mock(ProjectGenerationResult.class);
	}

	@AfterEach
	public void tearDown() {
		projectGenerationInvoker = null;
		request = null;
		initializrMetadataProvider = null;
		description = null;
		projectGenerator = null;
		projectGenerationResult = null;
	}

	@Test
	@Tag("valid")
	public void testSuccessfulProjectStructureGeneration() throws Exception {
		Mockito.when(parentApplicationContext.getBean(InitializrMetadataProvider.class))
			.thenReturn(initializrMetadataProvider);
		Mockito.when(requestConverter.convert(request, metadata)).thenReturn(description);
		Mockito.when(createProjectGenerator(metadata)).thenReturn(projectGenerator);
		Mockito.when(projectGenerator.generate(description, generateProject(description, request)))
			.thenReturn(projectGenerationResult);
		Mockito.doNothing().when(addTempFile(result.getRootDirectory(), result.getRootDirectory()));

		ProjectGenerationResult actualResult = projectGenerationInvoker.invokeProjectStructureGeneration(request);
		assertEquals(projectGenerationResult, actualResult);
	}

	@Test
	@Tag("invalid")
	public void testFailedProjectStructureGeneration() throws Exception {
		Mockito.when(requestConverter.convert(request, metadata)).thenThrow(new ProjectGenerationException());
		assertThrows(ProjectGenerationException.class,
				() -> projectGenerationInvoker.invokeProjectStructureGeneration(request));
	}

	@Test
	@Tag("valid")
	public void testProjectGenerationResultRootDirectory() throws Exception {
		Mockito.when(requestConverter.convert(request, metadata)).thenReturn(description);
		Mockito.when(createProjectGenerator(metadata)).thenReturn(projectGenerator);
		Mockito.when(projectGenerator.generate(description, generateProject(description, request)))
			.thenReturn(projectGenerationResult);
		Mockito.doNothing().when(addTempFile(result.getRootDirectory(), result.getRootDirectory()));

		projectGenerationInvoker.invokeProjectStructureGeneration(request);
		Map<Path, List<Path>> tempFiles = projectGenerationInvoker.getTemporaryFiles();

		assertTrue(tempFiles.containsKey(projectGenerationResult.getRootDirectory()));
	}

	@Test
	@Tag("invalid")
	public void testInvocationOfPublishProjectFailedEvent() throws Exception {
		Mockito.when(requestConverter.convert(request, metadata)).thenThrow(new ProjectGenerationException());
		Mockito.doThrow(new ProjectGenerationException()).when(publishProjectFailedEvent(request, metadata, ex));

		assertThrows(ProjectGenerationException.class,
				() -> projectGenerationInvoker.invokeProjectStructureGeneration(request));

		Mockito.verify(publishProjectFailedEvent)
			.publishProjectFailedEvent(Mockito.any(ProjectRequest.class),
					Mockito.any(ProjectGenerationException.class));
	}

}