/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=hashCode_ea94135fc7
ROOST_METHOD_SIG_HASH=hashCode_44411a81c8

"""
  Scenario 1: Validating HashCode of a version range with all properties having non-null values

  Details:
    TestName: verifyHashCodeWithNonNullValues.
    Description: To test the hashCode() method for a version range with all properties having non-null values. The calculated hashCode should match the expected result which calculates using the given formula involving prime.
  Execution:
    Arrange: Create Version objects for Lower Version and Higher Version. Set both lowerInclusive and higherInclusive boolean fields to be true (or false).
    Act: Invoke the hashCode() method on the VersionRange object.
    Assert: Assert that the returned hashCode is as expected, based on the calculation with the prime number.
  Validation:
    This tests the correct calculation of hashCode, when all properties are defined.
    This is important, as object's hashCode is used internally by Java collections like HashMap, HashSet.

  Scenario 2: Validate HashCode of a version range with higherVersion and lowerVersion being null

  Details:
    TestName: verifyHashCodeWithNullVersions.
    Description: To test the hashCode() method for a version range with both higherVersion and lowerVersion fields set as null.
  Execution:
    Arrange: Initialize the VersionRange object with null lowerVersion, null higherVersion. Set both lowerInclusive and higherInclusive boolean fields to be true (or false).
    Act: Invoke the hashCode() method on the VersionRange object.
    Assert: Assert that the returned hashCode contains the hardcoded results for null versions included in the calculation.
  Validation:
    This tests the correct calculation of hashCode, when the versions are null.
    It also verifies that NullPointerException is not thrown when versions are null.

  Scenario 3: Validate HashCode of a version range with both inclusive flags being false

  Details:
    TestName: verifyHashCodeWithExclusiveRange.
    Description: To test the hashCode() method for a version range with both lowerInclusive and higherInclusive flags set to false.
  Execution:
    Arrange: Create Version objects for lowerVersion and higherVersion. Set both lowerInclusive and higherInclusive boolean fields to be false.
    Act: Invoke the hashCode() method on the VersionRange object.
    Assert: Assert that the returned hashCode contains the hardcoded results for false inclusivity included in the calculation.
  Validation:
    This tests the correct calculation of hashCode, when the inclusivity flags are false.
    It verifies that the correct hardcoded result for false boolean value is being used in the calculation.

  Scenario 4: Validate HashCode for different version range objects with identical properties

  Details:
    TestName: verifyHashCodeForIdenticalVersionRanges.
    Description: To test the consistency of hashCode() method by confirming that two VersionRange objects with identical properties results in same hashCode.
  Execution:
    Arrange: Create two VersionRange objects with identical lowerVersion, higherVersion, lowerInclusive, higherInclusive values.
    Act: Invoke the hashCode() method on both VersionRange objects.
    Assert: Assert that the returned hashCodes for both objects are equal.
  Validation:
    This tests the consistency of the hashCode method, which should always return the same output for the same input.
    It also implicitly checks the equals method, as two objects with equal hashCodes should ideally be equal objects.
""",
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import io.spring.initializr.generator.version.Version;
import io.spring.initializr.generator.version.VersionRange;
import io.spring.initializr.generator.version.Version.Format;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;
import org.springframework.util.Assert;

public class VersionRangeHashCodeTest {

	@Test
	@Tag("valid")
	public void verifyHashCodeWithNonNullValues() {
		Version lowerVersion = new Version(1, 1, 1, null);
		Version higherVersion = new Version(2, 2, 2, null);
		VersionRange versionRange = new VersionRange(lowerVersion, true, higherVersion, true);
		int expected = 31 * 1 + 1231;
		expected = 31 * expected + higherVersion.hashCode();
		expected = 31 * expected + 1231;
		expected = 31 * expected + lowerVersion.hashCode();
		assertEquals(expected, versionRange.hashCode());
	}

	@Test
	@Tag("valid")
	public void verifyHashCodeWithNullVersions() {
		VersionRange versionRange = new VersionRange(null, true, null, true);
		int expected = 31 * 1 + 1231;
		expected = 31 * expected + 0;
		expected = 31 * expected + 1231;
		expected = 31 * expected + 0;
		assertEquals(expected, versionRange.hashCode());
	}

	@Test
	@Tag("valid")
	public void verifyHashCodeWithExclusiveRange() {
		Version lowerVersion = new Version(1, 1, 1, null);
		Version higherVersion = new Version(2, 2, 2, null);
		VersionRange versionRange = new VersionRange(lowerVersion, false, higherVersion, false);
		int expected = 31 * 1 + 1237;
		expected = 31 * expected + higherVersion.hashCode();
		expected = 31 * expected + 1237;
		expected = 31 * expected + lowerVersion.hashCode();
		assertEquals(expected, versionRange.hashCode());
	}

	@Test
	@Tag("valid")
	public void verifyHashCodeForIdenticalVersionRanges() {
		Version lowerVersion = new Version(1, 1, 1, null);
		Version higherVersion = new Version(2, 2, 2, null);

		VersionRange versionRange1 = new VersionRange(lowerVersion, true, higherVersion, true);
		VersionRange versionRange2 = new VersionRange(lowerVersion, true, higherVersion, true);

		assertEquals(versionRange1.hashCode(), versionRange2.hashCode());
	}

}