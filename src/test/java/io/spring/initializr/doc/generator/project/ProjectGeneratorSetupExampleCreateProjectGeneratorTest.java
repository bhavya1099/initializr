/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=createProjectGenerator_ede895daf0
ROOST_METHOD_SIG_HASH=createProjectGenerator_5191a2029f

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746432204/source/initializr/initializr-docs/src/test/java/io/spring/initializr/doc/generator/project/ProjectGeneratorSetupExampleTests.java
Tests:
    "@Test
@Test
void generateSimpleProjectStructure(@TempDir Path tempDir) {
    StaticApplicationContext context = new StaticApplicationContext();
    context.registerBean(InitializrMetadata.class, () -> InitializrMetadataTestBuilder.withDefaults().build());
    context.registerBean(IndentingWriterFactory.class, IndentingWriterFactory::withDefaultSettings);
    context.registerBean(MustacheTemplateRenderer.class, () -> new MustacheTemplateRenderer("classpath:/templates"));
    context.refresh();
    DefaultProjectAssetGenerator assetGenerator = new DefaultProjectAssetGenerator((description) -> tempDir);
    ProjectGenerator projectGenerator = new ProjectGeneratorSetupExample().createProjectGenerator(context);
    Path directory = projectGenerator.generate(createProjectDescription(), assetGenerator);
    assertThat(directory).isSameAs(tempDir);
    Path helloFile = directory.resolve("hello.txt");
    assertThat(helloFile).exists().isRegularFile().hasContent("Test");
}
""""
Scenario 1: Creating a Project Generator with Valid Application Context

Details:
  TestName: testCreateProjectGeneratorValidContext
  Description: This test is designed to check if the createProjectGenerator method successfully creates a ProjectGenerator object when passed a valid ApplicationContext.
Execution:
  Arrange: Set up a valid ApplicationContext.
  Act: Invoke the createProjectGenerator method with the prepared ApplicationContext as a parameter.
  Assert: Use assertEquals method to compare the type of the returned object with ProjectGenerator.
Validation:
  The assertion ensures that the method returns a ProjectGenerator object when it is invoked with a valid ApplicationContext. This tests the successful execution path and underlines the normal behavior of the method.

Scenario 2: Creating a Project Generator with Null Application Context

Details:
  TestName: testCreateProjectGeneratorNullContext
  Description: This test verifies the behavior of the createProjectGenerator method when passed a null ApplicationContext. We expect the method to throw a NullPointerException or handle the null value appropriately.
Execution:
  Arrange: No setup is needed as we are passing null as the parameter.
  Act: Invoke the createProjectGenerator method with 'null' as the argument.
  Assert: Expect the method to throw a NullPointerException.
Validation:
  This assertion aims to verify that the method is robust against null input and has proper error handling mechanisms.

Scenario 3: Register Bean on Created Project Generator

Details:
  TestName: testRegisterBeanOnCreatedProjectGenerator
  Description: This test verifies that the created ProjectGenerator can register a bean successfully.
Execution:
  Arrange: Create a new instance of ApplicationContext and pass it as a parameter to the createProjectGenerator method.
  Act: Register a bean in the returned ProjectGenerator instance.
  Assert: Assert that the bean register operation is successful.
Validation:
  This assertion will ensure the ProjectGenerator object returned from the createProjectGenerator method is functional and capable of registering beans.
"""



*/

// ********RoostGPT********

package io.spring.initializr.doc.generator.project;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.context.ApplicationContext;
import org.junit.jupiter.api.*;
import io.spring.initializr.generator.project.ProjectGenerator;

public class ProjectGeneratorSetupExampleCreateProjectGeneratorTest {

	@Test
	@Tag("valid")
	public void testCreateProjectGeneratorValidContext() {
		ApplicationContext appContext = Mockito.mock(ApplicationContext.class);
		ProjectGeneratorSetupExample example = new ProjectGeneratorSetupExample();
		ProjectGenerator result = example.createProjectGenerator(appContext);
		assertEquals(ProjectGenerator.class, result.getClass());
	}

	@Test
	@Tag("invalid")
	public void testCreateProjectGeneratorNullContext() {
		ProjectGeneratorSetupExample example = new ProjectGeneratorSetupExample();
		assertThrows(NullPointerException.class, () -> {
			example.createProjectGenerator(null);
		});
	}

	@Test
	@Tag("integration")
	public void testRegisterBeanOnCreatedProjectGenerator() {
		ApplicationContext appContext = Mockito.mock(ApplicationContext.class);
		ProjectGeneratorSetupExample example = new ProjectGeneratorSetupExample();
		ProjectGenerator result = example.createProjectGenerator(appContext);
		// make sure SampleContributor bean can be registered
		assertDoesNotThrow(() -> result.configureContext(context -> context.registerBean(SampleContributor.class)));
	}

}