/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=isLowerInclusive_ed41041637
ROOST_METHOD_SIG_HASH=isLowerInclusive_b83ffb8f2d

"""
Scenario 1: Test when lowerInclusive is true
Detail:
  TestName: whenLowerInclusiveIsTrue
  Description: This test checks that the method isLowerInculsive() returns true when lowerInclusive field is true.
Execution:
  Arrange: Create a VersionRange object with lowerInclusive set to true.
  Act: Call the method isLowerInclusive() of the object.
  Assert: Verify that the method returns true.
Validation:
  The assertion validates that the method isLowerInclusive() correctly returns the value of the lowerInclusive field. This test is significant because, in the context of a version range, the lowerInclusive field defines whether it includes the lower version or not.

Scenario 2: Test when lowerInclusive is false
Detail:
  TestName: whenLowerInclusiveIsFalse
  Description: This test checks that the method isLowerInculsive() returns false when lowerInclusive field is false.
Execution:
  Arrange: Create a VersionRange object with lowerInclusive set to false.
  Act: Call the method isLowerInclusive() of the object.
  Assert: Verify that the method returns false.
Validation:
  The assertion validates that the method isLowerInclusive() correctly returns the value of the lowerInclusive field. This test is significant because, in the context of a version range, the lowerInclusive field defines whether it excludes the lower version or not.

Scenario 3: Test on a newly created VersionRange object
Detail:
  TestName: isLowerInclusiveOnNewVersionRange
  Description: This test checks the default value of isLowerInclusive() on a newly created VersionRange object.
Execution:
  Arrange: Create a new VersionRange object without modifying any field.
  Act: Call the method isLowerInclusive() of the object.
  Assert: Since the default value of a boolean field in Java is false, Verify that the method returns false.
Validation:
  This test verifies the default value of lowerInclusive in a newly created VersionRange object. It helps ensure that the default settings of the VersionRange object do not include the lower version.

""",
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.springframework.util.Assert;
import org.junit.jupiter.api.*;
import io.spring.initializr.generator.version.Version.Format;

public class VersionRangeIsLowerInclusiveTest {

	@Test
	@Tag("valid")
	public void whenLowerInclusiveIsTrue() {
		Version version = new Version(1, 0, 0, null);
		VersionRange versionRange = new VersionRange(version, true, null, false);
		boolean result = versionRange.isLowerInclusive();
		Assertions.assertTrue(result, "LowerInclusive should be true, but it's not.");
	}

	@Test
	@Tag("valid")
	public void whenLowerInclusiveIsFalse() {
		Version version = new Version(1, 0, 0, null);
		VersionRange versionRange = new VersionRange(version, false, null, false);
		boolean result = versionRange.isLowerInclusive();
		Assertions.assertFalse(result, "LowerInclusive should be false, but it's not.");
	}

	@Test
	@Tag("boundary")
	public void isLowerInclusiveOnNewVersionRange() {
		Version version = new Version(1, 0, 0, null);
		VersionRange versionRange = new VersionRange(version);
		boolean result = versionRange.isLowerInclusive();
		Assertions.assertFalse(result, "LowerInclusive should be false for a new VersionRange object, but it's not.");
	}

}