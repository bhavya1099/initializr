/*
 * Copyright 2012-2022 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=cleanInputValue_efd1bb8911
ROOST_METHOD_SIG_HASH=cleanInputValue_fb87ee802c

"""
Scenario 1: String With Spaces Only
Details:
  Test Name: testCleanInputValueWithSpacesOnly
  Description: Testing the cleanInputValue method when the input value consists of only spaces.
Execution:
  Arrange: Provide a string that contains only spaces.
  Act: Call cleanInputValue with the spaced string.
  Assert: Verify that the returned result is a string of spaces (because StringUtils.hasText() will return false for a string with spaces only).
Validation:
  The method is expected to return the input string as it is if it contains only spaces because spaces are not 'text' per definition in StringUtils.hasText() method. This test case confirms that behavior.

Scenario 2: String With Normal Text
Details:
  Test Name: testCleanInputValueWithNormalText
  Description: Testing the cleanInputValue method when the input value contains normal text (alphabets and spaces).
Execution:
  Arrange: Provide a string with normal text like "Java Project".
  Act: Call cleanInputValue with the normal text string.
  Assert: Verify that the returned result is the same as input because normal text and spaces don't need normalization and there are no non-spacing marks to be removed.
Validation:
  The method should return the same string for normal text with spaces as there are no abnormal characters included in the text. This test confirms that behavior.

Scenario 3: String With Accented Characters
Details:
  Test Name: testCleanInputValueWithAccentedCharacters
  Description: To test the cleanInputValue method when the supplied input value has accented characters.
Execution:
  Arrange: Provide a string with accented characters like "Jav치 Pr칩ject".
  Act: Call cleanInputValue with the accented characters string.
  Assert: Verify that the returned result is normalized string without non-spacing marks i.e., "Java Project".
Validation:
  The method is supposed to normalize accented characters to their basic form, verify if the method achieves this clean up properly in this test scenario.

Scenario 4: Null or Empty String
Details:
  TestName: testCleanInputValueWithNullOrEmpty
  Description: Testing the cleanInputValue method while the given input value is null or empty.
Execution:
  Arrange: Provide a null string or an empty string.
  Act: Invoke cleanInputValue with a null string or an empty string.
  Assert: Check that the returned result is null or empty based on the input as StringUtils.hasText() will return false for a null or empty string.
Validation:
  In case of a null or empty string as input, the output should be the same as input as per the StringUtils.hasText() definition. This scenario validates that behavior.
"""
*/

// ********RoostGPT********

package io.spring.initializr.web.project;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.*;
import java.text.Normalizer;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import io.spring.initializr.generator.buildsystem.BuildSystem;
import io.spring.initializr.generator.language.Language;
import io.spring.initializr.generator.packaging.Packaging;
import io.spring.initializr.generator.project.MutableProjectDescription;
import io.spring.initializr.generator.project.ProjectDescription;
import io.spring.initializr.generator.version.Version;
import io.spring.initializr.metadata.DefaultMetadataElement;
import io.spring.initializr.metadata.Dependency;
import io.spring.initializr.metadata.InitializrConfiguration.Platform;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.Type;
import io.spring.initializr.metadata.support.MetadataBuildItemMapper;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;

public class DefaultProjectRequestToDescriptionConverterCleanInputValueTest {

	DefaultProjectRequestToDescriptionConverter converter = new DefaultProjectRequestToDescriptionConverter();

	@Test
	@Tag("valid")
	public void testCleanInputValueWithSpacesOnly() {
		String input = "     ";
		String output = converter.cleanInputValue(input);
		Assertions.assertEquals(input, output);
	}

	@Test
	@Tag("valid")
	public void testCleanInputValueWithNormalText() {
		String input = "Java Project";
		String output = converter.cleanInputValue(input);
		Assertions.assertEquals(input, output);
	}

	@Test
	@Tag("valid")
	public void testCleanInputValueWithAccentedCharacters() {
		String input = "Jav치 Pr칩ject";
		String expectedOutput = "Java Project";
		String output = converter.cleanInputValue(input);
		Assertions.assertEquals(expectedOutput, output);
	}

	@Test
	@Tag("valid")
	public void testCleanInputValueWithNullOrEmpty() {
		String input = "";
		String output = converter.cleanInputValue(input);
		Assertions.assertEquals(input, output);
		input = null;
		output = converter.cleanInputValue(input);
		Assertions.assertNull(output);
	}

}