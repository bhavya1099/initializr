/*
 * Copyright 2012-2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=format_5c7a8fc20d
ROOST_METHOD_SIG_HASH=format_db59bb27d2

"""
Scenario 1: format returns a version with Format.V1
Details:
  TestName: formatReturnsVersionWithFormatV1
  Description: One of the essential features of the `Version` class is the ability to switch its format. This test aims to verify if the `format` method is correctly handling a switch to `Format.V1`.
Execution:
  Arrange: Create a new Version object with a `Format.V2` format.
  Act: Call the `format` method on the created Version and pass `Format.V1` as the parameter.
  Assert: Use `assertEquals` to make sure the returned version has `Format.V1` format.
Validation:
  The assertion verifies that the `format` function is able to correctly switch the format of the `Version` object to `Format.V1`. It is important to validate the switching functionality to ensure consistency in version formatting.

Scenario 2: format returns a version with Format.V2
Details:
  TestName: formatReturnsVersionWithFormatV2
  Description: This test case aims to validate whether the `format` method is capable of handling a switch to `Format.V2` correctly.
Execution:
  Arrange: Instantiate a new Version object with `Format.V1` format.
  Act: Invoke the `format` method on the created Version and pass `Format.V2` as the parameter.
  Assert: Apply `assertEquals` to ensure that the returned version has `Format.V2`.
Validation:
  The assertion verifies the ability of the `format` function to switch the format of the `Version` object to `Format.V2` correctly. Checking this functionality is important in order to maintain version formatting consistency.

Scenario 3: format receives null as parameter
Details:
  TestName: formatThrowsExceptionOnNull
  Description: This test assesses whether the `format` method correctly handles null input by throwing an IllegalArgumentException.
Execution:
  Arrange: Create any valid Version object.
  Act: Call the `format` method on the created Version and pass null as the parameter.
  Assert: Use `assertThrows` to make sure the method throws `IllegalArgumentException`.
Validation:
  The assertion is designed to ensure that null input results in the appropriate exception being thrown. This is crucial for maintaining security and data integrity.

Scenario 4: format receives the same Format as an argument
Details:
  TestName: formatReceivesSameFormat
  Description: This test verifies if the `format` method returns the original object when the same format is passed as argument.
Execution:
  Arrange: Instantiate a `Version` object with any format (Format.V1, for instance).
  Act: Invoke the `format` method on the `Version` object and pass the same format (Format.V1) as parameter.
  Assert: Utilize `assertSame` to confirm that the method returned the original object.
Validation:
  The assertion aims to ensure that when the supplied format matches the current format of the `Version`, the original object is returned. This functionality is important to avert unnecessary object creation.

Scenario 5: format returns a different version when a different Format is passed
Details:
  TestName: formatReturnsDifferentVersionOnDifferentFormat
  Description: This test checks if the `format` method returns a new `Version` object when a different `Format` is passed to it.
Execution:
  Arrange: Create a `Version` instance with any given `Format` (like `Format.V1`).
  Act: Invoke the `format` method on the `Version` instance and pass a different `Format` (like `Format.V2`) as parameter.
  Assert: Check using `assertNotSame` that the returned `Version` is not the same as the original.
Validation:
  The assertion aims to confirm that the `format` function, when passed a different `Format`, generates a new `Version` instance with the corresponding format. This is critical for ensuring that version formatting can be switched accurately.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertNotSame;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.function.Function;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;

public class VersionFormatTest {

	@Test
	@Tag("valid")
	public void formatReturnsVersionWithFormatV1() {
		// Arrange
		Version versionV2 = new Version(1, 1, 1, new Qualifier("SNAPSHOT", null, "-"));
		// Act
		Version formattedVersion = versionV2.format(Version.Format.V1);
		// Assert
		assertEquals(Version.Format.V1, formattedVersion.getFormat());
	}

	@Test
	@Tag("valid")
	public void formatReturnsVersionWithFormatV2() {
		// Arrange
		Version versionV1 = new Version(1, 1, 1, new Qualifier("SNAPSHOT", null, "."));
		// Act
		Version formattedVersion = versionV1.format(Version.Format.V2);
		// Assert
		assertEquals(Version.Format.V2, formattedVersion.getFormat());
	}

	@Test
	@Tag("invalid")
	public void formatThrowsExceptionOnNull() {
		// Arrange
		Version version = new Version(1, 1, 1, new Qualifier("SNAPSHOT", null, "-"));
		// Act & Assert
		assertThrows(IllegalArgumentException.class, () -> version.format(null));
	}

	@Test
	@Tag("valid")
	public void formatReceivesSameFormat() {
		// Arrange
		Version versionV1 = new Version(1, 1, 1, new Qualifier("SNAPSHOT", null, "."));
		// Act
		Version formattedVersion = versionV1.format(Version.Format.V1);
		// Assert
		assertSame(versionV1, formattedVersion);
	}

	@Test
	@Tag("valid")
	public void formatReturnsDifferentVersionOnDifferentFormat() {
		// Arrange
		Version versionV1 = new Version(1, 1, 1, new Qualifier("SNAPSHOT", null, "."));
		// Act
		Version formattedVersion = versionV1.format(Version.Format.V2);
		// Assert
		assertNotSame(versionV1, formattedVersion);
	}

}