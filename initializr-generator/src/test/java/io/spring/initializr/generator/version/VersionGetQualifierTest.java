/*
 * Copyright 2012-2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getQualifier_b178620eb5
ROOST_METHOD_SIG_HASH=getQualifier_a71d122af3

"""
Scenario 1: Test to verify getQualifier when qualifier is not set.

Details:
  TestName: testGetQualifierWhenQualifierIsNotSet
  Description: This test verifies the functionality of getQualifier method when the qualifier has not been set.
Execution:
  Arrange: Instantiate the Version class without setting any qualifier.
  Act: Invoke the getQualifier method.
  Assert: Verify the response of the method is null, as the qualifier has not been set.
Validation:
  The getQualifier method should return null when the qualifier has not been set. This is because, the initial value assigned to the qualifier attribute of the Version object is null. The test validates that the method is performing correctly in this edge-case scenario.

Scenario 2: Test to verify getQualifier when qualifier is set.

Details:
  TestName: testGetQualifierWhenQualifierIsSet
  Description: This test is designed to examine the correct functionality of getQualifier method when the qualifier is set.
Execution:
  Arrange: Instantiate the Version class with a qualifier.
  Act: Invoke the getQualifier method.
  Assert: Assert that the response of the method matches the expected Qualifier.
Validation:
  This test ensures that the getQualifier method is working as expected by returning the expected Qualifier object when a valid qualifier is set. The assertion checks to verify the correctness of the getter method's implementation.

Scenario 3: Test getQualifier for different formats

Details:
  TestName: testGetQualifierForDifferentFormats
  Description: This test checks the functionality of getQualifier method by two different formats (v1 and v2).
Execution:
  Arrange: Instantiate the Version class twice with different formats.
  Act: Invoke the getQualifier method for each instance.
  Assert: The return value of getQualifier method should match with the expected Qualifier assigned for each format.
Validation:
  The assertion verifies that when different formats are provided, the correct Qualifier object is returned. It validates that the getQualifier method is correctly handling and responding based on the format assigned while instantiating the Version object.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import io.spring.initializr.generator.version.Version.Qualifier;
import io.spring.initializr.generator.version.Version.Format;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.*;
import java.io.Serializable;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.StringJoiner;
import java.util.function.Function;
import org.springframework.util.Assert;
import org.springframework.util.StringUtils;

public class VersionGetQualifierTest {

	@Test
	@Tag("boundary")
	public void testGetQualifierWhenQualifierIsNotSet() {
		Version version = new Version(1, 0, 0, null);
		Qualifier qualifier = version.getQualifier();
		assertNull(qualifier, "Qualifier should be null as it's not set");
	}

	@Test
	@Tag("valid")
	public void testGetQualifierWhenQualifierIsSet() {
		Qualifier expectedQualifier = new Qualifier("SNAPSHOT", 2, ".");
		Version version = new Version(1, 0, 0, expectedQualifier);
		Qualifier actualQualifier = version.getQualifier();
		assertEquals(expectedQualifier, actualQualifier, "Incorrect Qualifier");
	}

	@Test
	@Tag("integration")
	public void testGetQualifierForDifferentFormats() {
		Qualifier expectedQualifierV1 = new Qualifier("SNAPSHOT", 2, ".");
		Qualifier expectedQualifierV2 = new Qualifier("RELEASE", 2, "-");
		Version versionV1 = new Version(1, 0, 0, expectedQualifierV1).format(Format.V1);
		Version versionV2 = new Version(1, 0, 0, expectedQualifierV2).format(Format.V2);
		Qualifier actualQualifierV1 = versionV1.getQualifier();
		Qualifier actualQualifierV2 = versionV2.getQualifier();
		assertEquals(expectedQualifierV1, actualQualifierV1, "Incorrect qualifier for Format V1");
		assertEquals(expectedQualifierV2, actualQualifierV2, "Incorrect qualifier for Format V2");
	}

}