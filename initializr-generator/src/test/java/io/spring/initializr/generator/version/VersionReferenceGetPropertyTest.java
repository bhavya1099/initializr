/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=getProperty_41b2f38cdd
ROOST_METHOD_SIG_HASH=getProperty_bb77fd629a

"""
Scenario 1: Test to check if getProperty() is returning a non-null value

Details:
  TestName: testPropertyIsNotNull
  Description: This test is intended to evaluate the getProperty() method when a VersionReference object was initialized with a VersionProperty object. It should not return null in this case.
Execution:
  Arrange: Initialize a new VersionReference object with a VersionProperty object input.
  Act: Invoke the getProperty() method with this test object.
  Assert: Use JUnit assertions to check that the returned value is not null.
Validation:
  Validate that the getProperty() method correctly retrieves the property when a VersionProperty object is used to initialize the VersionReference object. It is critical that this method behaves as expected, as it impacts how property values are referenced throughout the application.

Scenario 2: Test to check if getProperty() is returning null

Details:
  TestName: testPropertyIsNull
  Description: This test is meant to check the getProperty() method in the scenario where a VersionReference object was initialized with a string value. The method should return null as the object does not have a VersionProperty.
Execution:
  Arrange: Initialize a new VersionReference object with a String value.
  Act: Invoke the getProperty() method with this test object.
  Assert: Use JUnit assertions to check that the returned value of the getProperty method is null.
Validation:
  Validate that the getProperty() returns null when a VersionReference object is initialized using a String value (it does not have a VersionProperty). It's important to ensure that this method behaves as expected to prevent invalid references to property values.

Scenario 3: Test to check if getProperty() is returning the correct VersionProperty when a VersionReference object was created with a String representing a property.

Details:
  TestName: testPropertyIsCorrectWhenCreatedWithString
  Description: This test is intended to validate the getProperty() method when a VersionReference object was created with a string representing a property. It should return the correct VersionProperty associated with the string.
Execution:
  Arrange: Initialize a VersionReference object with a String representing a property.
  Act: Invoke the getProperty() method on this test object.
  Assert: Use JUnit assertions to check that the returned value matches the expected VersionProperty.
Validation:
  Validate that the getProperty() method correctly retrieves the property associated with a string representing a property when a VersionReference object was assigned with the string. Ensuring this functionality is critical because it affects the way property values are referenced.

"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.*;
import java.util.Objects;

public class VersionReferenceGetPropertyTest {

	@Test
	@Tag("valid")
	void testPropertyIsNotNull() {
		VersionProperty versionProperty = VersionProperty.of("bootstrap");
		VersionReference versionReference = VersionReference.ofProperty(versionProperty);
		VersionProperty result = versionReference.getProperty();
		Assertions.assertNotNull(result, "Property should not be null");
		Assertions.assertEquals(versionProperty, result, "Property returned should match the initial property");
	}

	@Test
	@Tag("invalid")
	void testPropertyIsNull() {
		VersionReference versionReference = VersionReference.ofValue("1.0.0");
		VersionProperty result = versionReference.getProperty();
		Assertions.assertNull(result, "Property should be null");
	}

	@Test
	@Tag("boundary")
	void testPropertyIsCorrectWhenCreatedWithString() {
		String propertyName = "bootstrap";
		VersionReference versionReference = VersionReference.ofProperty(propertyName);
		VersionProperty result = versionReference.getProperty();
		Assertions.assertNotNull(result, "Property should not be null");
		Assert.assertEquals(propertyName, result.toString(), "The returned property should match the provided string");
	}

}