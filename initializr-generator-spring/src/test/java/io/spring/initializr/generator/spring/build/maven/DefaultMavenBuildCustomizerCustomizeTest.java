/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=customize_ae525242c8
ROOST_METHOD_SIG_HASH=customize_f56fdf334d

"""
Scenario 1: Test customize method with spring boot bom included in the parent pom

Details:
  TestName: testCustomizeWithSpringBootBomIncluded.
  Description: This scenario is designated to validate the customize method to ensure it correctly handles instances where the parent pom includes spring boot Bom.
Execution:
  Arrange: Set up a MavenBuild object and supply all the necessary details. Set up both ProjectDescription and InitializrMetadata with valid configuration.
  Act: Invoke the customize method with created MavenBuild object.
  Assert: Assert that a spring boot bom has been added to the build.boms().
Validation:
  The assertion confirms that the customize method correctly handles the addition of a spring boot bom when the parentPom contains an includeSpringBootBom. This test is significant in ensuring the correct configuration is added to the MavenBuild when the parentPom includes SpringBootBom.

Scenario 2: Test customize method with spring boot bom not included in the parent pom

Details:
  TestName: testCustomizeWithSpringBootBomNotIncluded.
  Description: It checks the application of the customize method when parentPom does not include spring boot bom, and ensures the method does not add a spring boot bom to the build.
Execution:
  Arrange: Set up a MavenBuild object with relevant details, along with both ProjectDescription and InitializrMetadata that have a suitable configuration that does not include spring boot bom in the parentPom.
  Act: Invoke the customize method with the MavenBuild object provided.
  Assert: Assert that a spring boot bom has not been added to the build.boms().
Validation:
  The assertion is proof that the customize method does not add a spring boot bom when it is not included in the parentPom. This test is significant for confirming that the method handles such scenarios correctly.

Scenario 3: Test customize method when parent pom is not Spring Boot Starter Parent

Details:
  TestName: testCustomizeWhenParentPomIsNotSpringBootStarterParent.
  Description: This test ensures the customize method correctly adds the source and output encoding to MavenBuild properties when the parentPom is not SpringBootStarterParent.
Execution:
  Arrange: Set up a MavenBuild object with appropriate details, along with both ProjectDescription and InitializrMetadata having valid configuration where parentPom is not a SpringBootStarterParent.
  Act: Apply the customize method to the MavenBuild object subjects.
  Assert: Assert that "UTF-8" has been set as the value of both "project.build.sourceEncoding" and "project.reporting.outputEncoding" in the build properties.
Validation:
  The assertion validates that the customize method correctly applies the encoding when the parentPom is not SpringBootStarterParent. This test is important to ensure the proper settings are applied based on the parentPom configuration.

Scenario 4: Test customize method when parent pom is Spring Boot Starter Parent

Details:
  TestName: testCustomizeWhenParentPomIsSpringBootStarterParent.
  Description: Test the customize method's response when the parentPom is a SpringBootStarterParent to help ensure the method does not set source and output encoding in such cases.
Execution:
  Arrange: Set up a MavenBuild object with necessary information and also known instances of ProjectDescription and InitializrMetadata with valid configuration that includes parentPom as a SpringBootStarterParent.
  Act: Implement the customize method with provided MavenBuild object.
  Assert: Assert that neither "project.build.sourceEncoding" nor "project.reporting.outputEncoding" have been set in the build properties.
Validation:
  The assertion confirms the method does not adjust the encoding when the parentPom is SpringBootStarterParent. This test is crucial for verifying that the method handles this configuration accurately.
*/

// ********RoostGPT********

package io.spring.initializr.generator.spring.build.maven;

import io.spring.initializr.generator.buildsystem.BillOfMaterials;
import io.spring.initializr.generator.buildsystem.maven.MavenBuild;
import io.spring.initializr.generator.project.ProjectDescription;
import io.spring.initializr.generator.spring.build.BuildCustomizer;
import io.spring.initializr.generator.version.VersionProperty;
import io.spring.initializr.metadata.InitializrConfiguration.Env.Maven;
import io.spring.initializr.metadata.InitializrConfiguration.Env.Maven.ParentPom;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.support.MetadataBuildItemMapper;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.*;

public class DefaultMavenBuildCustomizerCustomizeTest {

	@Test
	@Tag("valid")
	public void testCustomizeWithSpringBootBomIncluded() {
		MavenBuild build = new MavenBuild();
		ProjectDescription description = Mockito.mock(ProjectDescription.class);
		InitializrMetadata metadata = Mockito.mock(InitializrMetadata.class);
		DefaultMavenBuildCustomizer customizer = new DefaultMavenBuildCustomizer(description, metadata);
		Maven maven = Mockito.mock(Maven.class);
		ParentPom parentPom = Mockito.mock(ParentPom.class);

		when(metadata.getConfiguration().getEnv().getMaven()).thenReturn(maven);
		when(maven.resolveParentPom(description.getPlatformVersion().toString())).thenReturn(parentPom);
		when(parentPom.isIncludeSpringBootBom()).thenReturn(true);

		customizer.customize(build);

		assertTrue(build.boms()
			.items()
			.anyMatch((candidate) -> candidate.getGroupId().equals("org.springframework.boot")
					&& candidate.getArtifactId().equals("spring-boot")));
	}

	@Test
	@Tag("valid")
	public void testCustomizeWithSpringBootBomNotIncluded() {
		MavenBuild build = new MavenBuild();
		ProjectDescription description = Mockito.mock(ProjectDescription.class);
		InitializrMetadata metadata = Mockito.mock(InitializrMetadata.class);
		DefaultMavenBuildCustomizer customizer = new DefaultMavenBuildCustomizer(description, metadata);
		Maven maven = Mockito.mock(Maven.class);
		ParentPom parentPom = Mockito.mock(ParentPom.class);

		when(metadata.getConfiguration().getEnv().getMaven()).thenReturn(maven);
		when(maven.resolveParentPom(description.getPlatformVersion().toString())).thenReturn(parentPom);
		when(parentPom.isIncludeSpringBootBom()).thenReturn(false);

		customizer.customize(build);

		assertFalse(build.boms()
			.items()
			.anyMatch((candidate) -> candidate.getGroupId().equals("org.springframework.boot")
					&& candidate.getArtifactId().equals("spring-boot")));
	}

	@Test
	@Tag("valid")
	public void testCustomizeWhenParentPomIsNotSpringBootStarterParent() {
		MavenBuild build = new MavenBuild();
		ProjectDescription description = Mockito.mock(ProjectDescription.class);
		InitializrMetadata metadata = Mockito.mock(InitializrMetadata.class);
		DefaultMavenBuildCustomizer customizer = new DefaultMavenBuildCustomizer(description, metadata);
		Maven maven = Mockito.mock(Maven.class);
		ParentPom parentPom = Mockito.mock(ParentPom.class);

		when(metadata.getConfiguration().getEnv().getMaven()).thenReturn(maven);
		when(maven.resolveParentPom(description.getPlatformVersion().toString())).thenReturn(parentPom);
		when(maven.isSpringBootStarterParent(parentPom)).thenReturn(false);

		customizer.customize(build);

		assertEquals("UTF-8", build.properties().get("project.build.sourceEncoding"));
		assertEquals("UTF-8", build.properties().get("project.reporting.outputEncoding"));
	}

	@Test
	@Tag("valid")
	public void testCustomizeWhenParentPomIsSpringBootStarterParent() {
		MavenBuild build = new MavenBuild();
		ProjectDescription description = Mockito.mock(ProjectDescription.class);
		InitializrMetadata metadata = Mockito.mock(InitializrMetadata.class);
		DefaultMavenBuildCustomizer customizer = new DefaultMavenBuildCustomizer(description, metadata);
		Maven maven = Mockito.mock(Maven.class);
		ParentPom parentPom = Mockito.mock(ParentPom.class);

		when(metadata.getConfiguration().getEnv().getMaven()).thenReturn(maven);
		when(maven.resolveParentPom(description.getPlatformVersion().toString())).thenReturn(parentPom);
		when(maven.isSpringBootStarterParent(parentPom)).thenReturn(true);

		customizer.customize(build);

		assertNull(build.properties().get("project.build.sourceEncoding"));
		assertNull(build.properties().get("project.reporting.outputEncoding"));
	}

}