/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=customize_3526be61c7
ROOST_METHOD_SIG_HASH=customize_deb7e13fa6

Here are your existing test cases which we found out and are not considered for test generation:

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746075742/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/GradleConfigurationBuildCustomizerTests.java
Tests:
    "@Test
private void customize(GradleBuild build) {
    new GradleConfigurationBuildCustomizer().customize(build);
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746075742/source/initializr/initializr-generator-spring/src/test/java/io/spring/initializr/generator/spring/build/gradle/GradleAnnotationProcessorScopeBuildCustomizerTests.java
Tests:
    "@Test
private void customize(GradleBuild build) {
    new GradleAnnotationProcessorScopeBuildCustomizer().customize(build);
}
"

File Path: /var/tmp/Roost/RoostGPT/java-report-test/1746075742/source/initializr/initializr-web/src/test/java/io/spring/initializr/web/project/MetadataProjectDescriptionCustomizerTests.java
Tests:
    "@Test
MutableProjectDescription customize(MutableProjectDescription description) {
    new MetadataProjectDescriptionCustomizer(this.metadata).customize(description);
    return description;
}
""""
Scenario 1: Test to check if the plugin versions are set correctly

Details:
  TestName: testShouldSetPluginVersionsCorrectly.
  Description: This test is designed to check whether the method `customize` correctly sets the plugin versions of 'org.springframework.boot and 'io.spring.dependency-management using the ProjectDescription and DependencyManagementPluginVersionResolver fields.
Execution:
  Arrange: Mock GradleBuild and Plugin objects, set up the ProjectDescription with a mock platformVersion, and the DependencyManagementPluginVersionResolver with a mock version.
  Act: Invoke the customize method on the mocked GradleBuild object.
  Assert: Use JUnit assertions to verify that the version of plugins in the GradleBuild object has been set correctly by comparing the actual set versions with the mock versions.
Validation:
  Checking the correct setting of plugin versions is important to ensure the correct execution and compatibility of the project with the spring boot and spring dependency management tools. If these versions are not set up correctly, then the project might face compatibility issues.

Scenario 2: Test the behavior when null build object is passed to customize.

Details:
  TestName: testCustomizeOnNullBuild.
  Description: This test checks the behavior when a null build object is passed to the customize method.
Execution:
  Arrange: Initialize the build object as null.
  Act: Invoke the customize method using the null build object.
  Assert: Use JUnit assertions to verify if a NullPointerException is thrown.
Validation:
  The test aims to validate the method's robustness in handling null inputs and the adherence towards null-safe coding practices. It ensures that the application behaves correctly in potential edge cases when null objects might be accidentally passed.

Scenario 3: Test the behavior when description.getPlatformVersion() returns null

Details:
  TestName: testCustomizeWhenPlatformVersionReturnsNull.
  Description: This test is designed to cover the scenario when the platformVersion retrieved from description is null.
Execution:
  Arrange: Mock GradleBuild and Plugin objects, set up the ProjectDescription with a null platformVersion, and the DependencyManagementPluginVersionResolver with a mock version.
  Act: Invoke the customize method on the mocked GradleBuild object.
  Assert: Use JUnit assertions to verify that a NullPointerException is thrown.
Validation:
  The test intends to ensure the correct handling of potential null values returned by the ProjectDescription's getPlatformVersion method during the set up of spring boot plugin version.

Scenario 4: Test the behavior when versionResolver returns null

Details:
  TestName: testCustomizeWhenVersionResolverReturnsNull.
  Description: This test is designed to confirm the handling of situations where versionResolver.resolveDependencyManagementPluginVersion(description) returns null.
Execution:
  Arrange: Mock GradleBuild and Plugin objects, set up the ProjectDescription with a mock platformVersion, and set up the DependencyManagementPluginVersionResolver to return null on resolveDependencyManagementPluginVersion.
  Act: Invoke the customize method on the mocked GradleBuild object.
  Assert: Use JUnit assertions to check if a NullPointerException is thrown.
Validation:
  The test verifies the correct handling of potential null values returned by the resolveDependencyManagementPluginVersion method during the set up of the 'io.spring.dependency-management' plugin version.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.spring.build.gradle;

import io.spring.initializr.generator.buildsystem.gradle.GradleBuild;
import io.spring.initializr.generator.buildsystem.gradle.GradlePlugin;
import io.spring.initializr.generator.buildsystem.gradle.GradlePlugin.Builder;
import io.spring.initializr.generator.project.ProjectDescription;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.function.Executable;
import org.mockito.Mock;
import org.mockito.Mockito;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.*;
import io.spring.initializr.generator.spring.build.BuildCustomizer;

class SpringBootPluginBuildCustomizerCustomizeTest {

	private final ProjectDescription description = Mockito.mock(ProjectDescription.class);

	private final DependencyManagementPluginVersionResolver versionResolver = Mockito
		.mock(DependencyManagementPluginVersionResolver.class);

	private final GradleBuild build = Mockito.mock(GradleBuild.class);

	private final GradlePlugin.Builder pluginBuilder = Mockito.mock(Builder.class);

	@Test
	@Tag("valid")
	void testShouldSetPluginVersionsCorrectly() {
		String mockPlatformVersion = "2.4.6";
		String mockVersion = "1.0.11.RELEASE";
		Mockito.when(description.getPlatformVersion()).thenReturn(mockPlatformVersion);
		Mockito.when(versionResolver.resolveDependencyManagementPluginVersion(description)).thenReturn(mockVersion);

		SpringBootPluginBuildCustomizer underTest = new SpringBootPluginBuildCustomizer(description, versionResolver);
		underTest.customize(build);

		Mockito.verify(pluginBuilder).setVersion(mockPlatformVersion);
		Mockito.verify(pluginBuilder).setVersion(mockVersion);
	}

	@Test
	@Tag("invalid")
	void testCustomizeOnNullBuild() {
		String mockPlatformVersion = "2.4.6";
		String mockVersion = "1.0.11.RELEASE";
		Mockito.when(description.getPlatformVersion()).thenReturn(mockPlatformVersion);
		Mockito.when(versionResolver.resolveDependencyManagementPluginVersion(description)).thenReturn(mockVersion);

		SpringBootPluginBuildCustomizer underTest = new SpringBootPluginBuildCustomizer(description, versionResolver);
		Executable executable = () -> underTest.customize(null);

		assertThrows(NullPointerException.class, executable);
	}

	@Test
	@Tag("boundary")
	void testCustomizeWhenPlatformVersionReturnsNull() {
		String mockVersion = "1.0.11.RELEASE";
		Mockito.when(description.getPlatformVersion()).thenReturn(null);
		Mockito.when(versionResolver.resolveDependencyManagementPluginVersion(description)).thenReturn(mockVersion);

		SpringBootPluginBuildCustomizer underTest = new SpringBootPluginBuildCustomizer(description, versionResolver);
		Executable executable = () -> underTest.customize(build);

		assertThrows(NullPointerException.class, executable);
	}

	@Test
	@Tag("boundary")
	void testCustomizeWhenVersionResolverReturnsNull() {
		String mockPlatformVersion = "2.4.6";
		Mockito.when(description.getPlatformVersion()).thenReturn(mockPlatformVersion);
		Mockito.when(versionResolver.resolveDependencyManagementPluginVersion(description)).thenReturn(null);

		SpringBootPluginBuildCustomizer underTest = new SpringBootPluginBuildCustomizer(description, versionResolver);
		Executable executable = () -> underTest.customize(build);

		assertThrows(NullPointerException.class, executable);
	}

}