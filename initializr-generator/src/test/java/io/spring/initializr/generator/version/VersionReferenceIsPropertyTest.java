/*
 * Copyright 2012-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=isProperty_e59c4f9154
ROOST_METHOD_SIG_HASH=isProperty_ab8bc6fad4

"""
  Scenario 1: Validate the isProperty method when property is not null

  Details:
    TestName: testIsPropertyWhenPropertyNotNull.
    Description: This test is meant to check the functionality of the isProperty() method when the property is not null.
  Execution:
    Arrange: The VersionReference object is set up with a non-null property using the ofProperty() method.
    Act: Invoke the isProperty method.
    Assert: Use JUnit assertion to compare the actual result (should be true) with the expected result (true).
  Validation:
    The assertion aims to verify that the isProperty() method correctly recognizes the non-null property. This test is significant in validating that the method is functioning properly when property is not null.

  Scenario 2: Validate the isProperty method when property is null

  Details:
    TestName: testIsPropertyWhenPropertyNull.
    Description: This test is meant to check the functionality of the isProperty() method when the property is null.
  Execution:
    Arrange: The VersionReference object is set up with a null property using the ofValue() method.
    Act: Invoke the isProperty method.
    Assert: Use JUnit assertion to compare the actual result (should be false) with the expected result (false).
  Validation:
    The assertion aims to verify that the isProperty() method correctly recognizes the null property. The expected result is based on the methodâ€™s logic; it should return false when the property is null. This test will help in confident that the method is working as expected in dealing with null property values.

  Scenario 3: Validate isProperty method after changing the object state

  Details:
    TestName: testIsPropertyAfterChangingState.
    Description: This test is meant to check the functionality of the isProperty() method after changing the state of the VersionReference object.
  Execution:
    Arrange: Initiate a VersionReference object with a null property by calling the ofValue() method, then reassign the object with a non-null property using the ofProperty() method.
    Act: Invoke the isProperty method.
    Assert: Use JUnit assertion to compare the actual result (should be true) with the expected result (true).
  Validation:
    This test aims to verify that the isProperty method correctly identifies the present state of the object, even after reassigning the object with a new state. The expected result is based on the current object state, which should return true as the property is not null after reassignment.
"""
*/

// ********RoostGPT********

package io.spring.initializr.generator.version;

import org.junit.Test;
import org.junit.experimental.categories.Category;
import static org.junit.Assert.assertEquals;
import java.util.Objects;

public class VersionReferenceIsPropertyTest {

	@Test
	@Category(Categories.valid.class)
	public void testIsPropertyWhenPropertyNotNull() {
		VersionProperty versionProperty = VersionProperty.of("test_property");
		VersionReference versionReference = VersionReference.ofProperty(versionProperty);
		boolean isProperty = versionReference.isProperty();
		assertEquals(true, isProperty);
	}

	@Test
	@Category(Categories.valid.class)
	public void testIsPropertyWhenPropertyNull() {
		VersionReference versionReference = VersionReference.ofValue("test_value");
		boolean isProperty = versionReference.isProperty();
		assertEquals(false, isProperty);
	}

	@Test
	@Category(Categories.valid.class)
	public void testIsPropertyAfterChangingState() {
		VersionProperty versionProperty = VersionProperty.of("test_property");
		VersionReference versionReference = VersionReference.ofValue("initial_test_value");
		// Reassigning the object state
		versionReference = VersionReference.ofProperty(versionProperty);
		boolean isProperty = versionReference.isProperty();
		assertEquals(true, isProperty);
	}

}