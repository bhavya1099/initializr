/*
 * Copyright 2012-2023 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// ********RoostGPT********
/*
Test generated by RoostGPT for test java-report-test using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=serviceCapabilitiesV21_14260ffd96
ROOST_METHOD_SIG_HASH=serviceCapabilitiesV21_14260ffd96

"""
  Scenario 1: Testing serviceCapabilitiesV21 method for non-null ResponseEntity.

  Details:
    TestName: validateServiceCapabilitiesV21Response
    Description: This scenario is designed to validate if the ResponseEntity returned by the method serviceCapabilitiesV21() is not null.

  Execution:
    Arrange: Mimic a valid scenario where the serviceCapabilitiesV21 method is expected to return a ResponseEntity.
    Act: Invoke the serviceCapabilitiesV21 method.
    Assert: Use assertNotNull to validate the ResponseEntity returned by the test method is not null.

  Validation:
    The assertion verifies that the serviceCapabilitiesV21 method does not return null. If the implementation is correct and the method works as expected, it should always return a ResponseEntity.


  Scenario 2: Testing serviceCapabilitiesV21 method for correct MediaType.

  Details:
    TestName: checkServiceCapabilitiesV21MediaType
    Description: This scenario is designed to check if the MediaType of the ResponseEntity is as expected.

  Execution:
    Arrange: Set up a scenario where serviceCapabilitiesV21 method is expected to return a ResponseEntity with the expected MediaType.
    Act: Invoke the serviceCapabilitiesV21 method.
    Assert: Use assertEquals to ensure the MediaType of the ResponseEntity matches the expected MediaType.

  Validation:
    The assertion checks if the correct MediaType is set in the ResponseEntity. The MediaType should match the expected MediaType for this version which is: "application/vnd.initializr.v2.1+json" or "application/json".


  Scenario 3: Testing serviceCapabilitiesV21 method under exceptional conditions.

  Details:
    TestName: testServiceCapabilitiesV21ForExceptions
    Description: This scenario is designed to test the serviceCapabilitiesV21 method under unexpected conditions where the method might throw an exception.

  Execution:
    Arrange: Set up a scenario that is expected to throw an exception when executing the serviceCapabilitiesV21 method.
    Act: Invoke the serviceCapabilitiesV21 method.
    Assert: Use the assertThrows method of Junit to validate the appropriate exception is thrown.

  Validation:
    The assertion verifies that the serviceCapabilitiesV21 method throws the correct exception when an error occurs during execution. This test helps in validating the error handling of the method.

  """
*/

// ********RoostGPT********

package io.spring.initializr.web.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import io.spring.initializr.metadata.InitializrMetadataProvider;
import io.spring.initializr.web.mapper.InitializrMetadataVersion;
import org.junit.jupiter.api.*;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import io.spring.initializr.generator.version.Version;
import io.spring.initializr.metadata.DependencyMetadata;
import io.spring.initializr.metadata.DependencyMetadataProvider;
import io.spring.initializr.metadata.InitializrConfiguration.Platform;
import io.spring.initializr.metadata.InitializrMetadata;
import io.spring.initializr.metadata.InvalidInitializrMetadataException;
import io.spring.initializr.web.mapper.DependencyMetadataJsonMapper;
import io.spring.initializr.web.mapper.DependencyMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataJsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV21JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV22JsonMapper;
import io.spring.initializr.web.mapper.InitializrMetadataV2JsonMapper;
import io.spring.initializr.web.project.InvalidProjectRequestException;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.http.CacheControl;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@ExtendWith(MockitoExtension.class)
public class ProjectMetadataControllerServiceCapabilitiesV21Test {

	@Mock
	private InitializrMetadataProvider metadataProvider;

	@InjectMocks
	private ProjectMetadataController controller;

	@Test
	@Tag("valid")
	public void validateServiceCapabilitiesV21Response() {
		// Arrange
		// No arrange needed as no inputs to the method
		// Act
		ResponseEntity<String> responseEntity = controller.serviceCapabilitiesV21();
		// Assert
		assertNotNull(responseEntity, "The ResponseEntity should not be null.");
	}

	@Test
	@Tag("valid")
	public void checkServiceCapabilitiesV21MediaType() {
		// Arrange
		// No arrange needed as no inputs to the method
		// Act
		ResponseEntity<String> responseEntity = controller.serviceCapabilitiesV21();
		// Assert
		assertEquals(MediaType.valueOf("application/vnd.initializr.v2.1+json"),
				responseEntity.getHeaders().getContentType(),
				"The MediaType should be 'application/vnd.initializr.v2.1+json' for this endpoint.");
	}

	@Test
	@Tag("invalid")
	public void testServiceCapabilitiesV21ForExceptions() {
		// Arrange
		// Specific exceptions needs to be analysed from code inorder to trigger
		// Act and Assert
		assertThrows(Exception.class, () -> controller.serviceCapabilitiesV21(),
				"The code should throw an exception under certain conditions.");
	}

}